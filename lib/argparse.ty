let bools = %{
    'true': true,
    'false': false,

    'on': true,
    'off': false,

    'yes': true,
    'no': false
}

pub function opt(short, long, pre=true, post=true, convert=id, multi=false, default=nil, help='') {
    return {
        short,
        long,
        pre,
        post,
        convert,
        multi,
        help,
        default,
        type: 'o',
    }
}

pub function flag(short, long, help='') {
    return {
        short,
        long,
        help,
        type: 'f'
    }
}

function add(opt, result, value) {
    for o in [opt.short, opt.long].remove!(nil) {
        if opt.multi {
            result[o] = result[o] ?? []
            result[o].push(value)
        } else {
            result[o] = value
        }
    }
}

pub fn make(*opts, version, help) {
    return fn (argv) {
        let result = %{}
        let i = 1

        for opt in opts {
            if opt.type == 'o' && opt.default != nil {
                result[opt.short ?? opt.long]  = opt.default.val
                result[opt.long  ?? opt.short] = opt.default.val
            }
        }

        function next() {
            if i == #argv {
                throw "Expected argument after {argv[i - 1]}"
            }
            return argv[i++]
        }

        function getflag(f) {
            opts.find(o -> o.type == 'f' && (o.short == f || o.long == f))
        }

        function getopt(opt) {
            opts.find(o -> o.type == 'o' && (o.short == opt || o.long == opt))
        }

        function similar(opt) {
            opts.filter(o -> o.long && o.long.editDistance(opt) <= 1 + max(1, #o.long / 4)).map(&.long)
        }

        function unrecognized(opt) {
            let close = similar(opt).map(${"--{it}"})
            if #close > 0 {
                throw "Unrecognized option: --{opt} (similar options: {close.join(', ')})"
            } else {
                throw "Unrecognized option: --{opt}"
            }
        }

        while i < #argv {
            let arg = next()
            match arg {
                '--' => {
                    break
                },

                '-h', '--help' => {
                    let (flags, opts) = opts.partition(o -> o.type == 'f')

                    if version {
                        print("{argv[0]} version {version}\n")
                    } else {
                        print("{argv[0]}\n")
                    }

                    print("USAGE: {argv[0]} [OPTIONS]\n")

                    if help != nil {
                        print(help)
                        print()
                    }

                    if #opts > 0 {
                        print('Options')
                        print()

                        let optStrings = [
                            match (opt.short, opt.long) {
                                (nil, l) => "    --{l}",
                                (s, nil) => "-{s}",
                                (s, l)   => "-{s}, --{l}"
                            }
                            for opt in opts
                        ]

                        let maxWidth = optStrings.map(&len).max()

                        for (opt, s) in opts.zip(optStrings) {
                            if opt.default != nil {
                                print("  {s.rpad(maxWidth)}    {opt.help} (default: {opt.default.show})")
                            } else {
                                print("  {s.rpad(maxWidth)}    {opt.help}")
                            }
                        }

                        print()
                    }

                    if #flags > 0 {
                        print('Flags')
                        print()

                        let flagStrings = [
                            ["-{flag.short}" if flag.short, "--{flag.long}" if flag.long].join(', ')
                            for flag in flags
                        ]

                        let maxWidth = flagStrings.map(&len).max()

                        for (flag, s) in flags.zip(flagStrings) {
                            print("  {s.rpad(maxWidth)}    {flag.help}")
                        }

                        print()
                    }

                    result << 'h'
                    result << 'help'
                },

                /^--([^=]+)$/ => {
                    if let $opt = getflag($1) {
                        if opt.long  { result << opt.long  }
                        if opt.short { result << opt.short }
                    } else {
                        unrecognized($1)
                    }
                },

                /^--([^=]+)=(.+)/ => {
                    if let $opt = getopt($1) {
                        if !($2 :: opt.pre) {
                            throw "Invalid value for {$1}: {$2}"
                        }
                        let value = (opt.convert)($2)
                        if !(value :: opt.post) {
                            throw "Invalid value for {$1}: {$2}"
                        }
                        add(opt, result, value)
                    } else if let $flag = getflag($1) and $2 in bools {
                        if bools[$2] {
                            if flag.short { result << flag.short }
                            if flag.long  { result << flag.long  }
                        } else {
                            result.remove(flag.short)
                            result.remove(flag.long)
                        }
                    } else {
                        unrecognized($1)
                    }
                },

                /^-(.+)/ => {
                    if not let $opt = opts.find(&.short |> (== $1[0])) {
                        throw "Unrecognized option: {$0}"
                    }

                    if opt.type == 'o' {
                        let s = if #$1 == 1 {
                            next()
                        } else {
                            $1.slice(1)
                        }

                        if !(s :: opt.pre) {
                            throw "Invalid value for {opt.long ?? $1[0]}: {s}"
                        }

                        let value = (opt.convert)(s)

                        if !(value :: opt.post) {
                            throw "Invalid value for {opt.long ?? $1[0]}: {s}"
                        }

                        add(opt, result, value)
                    } else {
                        for c in $1 {
                            if let $opt = getflag(c) {
                                if opt.short { result << opt.short }
                                if opt.long  { result << opt.long  }
                            } else {
                                throw "Unrecognized flag: {c}"
                            }
                        }
                    }
                },

                _ => {
                    i -= 1
                    break
                }
            }
        }

        argv.slice!(0, i)

        return result
    }
}
