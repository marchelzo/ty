import ty
import ty.parse
import ty.token

tag ChalkError;

use TermStyle = () | {
    bold:      ?Bool,
    italic:    ?Bool,
    underline: ?[Int],
    dim:       ?Bool,
    reverse:   ?Bool,
    fg:        ?[Int],
    bg:        ?[Int],
    uc:        ?[Int],
    fg-bright: ?Bool,
    bg-bright: ?Bool
}

// Some nice colors :)
//
// blue:   #1d55c6
// green:  #6cad65
// yellow: #e5b211
// pink:   #e94db2
// purple: #a571ce
// red:    #dd203c
// gray:   #726157
// orange: #ed6d18
// white:  #f1d2a5
//

pub fn escape(text: String) -> String {
    text.sub(/\[|\\/, %{'[': '\\[', '\\': '\\\\'}[])
}

fn enables-of(trans: _) -> String {
    trans.matches(/\[([^]\/]*)\]/).map(\_[1].words()).flat().unwords() ?? ''
}

fn disables-of(trans: _) -> String {
    trans.matches(/\[\/([^]\/]*)\]/).map(\_[1].words()).flat().unwords() ?? ''
}

fn flip(trans: String) -> String {
    let on = enables-of(trans)
    let off = disables-of(trans)

    let (on, off) = (off && "[{off}]", on && "[/{on}]")

    "{on}{off}"
}

fn split(text: String, i: Int, greedy?: Bool = true) -> (String, String) {
    let off = 0
    let width = 0
    let matches = text.matches(/\x1b\[[^m]*m(*SKIP)(*FAIL)|[^\x1b]+/v)

    let stop = greedy? ? (\width > i) : (\width >= i)

    for _match in matches while !stop() {
        off = min(_match.end, _match.start + (i - width))
        width += #_match
    }

    text.split(off)
}

let styles: Dict[String, TermStyle] = %{
    'b':            {bold: true},
    'no-b':         {bold: false},
    'bold':         {bold: true},
    'no-bold':      {bold: false},

    'i':            {italic: true},
    'no-i':         {italic: false},
    'italic':       {italic: true},
    'no-italic':    {italic: false},

    'dim':          {dim: true},
    'reverse':      {reverse: true},

    'no-uc':        {uc: [59]},

    'u':            {underline: [4]},
    'no-u':         {underline: [24]},

    'underline':    {underline: [4]},
    'no-underline': {underline: [24]},

    'uu':           {underline: [4, 2]},
    'u~':           {underline: [4, 3]},
    'u.':           {underline: [4, 4]},
    'u-':           {underline: [4, 5]},

    'no-fg':        {fg: [39]},
    'black':        {fg: [30]},
    'red':          {fg: [31]},
    'green':        {fg: [32]},
    'yellow':       {fg: [33]},
    'blue':         {fg: [34]},
    'magenta':      {fg: [35]},
    'cyan':         {fg: [36]},
    'white':        {fg: [37]},

    'no-bg':        {bg: [49]},
    'bg-black':     {bg: [40]},
    'bg-red':       {bg: [41]},
    'bg-green':     {bg: [42]},
    'bg-yellow':    {bg: [43]},
    'bg-blue':      {bg: [44]},
    'bg-magenta':   {bg: [45]},
    'bg-cyan':      {bg: [46]},
    'bg-white':     {bg: [47]},

    'bright':       {bright: true},
    'bg-bright':    {bg-bright: true}
}

@[memoized]
fn record-of(attrs: String, start: _ = {}) -> _ {
    let props = start

    let name = match {
        1 => 'red',
        2 => 'green',
        3 => 'yellow',
        4 => 'blue',
        5 => 'magenta',
        6 => 'cyan',
        7 => 'white',
        _ => nil
    }

    let try-int = match (int ~> $n) => n else it

    let pattern = /([345]8[:;]2(?:[:;]\d{1,3}){3})|(\d+:\d+(?::\d+)*)|;/

    for match attrs.split(pattern).map(try-int) {
        /38.2.(\d+).(\d+).(\d+)/ => {
            props = {*props, fg: "#{int($1):02x}{int($2):02x}{int($3):02x}"}
        },

        /48.2.(\d+).(\d+).(\d+)/ => {
            props = {*props, bg: "bg-#{int($1):02x}{int($2):02x}{int($3):02x}"}
        },

        /58.2.(\d+).(\d+).(\d+)/ => {
            props = {*props, uc: "uc-#{int($1):02x}{int($2):02x}{int($3):02x}"}
        },

        /4:(\d)/ => {
            props = {
                *props,
                underline: match int($1) {
                    0 => false,
                    1 => 'u',
                    2 => 'uu',
                    3 => 'u~',
                    4 => 'u.',
                    5 => 'u-'
                }
            }
        },

        0 => { props = {} },
        1 => props = {*props, bold: 'b' },
        3 => props = {*props, italic: 'i' },
        4 => props = {*props, underline: 'u' },
        7 => props = {*props, reverse: 'reverse' },

        22 => props = {*props, bold: false },
        23 => props = {*props, italic: false },
        24 => props = {*props, underline: false },
        27 => props = {*props, reverse: false },

        39 => props = {*props, fg-bright: nil, fg: false },
        49 => props = {*props, bg-bright: nil, bg: false },
        59 => props = {*props, uc: false },

        fg ::  31...39  => props = {*props, fg: name(fg - 30)},
        fg ::  91...99  => props = {*props, bright: 'bright', fg: name(fg - 90)},

        bg ::  41...49  => props = {*props, bg: "bg-{name(bg - 40)}"},
        bg :: 101...109 => props = {*props, bg-bright: 'bg-bright', bg: "bg-{name(bg - 100)}"},

        _ => ()
    }

    props
}

@[memoized]
fn detrans(a: TermStyle, b: TermStyle) -> String {
    let on = []
    let off = []

    let a: _ = %{**a}
    let b: _ = %{**b}

    bright-unfix(a)
    bright-unfix(b)

    a = %{key: val for key, val in a if val != nil}
    b = %{key: val for key, val in b if val != nil}

    for key, val in b if a[key] != val {
        match val {
            false => {
                if key in a {
                    off.push(key)
                }
            },
            _ => on.push(val)
        }
    }

    let trans = on ? "[{on.unwords()}]" : ''
    let trans = off ? "[/{off.unwords()}]{trans}" : trans

    trans
}

pub fn parse(text: String, start: _ = {}) -> String {
    let out = Blob()
    let props = start
    let style = start

    fn push(text, st) {
        out.push(detrans(style, st))
        out.push(escape(text))
        style = st
    }

    for match text.split(/\x1b\[([^m]*)m/v) {
        escape: RegexMatch => {
            props = record-of(escape[1], start=props)
        },
        text => {
            push(text, props)
        }
    }

    push('', start)

    out.str!()
}

class Text {
    __text: String
    __chalk: Chalk
    __fmt: ?String

    init(text, chalk, fmt=nil) {
        __text = text
        __chalk = chalk
        __fmt = fmt
    }

    chalk { __chalk }

    __str__() -> String {
        __chalk.render(__text)
    }

    __fmt__(spec: ?String) -> String {
        let spec = spec ?? __fmt
        spec ? "[%{spec}]{__text}[/]" : __text
    }

    src -> String { __text }
    
    plain -> String {
        __chalk.render(__text, plain=true)
    }

    +(other: Text) -> Text {
        cast(__chalk"{self}{other}")
    }

    style-span(
        span: (Int, Int),
        style: String
    ) -> Text {
        let (i, j) = span

        let full = __chalk.render(__text)

        let (pre, rest) = split(full, i)
        let (text, post) = split(rest, j - i)

        let text = __chalk.render("[{style}]{parse(text)}[/{style}]")
        let src = parse("{pre}{text}{post}")

        Text(src, __chalk)
    }
}

use FloatRange = Float | (Float, Float)

pub fn randf(lo: Float, hi: Float) -> Float {
    lo + (hi - lo)*rand()
}

pub fn rand-hsl(
    h: FloatRange = (0.0, 1.0),
    s: FloatRange = (0.4, 1.0),
    l: FloatRange = (0.6, 0.75)
) -> (Float, Float, Float) {
    let sample = match {
          (lo, hi) => randf(lo, hi),
          x        => x
    }
    (sample(h), sample(s), sample(l))
}

@[memoized]
fn parse-style(style: String, chalk: Chalk) -> ?TermStyle {
    match style {
        /.*\?$/ => do {
            let (h, s, l) = rand-hsl()
            let (r, g, b) = hsl-to-rgb(h, s, l)
            ({fg: [38, 2, r, g, b]})
        },

        /^#[[:xdigit:]]+$/ => do {
            let group = [/./, /../][#style / 3 - 1]
            let rgb = style[1;].matches(group).map(int@("{$1}{$1}"[;2], 16))
            ({fg: [38, 2, *rgb]})
        },

        /^bg-(.*)$/ => match parse-style($1, chalk) {
            {fg: [k, *ks], *} => ({bg: [k + 10, *ks]}),
            _                 => nil
        },

        /^uc-(.+)$/ => match parse-style($1, chalk) {
            {fg: [k, *ks], *} => ({uc: [k + 20, *ks]}),
            _                 => nil
        },

        /^u--(.*)$/ => match parse-style($1, chalk) {
            {fg: [k, *ks], *} => ({uc: [k + 20, *ks], underline: [4, 5]}),
            _                 => nil
        },

        /^u\.-(.*)$/ => match parse-style($1, chalk) {
            {fg: [k, *ks], *} => ({uc: [k + 20, *ks], underline: [4, 4]}),
            _                 => nil
        },

        /^u~(.*)$/ => match parse-style($1, chalk) {
            {fg: [k, *ks], *} => ({uc: [k + 20, *ks], underline: [4, 3]}),
            _                 => nil
        },

        /^uu-(.*)$/ => match parse-style($1, chalk) {
            {fg: [k, *ks], *} => ({uc: [k + 20, *ks], underline: [4, 2]}),
            _                 => nil
        },

        /^u-(.+)$/ => match parse-style($1, chalk) {
            {fg: [k, *ks], *} => ({uc: [k + 20, *ks], underline: [4]}),
            _                 => nil
        },

        _ => nil
    }
}

fn bright-fix(style) {
    if let [int ~> fg] = style['fg'] and 'bright' in style {
        style['fg'] = [fg + 60]
    }
    if let [int ~> bg] = style['bg'] and 'bg-bright' in style {
        style['bg'] = [bg + 60]
    }
    style.remove('bright')
    style.remove('bg-bright')
}

fn bright-unfix(style) {
    style.remove('bright')
    style.remove('bg-bright')
    if let [int ~> fg] = style['fg'] and fg :: 90...99 {
        style['fg'] = [fg - 60]
        style['bright'] = true
    }
    if let [int ~> bg] = style['bg'] and bg :: 100...109 {
        style['bg'] = [bg - 60]
        style['bg-bright'] = true
    }
}

@[memoized]
fn trans(a: TermStyle, b: TermStyle) -> String {
    let a: _ = %{**a}
    let b: _ = %{**b}

    bright-fix(a)
    bright-fix(b)

    let attrs: [Int | String] = []

    for key, val in b if a[key] != val {
        match key {
            'fg' or 'bg' or 'uc'       => attrs.push(val.join(':')),
            'underline' :: val != nil  => attrs.push(val.join(':')),
            'bold'      :: val != nil  => attrs.push(1),
            'italic'    :: val != nil  => attrs.push(3),
            'reverse'   :: val != nil  => attrs.push(7),
            _                    => ()
        }
    }

    attrs += (a - b).keys().map?(match {
        'fg'        => Some(39),
        'bg'        => Some(49),
        'uc'        => Some(59),
        'bold'      => Some(22),
        'italic'    => Some(23),
        'underline' => Some(24),
        'reverse'   => Some(27),
        _           => None
    })

    attrs ? "\x1b[{attrs.join(';')}m" : ''
}

class Chalk {
    init() {
        member(self, 'styles', %{**styles, *: parse-style(it, self)})
    }

    render(text: String, plain: Bool = false) {
        let parts = text.split(/(?<=^|[^\\])\[([\/%])?([^]]*)\]/v)

        let stack: _ = [[{}]]
        let style = {}
        let out = Blob()
        let ostack = []

#|if getenv('NO_COLOR') == nil
        fn update() {
            let new-style = stack.flat().fold({}, \{*_, *_})
            out.push(trans(style, new-style))
            style = new-style
        }
#|else
        fn update() {}
#|]

        fn get-style(name) {
            match @styles[name] {
                $style => style,
                _      => throw ChalkError({
                    msg: 'unknown style',
                    src: text,
                    style: name
                })
            }
        }

        fn finish-fmt(fmt: String) {
            ostack[-1].push("{out.str!():{fmt}}")
            out = ostack.pop()
        }

        fn stops(stop, style) {
            match stop {
                'fg' and style.matches?({fg, ?bright})
                    => true,
                'bg' and style.matches?({bg, ?bg-bright})
                    => true,
                'uc' and style.matches?({uc, ?underline})
                    => true,
                'underline' and style.matches?({underline, ?uc})
                    => true,
                _ => style == @styles[stop]
            }
        }
    
        for match parts {
            m: RegexMatch => {
                continue if plain
                match m.captures {
                    [nil, &words $~> styles] => {
                        stack.push(styles.map(get-style))
                        update()
                    },

                    ['%', fmt] => {
                        ostack.push(out)
                        out = Blob()
                        stack.push({fmt})
                    },

                    [_, &words $~> []] => {
                        match stack.pop() {
                            {fmt} => finish-fmt(fmt),
                            _     => update()
                        }
                    },

                    [_, &words $~> styles] => {
                        for style in styles {
                            for entry in stack[;;-1] if entry :: Array {
                                if let $ii = entry.searchr-by(\style `stops` _) {
                                    entry.pop(ii)
                                }
                            }
                        }
                        stack.filter!(\#_ > 0)
                        update()
                    }
                }
            },

            s => out.push(s)
        }

        for match stack {
            {fmt} => finish-fmt(fmt),
            _     => ()
        }

        stack.filter!(\!matches?(_, {fmt}))

        if !plain {
            update()
        }

        out.str!().sub(/\\./, %{'\\\\': '\\', '\\[': '[', *: it[1]}[])
    }

    print(*xs, %kwargs) {
        ::print(
            *xs.map(match { x: Text => self.render(x.text), x => x }),
            **kwargs
        )
    }

    __missing__=(name, style) {
        @styles[name] = style.words().map(@styles[]).fold(\{*_, *_})
    }

    __missing__(name) {
        @styles[name]
    }

    __call__(parts: _) -> Text {
        Text(
            parts.map(match {
                s: String   => s,
                (x, fmt, w) => (
                      x :: Text ? x.__fmt__(fmt)
                    : parse(fmt ? x.__fmt__(fmt, w) : x.__str__())
                )
            }).str(),
            self
        )
    }

    [](style: Any) -> (Any -> Text) {
        return text -> self"[{style}]{text}[/]"
    }

    plain(text: Text | String) {
        render(text :: Text ? text.text : text, plain=true)
    }
}

pub fn strip(text: String) -> String {
    text.comb(/\x1b[^m]+m/)
}

pub fn hueToRgb(p: Float, q: Float, t: Float) -> Float {
  if t < 0.0 { t += 1.0 }
  if t > 1.0 { t -= 1.0 }
  if t < 1.0/6 { return p + (q - p) * 6 * t }
  if t < 1.0/2 { return q }
  if t < 2.0/3 { return p + (q - p) * (2.0/3.0 - t) * 6.0 }
  return p
}

pub fn hslToRgb(h: Float, s: Float, l: Float) -> (Int, Int, Int) {
  let (r, g, b) = if s < 0.0001 {
        (l, l, l)
  } else {
    let q = (l < 0.5) ? l * (1.0 + s) : l + s - l * s
    let p = 2.0 * l - q
    (
        hueToRgb(p, q, h + 1.0/3.0),
        hueToRgb(p, q, h),
        hueToRgb(p, q, h - 1.0/3.0)
    )
  }

  return (iround(r * 255), iround(g * 255), iround(b * 255))
}

pub fn hsl-hex(h, s, l) {
    let (r, g, b) = hslToRgb(h, s, l)
    return "#{r:02x}{g:02x}{b:02x}"
}

pub fn random(
    h: FloatRange = (0.0, 1.0),
    s: FloatRange = (0.4, 1.0),
    l: FloatRange = (0.6, 0.75)
) {
    return hsl-hex(*rand-hsl(h, s, l))
}

pub chalk = Chalk()
