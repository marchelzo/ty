export wrap, black, red, green, yellow, blue, magenta, cyan, white, bgBlack, bgRed, bgGreen, bgYellow, bgBlue, bgMagenta, bgCyan, bgWhite, brightBlack, brightRed, brightGreen, brightYellow, brightBlue, brightMagenta, brightCyan, brightWhite, bold, underline, fg, bg, pen

function wrap(s, *props) {
  "\x1b[{props.join(';')}m{s}\x1b[0m"
}

function black(s)   { wrap(s, 30) }
function red(s)     { wrap(s, 31) }
function green(s)   { wrap(s, 32) }
function yellow(s)  { wrap(s, 33) }
function blue(s)    { wrap(s, 34) }
function magenta(s) { wrap(s, 35) }
function cyan(s)    { wrap(s, 36) }
function white(s)   { wrap(s, 37) }

function bgBlack(s)   { wrap(s, 40) }
function bgRed(s)     { wrap(s, 41) }
function bgGreen(s)   { wrap(s, 42) }
function bgYellow(s)  { wrap(s, 43) }
function bgBlue(s)    { wrap(s, 44) }
function bgMagenta(s) { wrap(s, 45) }
function bgCyan(s)    { wrap(s, 46) }
function bgWhite(s)   { wrap(s, 47) }

function brightBlack(s)   { wrap(s, 90) }
function brightRed(s)     { wrap(s, 91) }
function brightGreen(s)   { wrap(s, 92) }
function brightYellow(s)  { wrap(s, 93) }
function brightBlue(s)    { wrap(s, 94) }
function brightMagenta(s) { wrap(s, 95) }
function brightCyan(s)    { wrap(s, 96) }
function brightWhite(s)   { wrap(s, 97) }

function bold(s) {
  wrap(s, 1)
}

function underline(s) {
  wrap(s, 4)
}

function fg(c) {
  match c.lower() {
    'black'   => black,
    'red'     => red,
    'green'   => green,
    'yellow'  => yellow,
    'blue'    => blue,
    'magenta' => magenta,
    'cyan'    => cyan,
    'white'   => white,
    _         => s -> wrap(s, 38, 2, *c.comb('#').matches(/../).map(s -> int(s, 16)))
  }
}

function bg(c) {
  return match c.lower() {
    'black'   => bgBlack,
    'red'     => bgRed,
    'green'   => bgGreen,
    'yellow'  => bgYellow,
    'blue'    => bgBlue,
    'magenta' => bgMagenta,
    'cyan'    => bgCyan,
    'white'   => bgWhite,
    _         => s -> wrap(s, 48, 2, *c.comb('#').matches(/../).map(s -> int(s, 16)))
  }
}

function pen(*args) {
  let p = id

  for arg in args {
    p = p |> match type(arg) {
      Function => arg,
      Int      => s -> wrap(s, arg),
      String   => fg(arg)
    }
  }

  return p
}

function strip(s) {
    s.comb(/\x1b[^m]+m/)
}

pub function padLeft(s, n) {
    let w = #strip(s)
    ' '.repeat(max(0, n - w)) + s
}

pub function padRight(s, n) {
    let w = #strip(s)
    s + ' '.repeat(max(0, n - w))
}
