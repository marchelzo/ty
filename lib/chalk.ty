pub function wrap(s, *props) {
  "\x1b[{props.join(';')}m{s}\x1b[0m"
}

pub function black(s)   { wrap(s, 30) }
pub function red(s)     { wrap(s, 31) }
pub function green(s)   { wrap(s, 32) }
pub function yellow(s)  { wrap(s, 33) }
pub function blue(s)    { wrap(s, 34) }
pub function magenta(s) { wrap(s, 35) }
pub function cyan(s)    { wrap(s, 36) }
pub function white(s)   { wrap(s, 37) }

pub function bgBlack(s)   { wrap(s, 40) }
pub function bgRed(s)     { wrap(s, 41) }
pub function bgGreen(s)   { wrap(s, 42) }
pub function bgYellow(s)  { wrap(s, 43) }
pub function bgBlue(s)    { wrap(s, 44) }
pub function bgMagenta(s) { wrap(s, 45) }
pub function bgCyan(s)    { wrap(s, 46) }
pub function bgWhite(s)   { wrap(s, 47) }

pub function brightBlack(s)   { wrap(s, 90) }
pub function brightRed(s)     { wrap(s, 91) }
pub function brightGreen(s)   { wrap(s, 92) }
pub function brightYellow(s)  { wrap(s, 93) }
pub function brightBlue(s)    { wrap(s, 94) }
pub function brightMagenta(s) { wrap(s, 95) }
pub function brightCyan(s)    { wrap(s, 96) }
pub function brightWhite(s)   { wrap(s, 97) }

pub function bold(s) {
  wrap(s, 1)
}

pub function underline(s) {
  wrap(s, 4)
}

pub function fg(c) {
  match c.lower() {
    'black'   => black,
    'red'     => red,
    'green'   => green,
    'yellow'  => yellow,
    'blue'    => blue,
    'magenta' => magenta,
    'cyan'    => cyan,
    'white'   => white,
    _         => s -> wrap(s, 38, 2, *c.comb('#').matches(/../).map(s -> int(s, 16)))
  }
}

pub function bg(c) {
  return match c.lower() {
    'black'   => bgBlack,
    'red'     => bgRed,
    'green'   => bgGreen,
    'yellow'  => bgYellow,
    'blue'    => bgBlue,
    'magenta' => bgMagenta,
    'cyan'    => bgCyan,
    'white'   => bgWhite,
    _         => s -> wrap(s, 48, 2, *c.comb('#').matches(/../).map(s -> int(s, 16)))
  }
}

pub function pen(*args) {
  let p = id

  for arg in args {
    p = p |> match type(arg) {
      Function => arg,
      Int      => s -> wrap(s, arg),
      String   => fg(arg)
    }
  }

  return p
}

pub function strip(s) {
    s.comb(/\x1b[^m]+m/)
}

pub function padLeft(s, n) {
    let w = #strip(s)
    ' '.repeat(max(0, n - w)) + s
}

pub function padRight(s, n) {
    let w = #strip(s)
    s + ' '.repeat(max(0, n - w))
}
