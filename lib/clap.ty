import ty
import ty.token (next, peek)
import ty.lex (peekc, getc)
import ty.parse (expr)
import argparse (opt, flag)
import os

function lispCase(s) {
    s.matches(/(?:^[[:lower:]]+)|(?:[[:upper:]][[:lower:]]*)/)
     .join('-')
     .lower()
}

function camelCase(s) {
    let [first, *rest] = s.split('-')
    rest.map!(s -> s[0].upper() + s.slice(1).lower())
    [first, *rest].sum()
}

class Args {
    parse(argv = os.args) {
        let opts = self.info()
        let cmds = self.cmds()
        let args = []

        let version = self.version()

        for o in opts {
            if o.constraint == Bool {
                args.push(flag(short: o.short, long: o.long, help: o.help))
            } else if let [c] = o.constraint {
                args.push(opt(short: o.short, long: o.long, help: o.help, convert: o.?conv, post: c, multi: true))
            } else {
                args.push(opt(short: o.short, long: o.long, help: o.help, convert: o.?conv, post: o.constraint))
            }
        }

        let result = argparse.make(*args, version: version)(argv)

        if #argv > 0 {
            let sub = camelCase(argv[0])
            if let $cmd = cmds[sub] {
                result[sub] = ty.eval(cmd).parse(argv)
                opts.push({
                    name: sub,
                    short: nil,
                    long: sub,
                    constraint: true
                })
                result['cmd'] = sub
                opts.push({
                    name: 'cmd',
                    short: 'cmd',
                    long: nil,
                    constraint: true
                })
            } else {
                // Error?
            }
        }

        (
            tuple(**%{
                o.name:
                    (o.constraint == Bool) ? ((o.short in result) || (o.long in result))
                                           : (result[o.short] ?? result[o.long])
                for o in opts
            } + %{ 'help': 'help' in result }),
            argv
        )
    }
}

pub macro clap! {
    let name = peek(0).id

    next()

    while peekc().match?(/\s/) {
        getc()
    }

    let version = if peekc() == 'v' {
        getc()

        let v = ''
        
        while !peekc().match?(/\s/) {
            v += getc()
        }

        v
    }

    next()

    let args = []
    let cmds = %{}

    while peek(0).type != '}' {
        let help = if peek(0).type == 'comment' {
            next()
            peek(-1).comment
        }

        let name = peek(0).id
        next()

        if name == 'cmd' {
            let sub = peek(0).id
            next()

            // :
            next()

            let parser = expr(999, resolve: true)

            cmds[sub] = parser

            continue
        }

        // :
        next()

        let constraint = ty.eval(expr(0))
        let conv = constraint
        let short = name[0]
        let long = lispCase(name)

        while peek(0).type == ',' {
            next()

            let attr = peek(0)
            next()

            match attr.id {
                'conv' => {
                    next()
                    conv = ty.eval(expr(0))
                },

                'short' => {
                    next()
                    short = match ty.eval(expr(0)) { None => nil, x => x }
                },

                'long' => {
                    next()
                    long = match ty.eval(expr(0)) { None => nil, x => x }
                }
            }
        }

        args.push({name, constraint, help, conv, short, long})
    }

    let getCmds = ty.Func(name: 'cmds', params: [], body: ty.Return(ty.Value(cmds)))
    let info = ty.Func(name: 'info', params: [], body: ty.Return(ty.Value(args)))
    let version = ty.Func(name: 'version', params: [], body: ty.Return(ty.Value(version)))

    next()

    ty.Class(name: name, methods: [info, getCmds, version], super: ty.Id(name: 'Args', module: 'clap'))
}
