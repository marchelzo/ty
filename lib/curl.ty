import curl::mime as mime
import curl::core (..)
import curl.slist as slist
import curl.url
import ptr (null)

pub class CURL {
    init(url, params) {
        self.handle = init()
        self.url = curl.url.new()
        self.headers = null
        setopt(self.handle, CURLOPT_FOLLOWLOCATION, true)

        let rc = curl.url.set(@url, curl.url.PART_URL, url, 0)
        if rc != 0 {
            throw Err(curl.url.strerror(rc))
        }

        if params != nil {
            self.params(params)
        }
    }

    post(data) {
        let s = data.list().map(pair -> "{pair.0}={pair.1}").join('&')
        setopt(self.handle, CURLOPT_COPYPOSTFIELDS, s)
        return self
    }

    mimePost(data) {
        let mime = mime::init(self.handle)
        for k, v in data {
            let part = mime::add(mime)
            mime::name(part, k)
            mime::data(part, v)
        }
        setopt(self.handle, CURLOPT_MIMEPOST, mime)
        return self
    }

    header(k: String, v) {
        let b = Blob("{k}: {v}")
        b.push(0)
        @headers = slist.append(@headers, b)
        setopt(self.handle, CURLOPT_HTTPHEADER, @headers)
        return self
    }

    params(d) {
        for k, v in d {
            if v :: Iter && v !:: String {
                for e in v {
                    curl.url.set(@url, curl.url.PART_QUERY, "{k}={e}", curl.url.APPENDQUERY .|. curl.url.URLENCODE)
                }
            } else {
                curl.url.set(@url, curl.url.PART_QUERY, "{k}={v}", curl.url.APPENDQUERY .|. curl.url.URLENCODE)
            }
        }
    }

    perform() {
        match curl.url.get(@url, curl.url.PART_URL, 0) {
            Ok(url) => {
                dbg(url)
                setopt(self.handle, CURLOPT_URL, url)
                return perform(self.handle)
            },

            Err(rc) => {
                throw Err(curl.url.strerror(rc))
            }
        }
    }

    responseCode() {
        getinfo(self.handle, CURLINFO_RESPONSE_CODE)
    }
}

pub function fetch(url, params = %{}, method='GET') {
    let c = CURL(url)
    c.params(params)
    return c.perform()
}
