import os
import chalk (chalk)
import help (pretty-print, pretty)
import readln (readln)
import tdb
import term
import ty

pub macro Source   = 1
pub macro Bytecode = 2

class TDBError < RuntimeError {
    init(msg: String) {
        super(msg)
    }
}

chalk.fg0    = '#e1c78f'
chalk.fg1    = '#ddc7a1'
chalk.red    = '#ea6962'
chalk.aqua   = '#89b482'
chalk.orange = '#e78a4e'
chalk.yellow = '#d8a657'
chalk.green  = '#a9b665'
chalk.blue   = '#7daea3'
chalk.blue2  = '#3193ce'
chalk.purple = '#d3869b'
chalk.aqua   = '#89b482'
chalk.grey   = '#847a6d'
chalk.pink   = '#d677be'

let groups = %{
    'fg0': 'id',
    'fg1': '[ ] { } ( ) . , ] ;',
    'orange': '
        =   ==  ++  --  +   -  *   /   %   ^    |    &
        +=  -=  *=  /=  %=  @  #   &&  ||  <=>  !    ~  
        ->  ~>  =>  $~> >   <  !=  ??  >>  <<   <<=  >>=  |>
        *** &&& <$> <%> ?> <? <*>  *>  <*  ..%. .%.. .%
        ::  ?=  |=  &=  ^=
    ',
    'purple': 'true false nil int float',
    'red': '
        for       while    if     let       and    fn
        do        try      catch  operator  or     in
        match     else     with   import    break  pub
        continue  return   macro  where     not    throw
    ',
    'yellow': 'class trait tag use',
    'green': 'fun string " f-string',
    'blue': 'type',
    'blue2': 'typeof',
    'aqua': 'regex',
    'grey': 'comment',
    'pink': 'pp'
}

let colors = [ %{ t: c for t in g.words() } for c, g in groups ].sum()

@[memoized]
function color-and-break(module: String) -> [(Int, String)] {
    if not let ($source, $tokens) = (ty.text(module), ty.tokens(module)) {
        throw TDBError("failed to fetch source information for {module}")
    }

    let tokens = tokens.remove!(nil).map!(t -> match t {
        {id, end, *} and source[end.byte] == '(' => do { let x: _ = t; ({*x, type: 'fun'}) },
        {id: /^[A-Z]\w*[a-z]\w*$/, *}          => do { let x: _ = t; ({*x, type: 'type'}) },
        _ => t
    })

    let parts = [(it, '') for source]

    for {start, end, type, *} in tokens {
        let i = start.byte
        let j = end.byte

        continue if not let $color = colors[type]

        for i..j { parts[it] = (parts[it][0], color) }
    }

    parts.group-by!(&1).map!(group -> (group.map(&0).str(), group[0][1]))

    let out = Blob()

    for (text, fg) in parts {
        out.push(fg ? "[{fg}]{chalk::escape(text)}[/]" : chalk::escape(text))
    }

    out.str!().lines().enumerate!()
}

fn next-line(line: Int) -> (Token -> Bool) do (
    match ({start, *}) => start.line != line
)

fn next-call(start-func, start-fp) do (
    match ({fp, *}) => (fp != start-fp)
)

fn end-of-expr() (
    match tdb.span() {
        (lo, hi) => match ({ip, *}) => (ip < lo) || (ip >= hi),
        _        => nil
    }
)

let stop-cond = nil
let step = nil
let current-line = -1
let current-mode = Source
let expr-span = nil
let depth = 0

tdb.hook = fn hook() {
    let state = tdb.state()

    let (H, W) = term::size(1)

    let { mod, file, expr, prog
        , insn, ip, fp, sp, func } = state

    if prog == nil {
        tdb.over()
        return
    }

    depth += 1
    defer depth -= 1

    fn print-source(range: ?Range = nil) {
        let lines = color-and-break(mod)

        let range = (range ?? current-line.range(-(H/3), H/2)).clamp(0, #lines)
         
        print("\x1b[2J\x1b[H", :flush)
        print(chalk"[yellow]File:[/] [blue]{file}[/]")

        try {
            for (i, chalk::Text@(_, chalk) ~> source-line) in lines[range] {
                let highlight = text -> chalk"[bright yellow bold]{text}[/]"
                let margin = (i == current-line)
                           ? "     --> {i + 1:6} |" >> highlight
                           : "         {i + 1:6} |"
                if i == current-line {
                    if expr-span != nil {
                        source-line = source-line.style-span(expr-span, 'b u.-#7ead85')
                    }
                    source-line = chalk"[bg-#3c3836]{source-line:-100}[/]"
                }
                print(chalk"{margin} {source-line}")
            }

            print(chalk"[yellow]Current instruction:[/] [blue]{insn}[/]")
        } catch chalk::ChalkError(e) {
            print(chalk"[bright red b]chalk error[/]: {pretty(e)}")
        }
    }

    if (expr != nil) and let {start, end, *} = ty.src(expr) {
        if stop-cond != nil && !stop-cond({*state, start, end}) {
            step()
            return
        }

        expr-span = (start.line == end.line) ? (start.col, end.col) : nil
        current-line = start.line
        stop-cond = nil

        match current-mode {
            Source => {
                print-source()
            },

            Bytecode => {
                tdb.list()
            }
        }
    }

    while match readln("(tdb)[{depth}] ", !:erase) {
        /^p (.*)$/ => match tdb.eval($1) {
            Err(msg) => print(msg),
            Ok(val)  => pretty-print(val)
        },

        /^b (.*)$/ => match tdb.eval($1) {
            Err(msg) => print(msg),
            Ok(fun)  => tdb.breakpoint(fun)
        },

        /^x(?:\/(\d+))?/ => {
            let stack = tdb.stack()
            let n = int($1) ?? min(32, #stack)

            if #stack == 0 {
                print(chalk"[blue](empty stack)[/]")
                continue
            }

            print("Stack [{#stack}]: TOP")

            for match (1...n).map(i -> stack(-i)) {
                Some(x) => {
                    print('        ', end='')
                    print(x)
                },

                _ => break
            }
        },

        'l' => {
            if prog != nil {
                print-source()
                current-mode = Source
            }
        },

        /l (\d+)(?:\s*-\s*(\d+))?/ => {
            if prog != nil {
                let lo = int($1) - 1
                let hi = int($2 || (lo + 20)) - 1
                print-source(lo...hi)
                current-mode = Source
            }
        }

        'd' => {
            tdb.list()
            current-mode = Bytecode
        },

        'bt' => {
            tdb.backtrace()
        },

        'st' => {
            pretty-print(state)
        },

        'lo' => {
            if let $locals = tdb.locals() {
                pretty-print(tuple(**tdb.locals()))
            } else {
                print(chalk"[bright red]No locals![/]")
            }
        },

        'n' or '' => match current-mode {
            Source => {
                stop-cond = next-line(current-line)
                step = tdb.over
                break
            },

            Bytecode => {
                stop-cond = (-> true)
                step = tdb.over
                break
            }
        },

        's' => {
            stop-cond = next-call(func, fp)
            step = () -> tdb.into() || tdb.over()
            break
        },

        '1' => {
            stop-cond = (-> true)
            step = tdb.over
            break
        },

        'fe' => {
            stop-cond = end-of-expr()
            step = tdb.over
            break
        },

        'c' => {
            stop-cond = nil
            return
        },

        'q' => {
            os::exit(0)
        },

        c => {
            print("bro? {c}")
        }
    }

    step()
}
