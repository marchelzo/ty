import ffi as c
import ty
import ty.token (next, peek)
import ty.parse (expr, stmt, fail)
import ty.lex as lex
import ptr (typed)

tag CType;

__set_type__ c::i8      CType[Int];
__set_type__ c::i16     CType[Int];
__set_type__ c::i32     CType[Int];
__set_type__ c::i64     CType[Int];
__set_type__ c::int     CType[Int];
__set_type__ c::u8      CType[Int];
__set_type__ c::u16     CType[Int];
__set_type__ c::u32     CType[Int];
__set_type__ c::u64     CType[Int];
__set_type__ c::uint    CType[Int];
__set_type__ c::float   CType[Float];
__set_type__ c::double  CType[Float];

fn c::str(ptr: IntoPtr[Any], len: ?Int) -> String;
fn c::as_str(ptr: IntoPtr[Any], len: ?Int) -> String;
fn c::load[T](type: CType[T], address: IntoPtr[T]) -> T;
fn c::size[T](type: CType[T]) -> Int;
fn c::free(ptr: IntoPtr[Any]) -> nil;
fn c::new[T](type: CType[T], count: ?Int) -> Ptr[T];
fn c::alloc[T](size: Int) -> Ptr[T];
fn ptr::typed[T](ptr: Ptr[Any], type: CType[T]) -> Ptr[T];

pub __tls::_cif_cache: _ = nil

tag Union;
tag Struct;

fn next!(t) {
    while peek().type == 'comment' { next() }
    if peek().type != t {
        fail("expected `{t}` but found: {peek()}")
    }
    next()
}

pub fn getCif(rt, *aTypes, nFixed: ?Int) {
    let cifs = _cif_cache ?? (_cif_cache = %{})
    let signature = (rt, aTypes, nFixed)
    match cifs[signature] {
        $cif => cif,
        _    => cifs[signature] = c.cif(rt, *aTypes, nFixed=nFixed)
    }
}

pub fn wrap(lib, name: String, rType: _ = nil, *aTypes: _, func-ptr?: Bool = false) -> _ {
    if not let $fp = c.dlsym(name, lib) {

        throw Err("Failed to load symbol '{name}'")
    }

    if func-ptr? {
        fp = ptr::typed(fp, c.ptr)
    }

    aTypes.map!(t -> type(t) == ptr::null ? t : t.ctype())

    if type(rType) != ptr::null {
        let interface = getCif(rType.ctype(), *aTypes)
        let argStorage = [c.new(t) for t in aTypes]

        return fn func(*args, out = rType()) {
            for arg, i in args {
                c.store(aTypes[i], argStorage[i], arg)
            }

            let fp = func-ptr? ? c::load(c.ptr, fp) : fp

            c.call(interface, fp, *argStorage, out: out.get())

            return out
        }
    } else {
        let interface = getCif(rType, *aTypes)
        let argStorage = [c.new(t) for t in aTypes]

        return fn func(*args) {
            for arg, i in args {
                c.store(aTypes[i], argStorage[i], arg)
            }

            c.call(interface, fp, *argStorage)
        }
    }
}

pub fn array[T](type: CType[T], xs: Iterable[T, Int]) {
    let buffer = typed(c.alloc(c.size(type) * #xs), type)

    for x, i in xs {
        buffer[i] = x
    }

    return buffer
}

pub fn ffi-type(t0: _) -> _ {
    match t0 {
        c::u8, c::u16, c::u32, c::u64,
        c::i8, c::i16, c::i32, c::i64,
        c::int, c::uint, c::long, c::ulong => $$[ Int $$],

        c::float, c::double => $$[ Float $$],

        _ => nil
    }
}

pub fn wrapVar[a](lib, name, nFixed, rType, *aTypes) -> _ {
    if not let $fp = c.dlsym(name, lib) {
        throw Err("Failed to load symbol '{name}'")
    }

    let argStorage = [c.new(t) for t in aTypes]

    return fn (*args: _) -> _ {
        let aTypes = aTypes.clone()
        let argStorage = argStorage.clone()

        for i in nFixed..#args {
            let (t, x) = args[i]
            argStorage.push(c.new(t))
            aTypes.push(t)
            args[i] = x
        }

        for arg, i in args {
            c.store(aTypes[i], argStorage[i], arg)
        }

        let interface = getCif(rType, *aTypes, nFixed: nFixed)

        let y = c.call(interface, fp, *argStorage)

        for i in nFixed..#args {
            c.free(argStorage[i])
        }

        return y
    }
}

pub fn iter(type, p, n) {
    let size = c.size(type)
    for i in ..n {
        yield c.load(type, p + i*size)
    }
}

pub memcpy = wrap(nil, 'memcpy', c.ptr, c.ptr, c.ptr, c.u64)
pub strlen = wrap(nil, 'strlen', c.u64, c.ptr)
pub memcmp = wrap(nil, 'memcmp', c.int, c.ptr, c.ptr, c.u64)
pub strcmp = wrap(nil, 'strcmp', c.int, c.ptr, c.ptr)
pub memset = wrap(nil, 'memset', c.void, c.ptr, c.int, c.u64)
pub strcpy = wrap(nil, 'strcpy', c.ptr, c.ptr, c.ptr)

fn _syscall(nr: Int, *args: Any) -> Int { -1 }
pub syscall: (typeof _syscall) = wrapVar(nil, 'syscall', 1, c.long, c.long)

fn nexttype(array-to-ptr? = true, has-name?: ?Bool = nil) {
    let parts = []

    let ignore = "
        int        union   atomic    restrict
        const      struct  _Atomic   volatile
        signed     auto    noreturn  _Noreturn
    ".words()

    let allow-name? = has-name? != false
    let need-name? = has-name? == true

    while match (peek().type, peek(1).type) {
        (')', _),
        (_, '('),
        (';', _) => { break },

        (_, '.')       => {
            let e = expr(1)

            // Allow stuff like f(c.int error_code) by just ignoring the identifier
            return e, if allow-name? && peek().type == 'id' { next().id }
        },

        ('const', _)   => { next()                  },
        ('comment', _) => { next()                  },
        ('id', _)      => { parts.push(next().id)   },
        ('*',  _),
        ('**', _)      => { next(); parts.push('*') }
    }

    let have-int? = 'int' in parts

    parts.filter!(\_ not in ignore)

    let type-name = (need-name? ? parts[;-1] : parts).sort(:desc).unwords()

    let t = match type-name {
        /\benum\b/ => c.int,

        'void' => c.void,

        'char'    => c.char,
        'short'   => c.short,
        'int', '' => c.int,
        'long'    => c.long,

        'unsigned char'  => c.uchar,
        'unsigned short' => c.ushort,
        'unsigned'       => c.uint,
        'unsigned int'   => c.uint,
        'unsigned long'  => c.ulong,

        'size_t',
        'uintmax_t',
        'uintptr_t',
        'unsigned long long' => c.u64,

        'ssize_t',
        'intmax_t',
        'intptr_t',
        'long long',
        'ptrdiff_t' => c.i64,

        'int8_t'  => c.i8,
        'int16_t' => c.i16,
        'int32_t' => c.i32,
        'int64_t' => c.i64,

        'uint8_t'  => c.u8,
        'uint16_t' => c.u16,
        'uint32_t' => c.u32,
        'uint64_t' => c.u64,

        'float'  => c.float,
        'double' => c.double,

        'bool' or '_Bool' => c.u8,

        _ => have-int? ? c.int : ty.Id({name: parts[0]})
    }

    let t = match t {
        ty.Id(_) as t => t
        _             => ty.Value(t)
    }

    if peek().type == '*' || peek().type == '**' {
        // Just kidding it's actually a pointer
        t = ty.Value(c.ptr)
        next()
    }

    if array-to-ptr? && peek().type == '[' {
        // Just kidding it's actually a pointer :^)
        t = ty.Value(c.ptr)
        next()
        while next().type != ']' {}
    }

    if '*' in parts {
        t = ty.Value(c.ptr)
    }

    return t, parts(-1).or-else(nil)
}

fn nextproto() {
        // (
        next()

        let ps = []
        while peek().type != ')' {
            ps.push(nexttype())
            while peek().type == ',' || peek().type == 'comment' {
                break if next().type == ','
            }
        }

        // )
        next()

        return ps
}

use LexState = {
    source: String,
    position: {
        line: Int,
        col: Int,
        byte: Int
    }
}

fn lspan(s1: LexState, s2: LexState = lex.state()) {
    let b1 = s1.position.byte
    let b2 = s2.position.byte
    s1.source.bsplice(b1, b2)
}

fn lstep(s1) {
    let s2 = lex.state()
    return (s2, lspan(s1, s2))
}

fn fun() {
    let public = peek().type == 'pub'
    if public { next() }

    let (lib, prefix) = match (peek().type, peek(1)) {
        ('fn', _) => (ty.Nil, ''),
        ('id', {type: 'fn', *}) => (expr(99), ''),
        ('id', {str, *}) => (expr(99), next().str),
        _ => (expr(99), '')
    }

    // function
    next!('fn')

    function mkfdef(name, rt: AST, ps: [AST], proto-string: ?String, doc-string: ?String) {
        let args = [
            ty.Arg(arg: lib),
            ty.Arg(arg: ty.String(prefix + name)),
            ty.Arg(arg: rt),
            *(ty.Arg(arg: p) for (p: AST) in ps)
        ]
        ty.Let(
            ty.Id(name: name, constraint: ty.Any),
            ty.Call(
                func: ty.Value(set-doc),
                args: [
                    ty.Arg(arg: ty.Call(func: ty.Value(wrap), args: args)),
                    ty.Arg(name: 'name', arg: ty.String(name)),
                    ty.Arg(name: 'proto', arg: ty.String(proto-string)) if proto-string,
                    ty.Arg(name: 'doc', arg: ty.String(doc-string)) if doc-string,
                ]
            ),
            public: public
        )
    }

    if peek().type == 'id' {
        let name = next().id

        let ps = nextproto()

        // ->
        next!('->')

        let rt: AST = expr(0)

        return mkfdef(name, rt, ps)
    } else {
        // {
        next!('{')

        let funs = []

        while peek().type != '}' {
            let doc = nil

            while peek().type == 'comment' {
                doc = "{doc ?? ''}{next().comment}"
            }

            let st = lex.state()
            let rt: AST = nexttype(has-name?=false)
            let rt-string = lspan(st)

            let name = next().id

            let st = lex.state()
            let ps = nextproto()
            let proto-string = lspan(st)
            if peek().type == ';' { next() }

            let proto-string = "({proto-string.strip().comb(/^\(|\)$/)})"
            funs.push(mkfdef(name, rt, ps, "{proto-string} -> {rt-string.strip()}", doc))
        }

        // }
        next()

        return ty.Multi(funs)
    }
}

/*
 * C! struct Foo {
 *      c.int a;
 *      c.ptr p;
 *      c.u8 data[10];
 *
 * }
 */
fn strct() {
    let peek_ = peek
    let next_ = next

    let next = function () {
        while peek_().type == 'comment' {
            next_()
        }
        next_()
    }

    let peek = function (i=0) {
        let j = 0

        for (;;) {
            while peek_(j).type == 'comment' { j += 1 }
            if i == 0 { return peek_(j) }
            i -= 1
            j += 1
        }
    }

    // struct
    next!('id')

    let structName = next().id

    next!('{')

    let members: [_] = []

    while peek().type != '}' {
        let get-count = fn () -> AST {
            if peek().type == '[' {
                next()
                let n = expr(0)
                next!(']')
                n
            }
        }

        fn get-decl() {
            let t, name = nexttype(array-to-ptr?=false, has-name?=true)
            let names = [(name, get-count())]

            while peek().type == ',' {
                next()
                names.push((next().id, get-count()))
            }

            next!(';')

            [{t, name, count} for (name, count) in names]
        }

        if peek().?id == 'union' {
            let types = []
            let decls: [_] = []
            next() // union
            next!('{')
            while peek().type != '}' {
                if peek().?id == 'struct' {
                    next() // struct
                    next!('{')
                    let inner = []

                    while peek().type != '}' {
                        inner += get-decl()
                    }

                    next!('}')

                    if (peek().type, peek(1).?type) == ('id', ';') {
                        let pre = next().id
                        inner.map!(field -> {*field, name: "{pre}_{field.name}"})
                    }

                    next!(';')

                    decls.push(Struct(inner))
                } else {
                    let decl = get-decl()
                    if #decl != 1 {
                        fail("avoid doing this: {decl}")
                    }
                    decls.push(decl[0])
                }
            }

            next!('}')
            next!(';')

            let type-alternatives: _ = ty.Array(
                decls.map(fn (x: _) -> _ match x {
                    Struct((inner: _)) => do {
                        let ts = inner.map(fn (decl: _) ty.Arg(arg: decl.t))
                        ty.Call(func: ty.Value(c.struct), args: ts)
                    },

                    decl: _ => decl.t
                }).map(t -> ty.ArrayItem(item: t))
            )
            
            let type = $$[ $$type-alternatives.max-by($${c.size}) $$]

            members.push(Union(type, decls))
        } else {
            members += get-decl()
        }
    }

    next!('}')

    let ctype = ty.Id(name: "{structName}_C")

    let member-names = members.map(match {
        Union(_, decls) => decls.map(match {
            Struct(inner) => inner.map(&.name),
            decl          => decl.name,
        }),
        decl              => decl.name
    }).flat()

    let init-params = [
        ty.Param({name: name, default: ty.Nil, constraint: ty.Any})
        for name in member-names
    ]

    let init = ty.Func(
        name: 'init',
        params: [ty.Param(name: '<p>', default: ty.Nil, constraint: ty.Any), *init-params],
        body: ty.If(
            [$$[`<p>` != nil$$]],
            $$[ self.`<p>` = `<p>` $$],
            ty.Multi([
                $$[ self.`<p>` = c.new($$ctype) $$],
                *[
                    $$[ $$(ty.MemberAccess($$[ self $$], name)) = $$(ty.Id({name})) $$]
                    for name in member-names
                ]
            ])
        )
    )

    let get = ty.Func(
        name: 'get',
        params: [],
        body: ty.Call(
            func: ty.Value(typed),
            args: [
                ty.Arg(arg: ty.MemberAccess(ty.Id(name: 'self'), '<p>')),
                ty.Arg(arg: ctype)
            ]
        )
    )

    let __ptr__ = ty.Func(
        name: '__ptr__',
        params: [],
        body: ty.Call(
            func: ty.Value(typed),
            args: [
                ty.Arg(arg: ty.MemberAccess(ty.Id(name: 'self'), '<p>')),
                ty.Arg(arg: ctype)
            ]
        )
    )

    let structArgs = []
    let methods: Array[ty.Func[_Func]] = []
    let getters: Array[ty.Func[_Func]] = []
    let setters: Array[ty.Func[_Func]] = []

    function add-member(i: ?Int, name, t, count, off: Int | AST = 0) {
        if i == nil {
            i = #structArgs

            let mkstruct = (t, n) -> c.struct(*[t for ..n])

            if count != nil {
                structArgs.push(ty.Arg(arg: $$[ $${mkstruct}($$t, $$count) $$]))
            } else {
                let t_ = ty.Cond(
                    $$[ $${type}($$t) == Class $$],
                    $$[ $$t.ctype() $$],
                    t
                )
                structArgs.push(ty.Arg(arg: t_))
            }
        }

        if count != nil {
            methods.push(
                ty.Func(
                    name: name,
                    params: [ty.Gather('args')],
                    body: $$[
                        if #args > 0 {
                            let [x] = args
                            let p = x.ptr()
                            $${memcpy}($${c.pmember}($$ctype, self.`<p>`, $${i}), p ?? x, $${c.size}($$t) * $$count)
                        } else {
                            $${typed}($${c.pmember}($$ctype, self.`<p>`, $${i}), $$t)
                        }
                    $$]
                )
            )
        } else {
            let pmem = (off == 0) ? $$[
                $${c.pmember}($$ctype, self.`<p>`, $${i})
            $$] : $$[
                $${ptr::typed}($${c.pmember}($$ctype, self.`<p>`, $${i}), $${c.u8}) + $$off
            $$]

            let mem = (off == 0) ? $$[
                $${c.member}($$ctype, self.`<p>`, $${i})
            $$] : $$[
                $${c.load}($$t, $${ptr::typed}($${c.pmember}($$ctype, self.`<p>`, $${i}), $${c.u8}) + $$off)
            $$]

            let store = (off == 0) ? $$[
                $${c.member}($$ctype, self.`<p>`, $${i}, `<member>`)
            $$] : $$[
                $${c.store}($$t, $${ptr::typed}($${c.pmember}($$ctype, self.`<p>`, $${i}), $${c.u8}) + $$off, `<member>`)
            $$]

            let getter-body = $$[
                ($${type}($$t) == Class) ? $$t($$pmem) : $$mem
            $$]

            let setter-body = $$[
                ($${type}($$t) == Class) ? die('not implemented') : $$store
            $$]

            getters.push(
                ty.Func(
                    name: name,
                    params: [],
                    body: getter-body,
                    rt: try { ffi-type(ty.eval(t, ty.scope())) } catch _ { nil },
                    decorators: []
                )
            )

            setters.push(
                ty.Func(
                    name: name,
                    params: [ty.Param(name: '<member>')],
                    body: setter-body,
                    rt: nil,
                    decorators: []
                )
            )
        }
    }

    for member, i in members {
        match member {
            Union(ut, decls) => do {
                structArgs.push(ty.Arg(arg: ut))
                for match decls {
                    Struct(inner) => do {
                        let off = $$[ 0 $$]
                        for {name, t, count} in inner {
                            add-member(i, name, t, count, off = off)
                            off = ty.Add(off, $$[ $${c.size}($$t) $$])
                        }
                    },

                    {name, t, count} => {
                        add-member(i, name, t, count)
                    }
                }
            },

            {name, t, count} => do {
                add-member(nil, name, t, count)
            }
        }
    }

    // FIXME
    // print(structName)
    // for arg in structArgs { match arg { ty.Arg({arg: ty.Cond(_, _, t), *}) => print(t), _ => print(arg) } }

    let show = ty.Func(
        name: '__str__',
        params: [],
        body: ty.Call(
            func: ty.Value(str),
            args: [
                ty.Arg(
                    arg: ty.Record([
                        ty.RecordEntry(
                            name: (#e).name,
                            item: ty.MemberAccess(
                                ty.Id(name: 'self'),
                                (#e).name
                            )
                        )
                        for e in getters
                    ])
                )
            ]
        )
    )

    let size = ty.Func(
        name: '#',
        params: [],
        body: ty.Call(func: ty.Value(c.size), args: [ty.Arg(arg: ctype)])
    )

    let ctypeFunction = ty.Func(
        name: 'ctype',
        params: [],
        body: ctype
    )

    ty.Multi([
        ty.Let(
            ctype,
            ty.Cast(
                ty.Call(
                    func: ty.Value(c.struct),
                    args: structArgs
                ),
                $$[ c::CType[$$(ty.Id({name: structName}))] $$]
            )
        ),
        ty.Class(
            name: structName,
            fields:  [ty.Id({name: '<p>', constraint: ty.Any})],
            methods: [get, __ptr__, init, size, show, *methods],
            getters: getters,
            setters: setters,
            static-methods: [ctypeFunction, size]
        )
    ])
}

fn clos() {
    // closure
    next()

    let name = if peek().type == 'id' {
        next().id
    }

    next!('(')

    let params = []

    while peek().type != ')' {
        let name = next().id
        // :
        next()
        let t = expr(0)
        params.push({name, t})
        if peek().type == ',' {
            next()
        }
    }

    next!(')')

    let rt = (peek().type == '->')
           ? do { next(); expr(0) }
           : ty.Value(c.void)

    let body = stmt(0)

    let args = [rt, *params.map(&.t)]

    let f = ty.Func(
        name: name,
        params: [ty.Param(name: name) for {name, *} in params],
        body: body
    )

    let call = ty.Call(
        func: ty.Value(c.closure),
        args: [
            *(ty.Arg(arg: t) for t in args),
            ty.Arg(arg: f)
        ]
    )
    
    match name {
        nil => call,
        _   => ty.Let(ty.Id({name}), call)
    }
}

pub macro C! {
    if 'fn' in [peek(it).type for ..8] {
        fun()
    } else if peek().?id == 'struct' {
        strct()
    } else if peek().?id == 'closure' {
        clos()
    } else {
        fail('expected function or struct')
    }
}

pub macro cfun! {
    let public = peek().type == 'pub'
    if public { next() }

    let lib = expr(0)
    let rt = expr(0)

    let name = next().id

    // (
    next()

    let args = [ty.Arg(arg: lib), ty.Arg(arg: ty.String(name)), ty.Arg(arg: rt)]

    while peek().type != ')' {
        args.push(ty.Arg(arg: expr(0)))
        if peek().type == ',' {
            next()
        }
    }

    // )
    next()

    ty.Let(ty.Id(name: name), ty.Call(func: ty.Value(wrap), args: args), public: public)
}

pub macro struct! {
    let structName = next().id

    try let ty.Record(struct) = expr(99)

    let init = ty.Func(
        name: 'init',
        params: [ty.Param(name: '<p>', default: ty.Nil)],
        body: ty.Assign(
            ty.MemberAccess(ty.Id(name: 'self'), '<p>'),
            ty.Wtf(
                ty.Id(name: '<p>'),
                ty.Call(
                    func: ty.Value(c.new),
                    args: [ty.Arg(arg: ty.Id(name: "{structName}_C"))]
                )
            )
        )
    )

    let get = ty.Func(
        name: 'get',
        params: [],
        body: ty.Call(
            func: ty.Value(typed),
            args: [
                ty.Arg(arg: ty.MemberAccess(ty.Id(name: 'self'), '<p>')),
                ty.Arg(arg: ty.Id(name: "{structName}_C"))
            ]
        )
    )

    let structArgs = []
    let methods = []

    for entry, i in struct {
        let ty.RecordEntry({name, item}) = entry
        match item {
            ty.Array([ty.ArrayItem({item: t, *}), ty.ArrayItem({item: ty.eval ~> n, *})]) => {
                structArgs.push(ty.Arg(arg: ty.Call(func: ty.Value(c.struct), args: [ty.Arg(arg: t) for _ in ..n])))
                methods.push(
                    ty.Func(
                        name: name,
                        params: [ty.Gather('args')],
                        body: ty.If(
                            [ty.GT(ty.Count(ty.Id(name: 'args')), ty.Int(0))],
                            ty.Block([
                                ty.Let(ty.Array([ty.ArrayItem(item: ty.Id(name: 'x'))]), ty.Id(name: 'args')),
                                ty.Let(
                                    ty.Id(name: 'p'),
                                    ty.MethodCall(
                                        object: ty.Id(name: 'x'),
                                        method: 'ptr',
                                        args: []
                                    )
                                ),
                                ty.Call(
                                    func: ty.Id(name: 'memcpy', module: 'c'),
                                    args: [
                                        ty.Arg(
                                            arg: ty.Call(
                                                func: ty.Value(c.pmember),
                                                args: [
                                                    ty.Arg(arg: ty.Id(name: "{structName}_C")),
                                                    ty.Arg(arg: ty.MemberAccess(ty.Id(name: 'self'), '<p>')),
                                                    ty.Arg(arg: ty.Int(i)),
                                                ]
                                            )
                                        ),
                                        ty.Arg(arg: ty.Wtf(ty.Id(name: 'p'), ty.Id(name: 'x'))),
                                        ty.Arg(arg: ty.Mul(ty.Call(func: ty.Value(c.size), args: [ty.Arg(arg: t)]), ty.Value(n)))
                                    ]
                                )
                            ]),
                            ty.Call(
                                func: ty.Value(typed),
                                args: [
                                    ty.Arg(arg: ty.Call(
                                        func: ty.Value(c.pmember),
                                        args: [
                                            ty.Arg(arg: ty.Id(name: "{structName}_C")),
                                            ty.Arg(arg: ty.MemberAccess(ty.Id(name: 'self'), '<p>')),
                                            ty.Arg(arg: ty.Int(i)),
                                        ]
                                    )),
                                    ty.Arg(arg: t)
                                ]
                            )
                        )
                    )
                )
            },
            _ => {
                structArgs.push(ty.Arg(arg: $$[ do { let t = $$item; ($${type}(t) == ptr::null) ? t : t.ctype() } $$]))
                methods.push(
                    ty.Func(
                        name: name,
                        params: [ty.Gather('args')],
                        body: ty.Call(
                            func: ty.Value(c.member),
                            args: [
                                ty.Arg(arg: ty.Id(name: "{structName}_C")),
                                ty.Arg(arg: ty.MemberAccess(ty.Id(name: 'self'), '<p>')),
                                ty.Arg(arg: ty.Int(i)),
                                ty.Arg(arg: ty.Spread(ty.Id(name: 'args')))
                            ]
                        )
                    )
                )
            }
        }
    }

    let show = ty.Func(
        name: '__str__',
        params: [],
        body: ty.Call(
            func: ty.Value(str),
            args: [
                ty.Arg(
                    arg: ty.Record([
                        ty.RecordEntry(
                            name: e.name,
                            item: ty.MethodCall(
                                object: ty.Id(name: 'self'),
                                method: e.name,
                                args: []
                            )
                        )
                        for e in struct
                    ])
                )
            ]
        )
    )

    let size = ty.Func(
        name: '#',
        params: [],
        body: ty.Call(func: ty.Value(c.size), args: [ty.Arg(arg: ty.Id(name: "{structName}_C"))])
    )

    ty.Multi([
        ty.Let(
            ty.Id(name: "{structName}_C"),
            ty.Call(
                func: ty.Value(c.struct),
                args: structArgs
            )
        ),
        ty.Class(
            name: structName,
            methods: [get, init, size, show, *methods]
        )
    ])
}

pub macro closure! {
    if not let ty.Func(f) = expr(0) {
        fail('expected function expression')
    }

    if not let $rt = f.?rt {
        fail('need return type')
    }

    let args: [AST] = [rt]

    for ty.Param(p), i in f.params {
        args.push(p.constraint)
        p.constraint = nil
    }

    ty.Let(
        ty.Id(name: f.name),
        ty.Call(
            func: ty.Value(c.closure),
            args: [
                *(ty.Arg(arg: t) for t in args),
                ty.Arg(arg: ty.Func({*f, rt: nil}))
            ]
        )
    )
}

pub fn cstr(s: String) -> Ptr[Int] {
    let p = c.alloc(s.size() + 1)

    memcpy(p, s, s.size())
    c.store(c.char, p + s.size(), 0)

    return p
}

pub fn open(
    lib: String | [String],
    versions: ?[String | Int]
) -> Ptr[Any] | nil {
    fn try-open(lib: String) {
        for version in versions ?? [nil] {
            let name = match version {
#|if __apple__
                $version => "{lib}.{version}.dylib",
                _        => "{lib}.dylib"
#|else if __windows__
                $version => "{lib}-{version}.dll",
                _        => "{lib}.dll"
#|else
                $version => "{lib}.so.{version}",
                _        => "{lib}.so"
#|]
            }
            if let $handle = c.dlopen(name) {
                return handle
            }
        }
    }

    let libs = (lib :: String) ? [lib] : lib

    for lib in libs {
#|if !__windows__
        if ('/' not in lib) && !lib.starts?('lib') {
            lib = "lib{lib}"
        }
#|]
        if let $handle = try-open(lib) {
            return handle
        }
#|if __apple__
        if !lib.starts?('/') {
            let dirs = [
                '/usr/lib',
                '/usr/local/lib',
                '/opt/homebrew/lib',
                '/opt/local/lib'
            ]
            for dir in dirs {
                if let $handle = try-open("{dir}/{lib}") {
                    return handle
                }
            }
        }
#|]
    }

    return nil
}
