import ty
import ty.lex as lex
import ty.parse as parse
import ty.token as tok
import chalk (..)
import json
import ffi as c (C!)

#|if !__windows__
import os (ioctl)
import ioctls (..)
#|else
import os
#|]

let table = %{}

macro doc! {
    let (parse.show ~> name, func) = parse.stmt(0, :raw)
    let (parse.show ~> proto, _) = parse.stmt(99, :raw)

    if tok.peek().type == '->' {
        tok.next()
        let (parse.show ~> rt, _) = parse.stmt(0, :raw)
        proto = "{proto} -> {rt}"
    }

    let help = tok.next().str

    $$[
        table[$$(func)] = (
            $$(ty.String(name)),
            $$(ty.String(proto)),
            $$(ty.String(help))
        )
    $$]
}

doc! Array.sort
(by: ?Function, cmp: ?Function, desc: ?Bool)
'''
    Return a copy of the array with the elements sorted
    in ascending order.

    by:
        Sort by(xi) <=> by(xj) instead of xi <=> xj

    cmp:
        Sort by cmp(xi, xj) instead of xi <=> xj

    desc:
        When true, reverse the usual sorting order.
'''

doc! print
(*args, sep: String = ', ', end: String = '\n', flush: Bool = false)
'''
    Print each argument to stdout.
'''

doc! eprint
(*args, sep: String = ', ', end: String = '\n', flush: Bool = false)
'''
    Print each argument to stderr.
'''

doc! os::getaddrinfo
(
    hostname: String,
    service: String | Int,
    family: Int,
    socktype: Int,
    protocol: Int,
    flags: ?Int
) -> Ok([{family: Int, type: Int, protocol: Int, address: Blob, canonname: ?String}]) | Err(Int)
'''
    See getaddrinfo(3).

    Example
    -------

        let addr = match getaddrinfo('www.google.com', 80, AF_INET, SOCK_STREAM, 0) {
            Ok([a, *]) => a,
            Err(e) => {
                eprint("getaddrinfo(): {gai_strerror(e)}")
                exit(1)
            }
        }
'''

doc! os::sendto
(socket: Int, data: Blob | String, flags: Int, address: Blob) -> Int
'''
    See sendto(2).

    Example
    -------


        let sock = socket(AF_INET, SOCK_DGRAM, 0)

        let Ok([&.address ~> addr]) = getaddrinfo(...)

        if sendto(sock, "Hello!", 0, addr) < 0 {
            eprint(...)
            return -1
        }
'''

doc! os::recvfrom
[
    (socket: Int, buffer: Blob, n: Int, flags: Int) -> Int,
    (socket: Int, n: Int, flags: Int) -> Int
]
'''
    See recvfrom(2).

    Example
    -------

    let b = Blob()

    while recvfrom(sock, b, 4096, 0) > 0 {
        print("Got a message: {b.str()}")
        b.clear()
    }
'''

doc! os::exec
(argv: [String]) -> Int
'''
    See execvp(2).

    Example
    -------

    if os.exec(['nc', '-u', '-p3000']) != 0 {
        eprint("exec(): {errno.str()}")
        os.exit(1)
    }
'''

pub function help(x) {
    let x = docRef(x)

    let doc = function (x) {
        return table[x] ?? doc(x)
    }

    let helpString = Blob()
    let p = function (*args, sep=', ', end='\n') {
        helpString.push(args.join(sep) ?? '');
        helpString.push(end);
    }

    function pdoc(s, indent) {
        let lines = s.lines().dropWhile!(/^\s*$/)

        // Remove trailing empty lines at the end.
        while #lines > 0 && lines[-1].match?(/^\s*$/) {
            lines.pop()
        }

        // Find the leading whitespace length common to all lines
        let leading = lines.map(&match!(/^\s*/) |> &len).min()

        for line in lines.map!(&slice(leading)) {
            p(''.padLeft(indent), line, sep: '')
        }
    }

    match doc(x) {
        (name, doc, [*ms]) => {
            p("class {name}:")
            if doc != nil {
                p()
                pdoc(doc, 4)
            }
            for (name, proto, doc) in ms {
                p()
                if doc != nil {
                    p("    {name.comb(/^\w+\./)}{proto}:")
                    p()
                    pdoc(doc, 6)
                } else {
                    p("    {name.comb(/^\w+\./)}{proto}")
                }
            }
            p()
        },

        (name, proto, doc) => {
            if doc != nil {
                p("{name}{proto}:")
                p()
                pdoc(doc, 4)
                p()
            } else {
                p("{name}{proto}")
            }
        },

        nil => {
            p("No help for {x}.")
        }
    }

    let p = os.spawn(['less', '-FRX'], shareStderr: true, shareStdout: true)
    os.write(p.stdin, helpString.str!())
    os.close(p.stdin)
    os.waitpid(p.pid)
}

class TooWideError {}
class TooMuchError {}

let defaultColors = {
    dict:  chalk['#e78a4e bold'],
    array: chalk['#e78a4e bold'],
    str:   chalk['#a9b665'],
    quote: chalk['#a9b665 bold'],
    int:   chalk['#d3869b'],
    float: chalk['#d3869b'],
    null:  chalk['#89b482'],
    t:     chalk['#d8a657'],
    c:     chalk['#d8a657'],
    field: chalk['#7daea3'],
    bool:  chalk['#d3869b'],
    more:  chalk['#928374']
}

pub function escapeString(s) {
    s.sub(/[\x00-\x1F\x7F-\xFF"\\]/, match {
        '"'  => '\\"',
        '\\' => '\\\\',
        '\b' => '\\b',
        '\f' => '\\f',
        '\n' => '\\n',
        '\r' => '\\r',
        '\t' => '\\t',
        c    => "\\x{c.byte(0):02x}"
    })
}

class Printer {
    init(width=96, indent=2, colors=defaultColors, color=true) {
        @width = width
        @indent = indent
        @out = Blob()
        @col = 0
        @depth = 0
        @colors = colors
        @color = color
        @visiting = []
    }

    save() {
        (@col, @depth, #@visiting, #@out)
    }

    restore(state) {
        let (col, depth, num-visiting, i) = state
        @out.splice(i)
        @col = col
        @depth = depth
        @visiting.take!(num-visiting)
    }

    write(s, pen=id, force=false) {
        @col += #s
        if !force && @col > @width { throw TooWideError() }
        @out.push(str(@color ? pen(s) : s))
    }

    nl(n=0) {
        @depth += n
        @out.push('\n')
        @col = 0
        self.write(' '.repeat(@indent * @depth))
    }

    go(x, canPush: ?Bool = false, force: ?Bool = false) {
        let id-of-x = ident(x)

        if id-of-x in @visiting {
            self.write('...', @colors.more, force)
            return
        }

        @visiting.push(id-of-x)

        let state = self.save()

        function printList(xs, open, close, color) {
            try {
                self.write(open, color, false)
                for (f, x) in ((self.go, x) for x in xs).intersperse((self.write, ', ')) {
                    f(x)
                }
                self.write(close, color, false)
            } catch (e: TooWideError) and canPush {
                self.restore(state)
                self.write(open, color, force)
                self.nl(1)
                for x, i in xs {
                    if i > 0 { self.write(',', id, force); self.nl() }
                    self.go(x, true, force)
                }
                self.nl(-1)
                self.write(close, color, force)
            }
        }

        function printMap(m, open, close, eq, field-style=@colors.field, delim-style=@colors.dict) {
            let write-key = match open {
                '%{'  => self.go,
                _     => self.write@($1, field-style, $3),

            }

            try {
                self.write(open, delim-style, force)
                for match m.intersperse(', ') {
                    (k, v) => {
                        write-key(k, false, false)
                        self.write(eq, delim-style, false)
                        self.go(v, false, false)
                    },

                    s => {
                        self.write(s, id, false)
                    }
                }
                self.write(close, delim-style, false)
            } catch (e: TooWideError) and canPush {
                self.restore(state)
                self.write(open, delim-style, force)
                self.nl(1)
                for (k, v), i in m {
                    if i > 0 { self.write(',', id, force); self.nl() }
                    write-key(k, true, force)
                    self.write(eq, delim-style, force)
                    self.go(v, true, force)
                }
                self.nl(-1)
                self.write(close, delim-style, force)
            }
        }

        match x {
            xs :: Array => {
                printList(xs, '[', ']', @colors.array)
            },

            d :: Dict => {
                printMap(d.list(), '%{', '}', ': ')
            },

            %t(x) => {
                self.write("{t}(", @colors.t, force)
                self.go(x, canPush, force)
                self.write(")", @colors.t, force)
            },

            t :: Tuple => {
                let items = members(t, list: true)

                if items.map(&0) :: Array[Int] {
                    printList(items.map(&1), '(', ')', @colors.array)
                } else {
                    printMap(items, '{', '}', ': ')
                }
            },

            nil => {
                self.write('nil', @colors.null, force)
            },

            _ :: String => {
                let s = escapeString(x)
                self.write('"', @colors.quote, force)
                self.write(s, @colors.str, force)
                self.write('"', @colors.quote, force)
            },

            _ :: Bool => {
                self.write("{x}", @colors.bool, force)
            },

            _ :: Int => {
                self.write("{x}", @colors.int, force)
            },

            _ :: Float => {
                self.write("{x}", @colors.float, force)
            },

            members@(_, list=true) ~> $ms => {
                printMap(ms, "{type(x).__name__}(", ')', '=', delim-style=@colors.c)
            },

            _ => {
                self.write(show(x), id, force)
            }
        }

        @visiting.pop()
    }

    print(x) {
        self.restore((0, 0, 0, 0))
        self.go(x, true, true)
        return @out.str()
    }
}

C! struct WinSize {
    c.short lines;
    c.short cols;
    c.short xpix;
    c.short ypix;
}

let winSize = WinSize()

pub function prettyPrint(x, %kwargs) {
#|if !__windows__
    c.store(c.u64, winSize.get(), 0xFFFFFFFFFFFFFFFF)
    if ioctl(1, TIOCGWINSZ, (c.ptr, winSize.get())) == -1 {
        winSize.cols = 108
    }
#|else
    winSize.cols = 78
#|]

    kwargs['width'] ?= max(min(winSize.cols, 108), 36)

    let WithKwargs = Printer@(**kwargs)

    if let $home = getenv('HOME') and let $s = slurp("{home}/.ty/colors.json") {
        print(Printer(colors=tuple(**json.parse(s))).print(x))
    } else {
        print(Printer(**kwargs).print(x))
    }
}

pub function pretty(x, %kwargs) {
#|if !__windows__
    if ioctl(1, TIOCGWINSZ, (c.ptr, winSize.get())) == -1 {
        winSize.cols = 108
    }
#|else
    winSize.cols = 78
#|]

    kwargs['width'] ?= max(min(winSize.cols, 108), 36)

    let WithKwargs = Printer@(**kwargs)

    if let $home = getenv('HOME') and let $s = slurp("{home}/.ty/colors.json") {
        Printer(colors=tuple(**json.parse(s))).print(x)
    } else {
        Printer(**kwargs).print(x)
    }
}
