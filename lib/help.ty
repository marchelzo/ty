import ty
import ty.lex as lex
import ty.parse as parse
import ty.token as tok
import ty.types as types
import chalk (chalk, Text)
import json
import readln (readln, ListCompletions, CycleCompletions)
import ffi as c (C!)

#|if !__windows__
import os (ioctl)
import ioctls (..)
#|else
import os
#|]

let table: Dict[_, (String, String, String)] = %{}

macro doc! {
    let (parse.show ~> name, func) = parse.stmt(0, :raw)
    let (parse.show ~> proto, _) = parse.stmt(99, :raw)

    if tok.peek().type == '->' {
        tok.next()
        let (parse.show ~> rt, _) = parse.stmt(0, :raw)
        proto = "{proto} -> {rt}"
    }

    let help = tok.next().str

    $$[
        table[$$(func)] = (
            $$(ty.String(name)),
            $$(ty.String(proto)),
            $$(ty.String(help))
        )
    $$]
}

doc! Array.sort
(by: ?Function, cmp: ?Function, desc: ?Bool)
'''
    Return a copy of the array with the elements sorted
    in ascending order.

    by:
        Sort by(xi) <=> by(xj) instead of xi <=> xj

    cmp:
        Sort by cmp(xi, xj) instead of xi <=> xj

    desc:
        When true, reverse the usual sorting order.
'''

doc! print
(*args, sep: String = ', ', end: String = '\n', flush: Bool = false)
'''
    Print each argument to stdout.
'''

doc! eprint
(*args, sep: String = ', ', end: String = '\n', flush: Bool = false)
'''
    Print each argument to stderr.
'''

doc! os::getaddrinfo
(
    hostname: String,
    service: String | Int,
    family: Int,
    socktype: Int,
    protocol: Int,
    flags: ?Int
) -> Ok([{family: Int, type: Int, protocol: Int, address: Blob, canonname: ?String}]) | Err(Int)
'''
    See getaddrinfo(3).

    Example
    -------

        let addr = match getaddrinfo('www.google.com', 80, AF_INET, SOCK_STREAM, 0) {
            Ok([a, *]) => a,
            Err(e) => {
                eprint("getaddrinfo(): {gai_strerror(e)}")
                exit(1)
            }
        }
'''

doc! os::sendto
(socket: Int, data: Blob | String, flags: Int, address: Blob) -> Int
'''
    See sendto(2).

    Example
    -------


        let sock = socket(AF_INET, SOCK_DGRAM, 0)

        let Ok([&.address ~> addr]) = getaddrinfo(...)

        if sendto(sock, "Hello!", 0, addr) < 0 {
            eprint(...)
            return -1
        }
'''

doc! os::recvfrom
[
    (socket: Int, buffer: Blob, n: Int, flags: Int) -> Int,
    (socket: Int, n: Int, flags: Int) -> Int
]
'''
    See recvfrom(2).

    Example
    -------

    let b = Blob()

    while recvfrom(sock, b, 4096, 0) > 0 {
        print("Got a message: {b.str()}")
        b.clear()
    }
'''

doc! os::exec
(argv: [String]) -> Int
'''
    See execvp(2).

    Example
    -------

    if os.exec(['nc', '-u', '-p3000']) != 0 {
        eprint("exec(): {errno.str()}")
        os.exit(1)
    }
'''

pub function help(x) {
    let x = docRef(x)

    let doc = function (x: Any) {
        return table[x] ?? doc(x)
    }

    let helpString = Blob()
    let p = function (*args, sep=', ', end='\n') {
        helpString.push(args.join(sep) ?? '');
        helpString.push(end);
    }

    function pdoc(s, indent) {
        let lines = s.lines().dropWhile!(/^\s*$/)

        // Remove trailing empty lines at the end.
        while #lines > 0 && lines[-1].match?(/^\s*$/) {
            lines.pop()
        }

        // Find the leading whitespace length common to all lines
        let leading = lines.map(&match!(/^\s*/) |> &len).min()

        for line in lines.map!(&slice(leading)) {
            p(''.lpad(indent), line, sep: '')
        }
    }

    match doc(x) {
        (name, doc, [*ms]) => {
            p("class {name}:")
            if doc != nil {
                p()
                pdoc(doc, 4)
            }
            for (name, proto, doc) in ms {
                p()
                if doc != nil {
                    p("    {name.comb(/^\w+\./)}{proto}:")
                    p()
                    pdoc(doc, 6)
                } else {
                    p("    {name.comb(/^\w+\./)}{proto}")
                }
            }
            p()
        },

        (name, proto, doc) => {
            if doc != nil {
                p("{name}{proto}:")
                p()
                pdoc(doc, 4)
                p()
            } else {
                p("{name}{proto}")
            }
        },

        nil => {
            p("No help for {x}.")
        }
    }

    let p = os.spawn(['less', '-FRX'], stdin=os.SPAWN_PIPE)
    os.write(p.stdin, helpString.str!())
    os.close(p.stdin)
    os.waitpid(p.pid)
}

class TooWideError {}
class TooMuchError {}
tag Stop;

let defaultColors = {
    dict:  chalk['#e78a4e bold'],
    array: chalk['#e78a4e bold'],
    str:   chalk['#a9b665'],
    quote: chalk['#a9b665 bold'],
    int:   chalk['#d3869b'],
    float: chalk['#d3869b'],
    null:  chalk['#89b482'],
    t:     chalk['#d8a657'],
    c:     chalk['#d8a657'],
    field: chalk['#7daea3'],
    bool:  chalk['#d3869b'],
    more:  chalk['#928374']
}

pub function escapeString(s) {
    s.sub(/[\x00-\x1F\x7F-\xFF"\\]/, match {
        '"'  => '\\"',
        '\\' => '\\\\',
        '\b' => '\\b',
        '\f' => '\\f',
        '\n' => '\\n',
        '\r' => '\\r',
        '\t' => '\\t',
        c    => "\\x{c.byte(0):02x}"
    })
}

fn trunc(str, n) { str[;n].comb(/\x1b[[^m]+$/) }

class Printer {
    __width:    Int
    __indent:   Int
    __out:      Blob
    __col:      Int
    __depth:    Int
    __colors:   _
    __color:    Bool
    __visiting: Array[Any]
    __oneline:  Bool

    init(
        width:    Int  = 96,
        indent:   Int  = 2,
        colors:   Any  = defaultColors,
        color:    Bool = true,
        oneline:  Bool = false
    ) {
        __width    = width
        __indent   = indent
        __out      = Blob()
        __col      = 0
        __depth    = 0
        __colors   = colors
        __color    = color
        __visiting = []
        __oneline  = oneline
    }

    save() {
        (__col, __depth, #__visiting, #__out)
    }

    restore(state) {
        let (col, depth, num-visiting, i) = state
        __out.splice(i)
        __col = col
        __depth = depth
        __visiting.take!(num-visiting)
    }

    write(s: String, pen=id, force=false) {
        let want = #s
        let have = max(0, __width - __col)

        let off = __color ? "\x1b[0m" : ''

        fn put(x) {
            __out.push(str(__color ? pen(x) : x))
            __col += #x
        }

        match have {
            0 and __oneline   => throw Stop,
            _ and force       => put(s),
            n and (n >= want) => put(s),
            n and __oneline   => do { put(trunc(s, n)); __out.push(off) },
            _                 => throw TooWideError()
        }
    }

    nl(n=0) {
        __depth += n
        __out.push('\n')
        __col = 0
        write(' '.repeat(__indent * __depth))
    }

    go(x: _, canPush: ?Bool = false, force: ?Bool = false) {
        let id-of-x = ident(x)

        if id-of-x in __visiting {
            write('...', __colors.more, force)
            return
        }

        __visiting.push(id-of-x)

        let state = save()

        function printList(xs, open, close, color) {
            try {
                write(open, color, false)
                for (f, x) in ((go, x) for x in xs).intersperse((write, ', ')) {
                    f(x)
                }
                write(close, color, false)
            } catch (e: TooWideError) and canPush {
                restore(state)
                write(open, color, force)
                nl(1)
                for x, i in xs {
                    if i > 0 { write(',', id, force); nl() }
                    go(x, true, force)
                }
                nl(-1)
                write(close, color, force)
            }
        }

        function printMap(
            m: Array[(_, _)],
            open: String,
            close: String,
            eq: String,
            field-style=__colors.field,
            delim-style=__colors.dict
        ) {
            let write-key = match open {
                '%{' => go,
                _    => write@($1, field-style, $3)
            }

            try {
                write(open, delim-style, force)
                for match m.intersperse(', ') {
                    (k, v) => {
                        write-key(k, false, false)
                        write(eq, delim-style, false)
                        go(v, false, false)
                    },

                    s => {
                        write(s, id, false)
                    }
                }
                write(close, delim-style, false)
            } catch (e: TooWideError) and canPush {
                restore(state)
                write(open, delim-style, force)
                nl(1)
                for (k, v), i in m {
                    if i > 0 { write(',', id, force); nl() }
                    write-key(k, true, force)
                    write(eq, delim-style, force)
                    go(v, true, force)
                }
                nl(-1)
                write(close, delim-style, force)
            }
        }

        match x {
            xs :: Array => {
                printList(xs, '[', ']', __colors.array)
            },

            d :: Dict => {
                printMap(d.list(), '%{', '}', ': ')
            },

            %t(x) => {
                write("{t}(", __colors.t, force)
                go(x, canPush, force)
                write(")", __colors.t, force)
            },

            t :: Tuple => {
                let items = members(t, list: true)

                if items.map(&0) :: Array[Int] {
                    printList(items.map(&1), '(', ')', __colors.array)
                } else {
                    printMap(items, '{', '}', ': ')
                }
            },

            nil => {
                write('nil', __colors.null, force)
            },

            _ :: String => {
                let s = escapeString(x)
                write('"', __colors.quote, force)
                write(s, __colors.str, force)
                write('"', __colors.quote, force)
            },

            _ :: Bool => {
                write("{x}", __colors.bool, force)
            },

            _ :: Int => {
                write("{x}", __colors.int, force)
            },

            _ :: Float => {
                write("{x}", __colors.float, force)
            },

            members@(_, list=true) ~> $ms => {
                printMap(ms, "{type(x).__name__}(", ')', '=', delim-style=__colors.c)
            },

            _ => {
                write(show(x), id, force)
            }
        }

        __visiting.pop()
    }

    print(x: _) {
        try {
            restore((0, 0, 0, 0))
            go(x, true, true)
        } catch Stop { // Truncated
            __out.push('...')
        }
        __out.str()
    }
}

C! struct WinSize {
    c.short lines;
    c.short cols;
    c.short xpix;
    c.short ypix;
}

let __tls::winsz = nil

fn term-cols() {
    winsz = winsz ?? WinSize()
#|if !__windows__
    if ioctl(1, TIOCGWINSZ, (c.ptr, winsz)) == -1 {
        winsz.cols = 108
    }
#|else
    winsz.cols = 78
#|]
    winsz.cols
}

pub fn pretty(x, %kwargs) {
    //kwargs['width'] ?= max(min(term-cols(), 108), 36)
    kwargs['width'] ?= 32
    if let $home = getenv('HOME') and let $s = slurp("{home}/.ty/colors.json") {
        Printer(colors=tuple(**json.parse(s))).print(x)
    } else {
        Printer(**kwargs).print(x)
    }
}

pub fn prettyPrint(x, %kwargs: Any) {
    print(pretty(x, **kwargs))
}

chalk.fg0    = '#e1c78f'
chalk.fg1    = '#ddc7a1'
chalk.red    = '#ea6962'
chalk.aqua   = '#89b482'
chalk.orange = '#e78a4e'
chalk.yellow = '#d8a657'
chalk.green  = '#a9b665'
chalk.green2 = '#9dbd60'
chalk.blue   = '#7daea3'
chalk.blue2  = '#3193ce'
chalk.purple = '#d3869b'
chalk.aqua   = '#89b482'
chalk.grey   = '#847a6d'
chalk.pink   = '#d677be'

let groups = %{
    'fg0': 'id',
    'fg1': '[ ] { } ( ) . .? , ]',
    'orange': '
        =   ==  ++  --  +   -  *   /   %   ^    |    &
        +=  -=  *=  /=  %=  @  #   &&  ||  <=>  !    ~
        ~>  =>  $~> >   <  !=  ??  >>  <<  <<=  >>=  |>
        *** &&& <$> <%> ?> <? <*>  *>  <*  ..%. .%.. .%
        ::  ?=  |=  &=  ^=  ?  :   $   ..  ...  ?:
    ',
    'purple': 'true false nil int float import',
    'red': '
        for       while    if     let       and    fn     const
        do        try      catch  operator  or     in     yield
        match     else     with   break     pub    as
        continue  return   macro  where     not    throw  id_keyword
    ',
    'yellow': 'class tag trait use id_member id_module',
    'green': 'string " f-string',
    'b u green2': 'fun fun_member',
    'blue': 'type',
    'blue2': 'typeof',
    'aqua': 'regex id_field',
    'grey': 'comment ;',
    'pink': 'pp id_macro fun_macro $$[ $$] $$'
}

let colors = [ %{ t: c for t in g.words() } for c, g in groups ].sum()

fn color-and-break(source: String) -> [(Int, String)] {
    let tokens = match ty.parse(source, tokens=true) {
        Err({tokens, last: $last, *}) as e
            => tokens,

        Ok((_, {tokens, *})) or Err({tokens, *})
            => tokens,

        err => do { print(err); return [(0, chalk::escape(source))] }
    }

    let tokens = tokens.remove!(nil).map!(t -> match t {
        {id: /^[A-Z]\w*[a-z]\w*$/, *}            => do { let x: _ = t; ({*x, type: 'type'}) },
        {id, end, *} and source[end.byte] == '(' => do { let x: _ = t; ({*x, type: 'fun'}) },
        _ => t
    })

    let parts = [(it, '') for source]

    fn idx-of(off: Int) -> Int {
        let n = 0

        for ..#parts {
            n += parts[it][0].size()
            if (n > off) {
                return it
            }
        }

        #parts
    }

    for {start, end, type, ?kind, *} in tokens {
        let i = idx-of(start.byte)
        let j = idx-of(end.byte)

        continue if not let $color = colors[[type, ?kind].join('_')]

        for i..j {
            parts[it] = (parts[it][0], color)
        }
    }

    parts.group-by!(&1).map!(group -> (group.map(&0).str(), group[0][1]))

    let out = Blob()

    for (text, fg) in parts {
        out.push(fg ? "[{fg}]{chalk::escape(text)}[/]" : chalk::escape(text))
    }

    out.str!().lines().enumerate!()
}

pub fn pretty-code(prompt: String, line: [String], i: Int) -> String {
    let before = line[;i].str() ?? ''
    let all = line.str() ?? ''

    if let [(_, _before), *] = color-and-break(before) and
       let [(_, _all), *] = color-and-break(all) {
        before = Text(_before, chalk)
        all = Text(_all, chalk)
    }

    "{prompt}{all}\r{prompt}{before}"
}

fn type-completions(type: _, prefix: String) -> [String] {
    fn label(method) {
        chalk"[bright blue]{method.name:<10}[/][grey]:[/] {types::show(method.type)}"
    }

    match type {
        types::Object(_) => do {
            let info = types.info(type)

            let members = (
                info.methods
              + info.fields
              + info.getters
              + info.setters
            )

            let completions = members
                .filter(\_.name.starts?(prefix))
                .filter(\_.type !:: types::Intersect)
                .map(${(label(it), it.name[#prefix;])})
                .sort(by=\"{_.0}")

            for info.traits {
                completions += type-completions(it, prefix)
            }

            if info.`super` != nil {
                completions += type-completions(info.`super`, prefix)
            }

            completions.uniq()
        }

        types::Record(members ~> $fields)
            => fields.keys()
                .filter(\_.starts?(prefix))
                .map(\_[#prefix;])
                .sort(),

        _ => []
    }
}

fn mod-completions(mod: Dict[String, _], prefix: String) -> [(Text, String)] {
    let completions = []

    for name, item in mod if name.starts?(prefix) {
        let label = match item {
            _ns: Dict => chalk"[bright blue]{name}[/][grey]:[/] [b yellow]namespace[/]",
            {type, *} => chalk"[bright blue]{name}[/][grey]:[/] {types::show(type)}",
            _         => nil
        }

        if label {
            completions.push((label, name[#prefix;]))
        }
    }

    completions
}

pub fn tab-complete(before: String, after: String) -> readln::CompletionAction {
    let expr = match ty.parse("{before} .? \{") {
        Err({last: $expr, *}) => expr,

        Ok((expr, _)) => expr,

        _ => do return ListCompletions([])
    }

    let expr = match expr {
        ty.Let(_, e) => e,
        _            => expr
    }

    if (before[-1] != '.') and let ty.Id({name, *}) = expr {
        return CycleCompletions(mod-completions(ty.module(), name))
    }


    let (subject, prefix) = match expr {
        ty.MemberAccess(o, m) and (before[-1] != '.')
            => (o, m),
        _
            => (expr, '')
    }

    if let ty.Id({name, *}) = subject and let $mod = ty.module(name) {
        return CycleCompletions(mod-completions(mod, prefix))
    }

    CycleCompletions(
        type-completions(
            types.infer(subject),
            prefix
        )
    )
}
