#!/usr/bin/env ty

import llhttp2 (..)
import os (..)
import json
import errno

function urlDecode(s) {
    s.sub('+', ' ')
     .sub(/%../, s -> chr(int(s.slice(1), 16)))
     .sub("\r\n", "\n")
     .sub("\r", "\n")
}

function decodeQuery(query) {
    let params = %{}

    for [k, ?v] in query.split('&').map(&split('=') |> &map(urlDecode)) {
        if let $p = params[k] {
            if p :: Array {
                p.push(v)
            } else {
                params[k] = [p, v]
            }
        } else {
            params[k] = v
        }
    }

    return params
}

function makePattern(route) {
    let route = route.sub(/<(\w+)>/, [_, name] -> "<{name}:\\w+>")
    let params = route.matches(/<(\w+):/).map(&1)
    return (params, regex('^' + route.sub(/<\w+:(.*?)>/, [_, pattern] -> "({pattern})") + '/?$'))
}

class HttpResponse {
    init() {
        @statusCode = HTTP_STATUS_OK
        @body = Blob()
        @headers = %{'Content-Type': 'text/html'}
    }

    header(k, v) {
        if v == nil {
            @headers[k]
        } else {
            @headers[k] = "{v}"
        }
    }

    status(c) {
        @statusCode = (c ?? @statusCode)
    }

    write(s) {
        @body.push(s)
    }

    json(x) {
        @body.push(json.encode(x))
        self.header('Content-Type', 'application/json')
    }

    send(c) {
        let response = Blob([
            "HTTP/1.1 {@statusCode} {statusName(@statusCode)}",
            "Content-Length: {#@body}",
            *["{k}: {v}" for k, v in @headers],
            '',
            ''
        ].join('\r\n'))

        response.push(@body)

        ::write(c, response, all: true)
    }
}

tag SocketError;

class HttpServer {
    init(*args, backlog=64) {
        @handlers = %{*:[]}
        @conns = []
        @stopping = false
        match args {
            [addr, port] => {
                @sock = socket(AF_INET, SOCK_STREAM, 0)

                setsockopt(@sock, SOL_SOCKET, SO_REUSEADDR, 1)

                let Ok([addr]) = getaddrinfo(addr, port, AF_INET, SOCK_STREAM, 0)

                let err = bind(@sock, addr)
                if err != 0 {
                    throw SocketError("bind(): {errno.str(err)}")
                }

                let err = listen(@sock, backlog)
                if err != 0 {
                    throw SocketError("listen(): {errno.str(err)}")
                }
            },

            [sock] => {
                @sock = sock
                listen(@sock, backlog)
            }
        }
    }

    findHandler(method, url) {
        if not let $hs = @handlers[method] {
            return nil
        }

        for (ps, pattern, f) in hs {
            if let $m = url.match!(pattern) {
                return (f, %{ps[i]: m[i+1] for i in ..#ps})
            }
        }
    }

    stop() { @stopping = true }

    handleConnection(conn) {
        let p = HttpParser(HTTP_REQUEST)
        let b = Blob()

        while read(conn, b, 4096) > 0 {
            p.push(b)
            print(b.str())
            b.clear()

            for req in p.takeMessages() {
                let rsp = HttpResponse()

                if let (f, ps) = self.findHandler(req.method, req.url) {
                    f(req, rsp, **ps)
                } else {
                    rsp.status(404)
                }

                rsp.send(conn)
            }
        }

        close(conn)
    }

    get(route, f) {
        @handlers['GET'].push({*makePattern(route), f})
    }

    post(route, f) {
        @handlers['POST'].push({*makePattern(route), f})
    }

    delete(route, f) {
        @handlers['DELETE'].push({*makePattern(route), f})
    }

    put(route, f) {
        @handlers['PUT'].push({*makePattern(route), f})
    }

    run() {
        let b = Blob()

        while !@stopping {
            let pollFds = [(fd: @sock, events: POLLIN)]

            for conn in @conns {
                pollFds.push((fd: conn.fd, events: POLLIN))
            }

            poll(pollFds, -1)

            for {fd, events, revents} in pollFds {
                if fd == @sock {
                    if revents & POLLIN {
                        let (conn, addr) = accept(fd)
                        @conns.push({fd: conn, addr, p: HttpParser(HTTP_REQUEST)})
                    }
                } else {
                    let c = @conns.find(${it.fd == fd})
                    if (revents & POLLIN) && read(fd, b, 4096) > 0 {
                        c.p.push(b)
                        b.clear()

                        for req in c.p.takeMessages() {
                            let rsp = HttpResponse()

                            let [url, ?query] = req.url.split('?', 1)
                            let params = %{}

                            if query != nil {
                                params.update(decodeQuery(query))
                            }

                            let body = req.body.str!()

                            if req.headers['Content-Type'].match?(/^multipart\/form-data/) {
                                let form = %{}
                                let [_, delim] = body.match!(/^(.*)\r\n/)
                                let offset = 0

                                while let $i = body.bsearch(delim, offset) {
                                    if not let $j = body.bsearch('\r\n\r\n', i) {
                                        break
                                    }
                                    let headers = body.bsplice(i + #delim + 2, j).split(/\r\n/)
                                    offset = body.bsearch(delim, j)
                                    let content = body.bsplice(j + 4, offset - 2)
                                    let headers = %{k.lower(): v for [k, v] in headers.map(&split(': ', 1))}
                                    let disposition = %{k: v for [_, k, v] in headers['content-disposition'].matches(/(\w+)="([^"]+)"/)}
                                    let name = disposition['name']

                                    if let $filename = disposition['filename'] {
                                        let f = {
                                            name: filename,
                                            type: headers['content-type'],
                                            content: Blob(content)
                                        }
                                        if let $fs = form[name] {
                                            fs.push(f)
                                        } else {
                                            form[name] = [f]
                                        }
                                    } else {
                                        form[disposition['name']] = content
                                    }
                                }
                                params.update(form)
                            } else if req.headers['Content-Type'].match?(/^application\/x-www-form-urlencoded/) {
                                params.update(decodeQuery(req.body.str!()))
                            }

                            if let (f, ps) = self.findHandler(req.method, url) {
                                try {
                                    rsp.status(f({*req, url, params, addr: c.addr}, rsp, **ps) ?? 200)
                                } catch e {
                                    rsp.header('Content-Type', 'text/plain')
                                    rsp.write("Exception: {e}")
                                    rsp.status(500)
                                }
                            } else {
                                rsp.status(404)
                            }

                            rsp.send(fd)
                        }
                    } else if revents & POLLHUP {
                        close(fd)
                        @conns.filter!(${it.fd != fd})
                    }
                }
            }
        }
    }
}
