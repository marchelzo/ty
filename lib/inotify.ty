import ffi as c
import cutil (wrap, cstr)
import io

/* Supported events suitable for MASK parameter of INOTIFY_ADD_WATCH.  */
let IN_ACCESS = 0x00000001	/* File was accessed.  */
let IN_MODIFY = 0x00000002	/* File was modified.  */
let IN_ATTRIB = 0x00000004	/* Metadata changed.  */
let IN_CLOSE_WRITE = 0x00000008	/* Writtable file was closed.  */
let IN_CLOSE_NOWRITE = 0x00000010	/* Unwrittable file closed.  */
let IN_CLOSE = (IN_CLOSE_WRITE | IN_CLOSE_NOWRITE) /* Close.  */
let IN_OPEN = 0x00000020	/* File was opened.  */
let IN_MOVED_FROM = 0x00000040	/* File was moved from X.  */
let IN_MOVED_TO = 0x00000080	/* File was moved to Y.  */
let IN_MOVE = (IN_MOVED_FROM | IN_MOVED_TO) /* Moves.  */
let IN_CREATE = 0x00000100	/* Subfile was created.  */
let IN_DELETE = 0x00000200	/* Subfile was deleted.  */
let IN_DELETE_SELF = 0x00000400	/* Self was deleted.  */
let IN_MOVE_SELF = 0x00000800	/* Self was moved.  */

/* Events sent by the kernel.  */
let IN_UNMOUNT = 0x00002000	/* Backing fs was unmounted.  */
let IN_Q_OVERFLOW = 0x00004000	/* Event queued overflowed.  */
let IN_IGNORED = 0x00008000	/* File was ignored.  */

/* Helper events.  */
let IN_CLOSE = (IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)	/* Close.  */
let IN_MOVE = (IN_MOVED_FROM | IN_MOVED_TO)		/* Moves.  */

/* Special flags.  */
let IN_ONLYDIR = 0x01000000	/* Only watch the path if it is a directory.  */
let IN_DONT_FOLLOW = 0x02000000	/* Do not follow a sym link.  */
let IN_EXCL_UNLINK = 0x04000000	/* Exclude events on unlinked objects.  */
let IN_MASK_CREATE = 0x10000000	/* Only create watches.  */
let IN_MASK_ADD = 0x20000000	/* Add to the mask of an already existing watch.  */
let IN_ISDIR = 0x40000000	/* Event occurred against dir.  */
let IN_ONESHOT = 0x80000000	/* Only send event once.  */

let inotify_event = c.struct(
  c.int,
  c.u32,
  c.u32,
  c.u32
)

let c_inotify_init = wrap(nil, 'inotify_init', c.int)
let c_inotify_add_watch = wrap(nil, 'inotify_add_watch', c.int, c.int, c.ptr, c.u32)

pub function init() {
  return io.open(c_inotify_init(), 'r')
}

pub function add(inot, path, mask) {
  return c_inotify_add_watch(inot.fd, path.cstr(), mask)
}

pub function wait(inot) {
  let b = inot.next(c.size(inotify_event))
  let size = c.member(inotify_event, b.ptr(), 3)

  let name = if size > 0 {
    let buf = inot.next(size)
    buf.str(0, buf.search(0))
  }

  return (
    wd: c.member(inotify_event, b.ptr(), 0),
    mask: c.member(inotify_event, b.ptr(), 1),
    cookie: c.member(inotify_event, b.ptr(), 2),
    name: name,
    size: size
  )
}
