import os
import errno
import stdio

pub const FBF = stdio._IOFBF
pub const LBF = stdio._IOLBF
pub const NBF = stdio._IONBF

pub use BufferingMode = (typeof FBF) | (typeof LBF) | (typeof NBF)

pub SEEK_SET = stdio.SEEK_SET
pub SEEK_CUR = stdio.SEEK_CUR

pub class Stream : Iter {
    f: _
    fd: Int

    init(fd, mode: ?String = 'a+', buffering: ?BufferingMode = nil, dup: Bool = false) {
        if fd :: Int {
            @fd = match dup { true => os.dup(fd), _ => fd }

            if let $f = stdio.fdopen(@fd, mode) {
                @f = f
            } else {
                if dup { os.close(@fd) }
                throw Err(errno.get())
            }

            if buffering != nil {
                stdio.setvbuf(self.f, buffering);
            }
        } else {
            // fd is actually a file pointer
            @f = fd
        }
    }

    close() {
        if self.f != nil {
            let r = stdio.fclose(self.f)
            self.f = nil
            return r
        } else {
            throw Err(errno.EBADF)
        }
    }

    __drop__() {
        self.close()
    }

    tell() -> Int {
        stdio.ftell(@f)
    }

    seek(*args) {
        stdio.fseek(@f, *args)
    }

    nextLine() -> String | nil {
        if let $line = stdio.fgets(self.f) {
            line
        } else if stdio.fseek(self.f, 0, stdio.SEEK_SET) == -1 {
            stdio.clearerr(self.f)
        }
    }

    rewind() {
        if stdio.fseek(self.f, 0, stdio.SEEK_SET) == -1 {
            throw Err(errno.get())
        }
    }

    next(n: Int, buf: ?Blob) -> Blob {
        stdio.fread(self.f, n, buf)
    }

    next() -> Int {
        stdio.fgetc(self.f)
    }

    write(s) {
        match s {
            _ :: Blob | String => stdio.fwrite(self.f, s),
            _                  => stdio.fwrite(self.f, str(s))
        }
    }

    writeSigned(*args) {
        stdio.writeSigned(@f, *args)
    }

    writeUnsigned(*args) {
        stdio.writeUnsigned(@f, *args)
    }

    writeFloat(*args) {
        stdio.writeFloat(@f, *args)
    }

    writeDouble(*args) {
        stdio.writeDouble(@f, *args)
    }

    putc(c: Int) {
        stdio.fputc(@f, c)
    }

    nextFloat() -> Float {
        stdio.readFloat(@f)
    }

    nextDouble() -> Float {
        stdio.readDouble(@f)
    }

    nextUnsigned(*args) -> Int {
        stdio.readUnsigned(@f, *args)
    }

    nextSigned(*args) -> Int {
        stdio.readUnsigned(@f, *args)
    }

    print(s = '') {
        match s {
            _ :: Blob   => stdio.puts(self.f, s),
            _ :: String => stdio.puts(self.f, s),
            _           => stdio.puts(self.f, str(s))
        }
    }

    slurp() -> String {
        stdio.slurp(self.f)
    }

    blob(bs=1024) -> Blob {
        let b = ::blob()

        while stdio.fread(@f, bs, b) > 0 {
            ;
        }

        return b
    }

    flush() {
        stdio.fflush(self.f)
    }

    __next__() {
        Some.from(self.nextLine())
    }
}

pub stdin = Stream(0, 'r');
pub stdout = Stream(1, 'w');
pub stderr = Stream(2, 'w', NBF);

pub function open(
    path: String | Int,
    mode: String = 'a+',
    buffering: ?BufferingMode = nil,
    dup: Bool = false
) {
    if path :: Int {
        return Stream(path, mode, buffering, dup);
    }

    let flags = match mode {
        'r'  => os.O_RDONLY,
        'w'  => os.O_WRONLY | os.O_CREAT | os.O_TRUNC,
        'wx' => os.O_WRONLY | os.O_CREAT,
        'a'  => os.O_WRONLY | os.O_CREAT | os.O_APPEND,
        'r+' => os.O_RDWR,
        'w+' => os.O_RDWR | os.O_CREAT | os.O_TRUNC,
        'a+' => os.O_RDWR | os.O_CREAT | os.O_APPEND,
        _    => throw Err(errno.EINVAL)
    };

    let fd = if flags & os.O_CREAT {
        os.open(path, flags, 0666)
    } else {
        os.open(path, flags)
    }

    match fd {
        -1  => throw Err(errno.get()),
        _   => Stream(fd, mode, buffering)
    }
}

pub function tmpfile() {
    if not let $f = stdio.tmpfile() {
        throw Err(errno.get())
    } else {
        Stream(f)
    }
}
