import ty
import ty.parse as parse
import ty.token (next)
import os (..)
import time
import chalk
import thread
import io

enum! {
    CRITICAL,
    ERROR,
    WARN,
    INFO,
    DEBUG
}

let levels = %{
    CRITICAL: 'critical',
    ERROR: 'error',
    WARN: 'warning',
    INFO: 'info',
    DEBUG: 'debug'
}

let pens = %{
    CRITICAL: chalk.pen(chalk.bold, chalk.underline, chalk.brightRed),
    ERROR: chalk.brightRed,
    WARN: chalk.brightYellow,
    INFO: chalk.fg('#4989eb'),
    DEBUG: chalk.fg('#ff45be')
}

let timePen = chalk.fg('#10ccb9')
let namePen = chalk.fg('#92e83c')

function threadPen() {
    let pens = static!(%{})
    let mtx = static!(Mutex())

    with mtx.lock() {
        if let $p = pens[thread.id()] {
            return p
        } else {
            return pens[thread.id()] = chalk.fg_random()
        }
    }
}

class Logger {
    init(name) {
        @name = name
        @indent = 4
        @level = WARN
        @stack = []
        @prefix = function (level, color) {
            let t = time.utime()
            let tString = "{time.strftime('%Y-%m-%d %H:%M:%S', t / 1000000)}.{(t % 1000000) / 1000#03}"
            let threadName = (Thread.getName() || 'main') + "({thread.id()})"
            if color {
                let levelName = chalk.padLeft(pens[level]("[{levels[level]}]"), 10)
                let threadString = chalk.padLeft(threadPen()("[{threadName}]"), 10)
                "{timePen(tString)} {levelName} {threadString}"
            } else {
                let levelName = "[{levels[level]}]".padLeft(10)
                let threadString = "[{threadName}]".padLeft(10)
                "{tString} {levelName} {threadString}"
            }
        }

        @fd = if let $path = getenv('TY_LOG') and 
                 let fd = open(path, O_RDWR | O_TRUNC | O_CREAT, 0644) and
                 fd >= 0 {
            fd
        } else {
            2
        }

        @color = isatty(@fd)
        @file = io.open(@fd, 'w+')
    }

    setLevel(level) {
        @level = level
    }

    setPrefix(f) {
        @prefix = f
    }

    log(level, msg) {
        if @level >= level {
            let name = if #@stack == 0 {
                @name
            } else {
                "{@name}[{@stack.join('.')}]"
            }
            @file.write((@prefix)(level, @color) + " {@color ? namePen(name) : name}: {msg}\n")
        }
    }

    warn(msg) {
        @log(WARN, msg)
    }

    error(msg) {
        @log(ERROR, msg)
    }

    info(msg) {
        @log(INFO, msg)
    }

    critical(msg) {
        @log(CRITICAL, msg)
    }

    debug(msg) {
        @log(DEBUG, msg)
    }

    push(name) {
        @stack.push(name)
    }

    pop() {
        @stack.pop()
    }
}

pub function getLogger(name) {
    let mtx = static!(Mutex())
    let d = static!(%{})
    with mtx.lock() {
        if let $logger = d[name] {
            logger
        } else {
            d[name] = Logger(name)
        }
    }
}

function logMacro(level) {
    let e = parse.expr(50)
    ty.Block([
        ty.Let(
            ty.Id(name: 'logger'),
            ty.Call(
                func: ty.Id(module: 'log', name: 'getLogger'),
                args: [
                    ty.Arg(arg: ty.Id(name: '__module__'))
                ]
            )
        ),
        ty.MethodCall(
            object: ty.Id(name: 'logger'),
            method: level,
            args: [ty.Arg(arg: e)]
        )
    ])
}

pub macro debug!    { logMacro('debug') }
pub macro info!     { logMacro('info') }
pub macro warn!     { logMacro('warn') }
pub macro error!    { logMacro('error') }
pub macro critical! { logMacro('critical') }

pub macro logLevel! {
    let e = parse.expr(50)
    ty.Block([
        ty.Let(
            ty.Id(name: 'logger'),
            ty.Call(
                func: ty.Id(module: 'log', name: 'getLogger'),
                args: [
                    ty.Arg(arg: ty.Id(name: '__module__'))
                ]
            )
        ),
        ty.MethodCall(
            object: ty.Id(name: 'logger'),
            method: 'setLevel',
            args: [ty.Arg(arg: e)]
        )
    ])
}

pub macro logCtx! {
    let name = parse.expr(50)
    ty.Multi([
        ty.Let(
            ty.Id(name: 'logger'),
            ty.Call(
                func: ty.Id(module: 'log', name: 'getLogger'),
                args: [
                    ty.Arg(arg: ty.Id(name: '__module__'))
                ]
            )
        ),
        ty.MethodCall(
            object: ty.Id(name: 'logger'),
            method: 'push',
            args: [ty.Arg(arg: name)]
        ),
        ty.Defer(
            ty.Func(
                params: [],
                body: ty.MethodCall(
                    object: ty.Id(name: 'logger'),
                    method: 'pop',
                    args: []
                )
            )
        )
    ])
}
