import ty
import ty.parse as parse
import ty.token (next)
import os (write, isatty)
import time
import chalk
import thread

enum! {
    CRITICAL,
    ERROR,
    WARN,
    INFO,
    DEBUG
}

let levels = %{
    CRITICAL: 'critical',
    ERROR: 'error',
    WARN: 'warning',
    INFO: 'info',
    DEBUG: 'debug'
}

let pens = %{
    CRITICAL: chalk.pen(chalk.bold, chalk.underline, chalk.brightRed),
    ERROR: chalk.brightRed,
    WARN: chalk.brightYellow,
    INFO: chalk.fg('#4989eb'),
    DEBUG: chalk.fg('#ff45be')
}

let timePen = chalk.fg('#10ccb9')
let namePen = chalk.fg('#92e83c')

function hslToRgb(h, s, l) {
  let r, g, b = nil, nil, nil

  if s == 0 {
    r = g = b = l // achromatic
  } else {
    let q = (l < 0.5) ? l * (1 + s) : l + s - l * s
    let p = 2 * l - q
    r = hueToRgb(p, q, h + 1.0/3)
    g = hueToRgb(p, q, h)
    b = hueToRgb(p, q, h - 1.0/3)
  }

  return (iround(r * 255), iround(g * 255), iround(b * 255))
}

function hueToRgb(p, q, t) {
  if t < 0 { t += 1 }
  if t > 1 { t -= 1 }
  if t < 1.0/6 { return p + (q - p) * 6 * t }
  if t < 1.0/2 { return q }
  if t < 2.0/3 { return p + (q - p) * (2.0/3 - t) * 6 }
  return p
}

function threadPen() {
    let pens = static!(%{})
    let mtx = static!(Mutex())

    with mtx.lock() {
        if let $p = pens[thread.id()] {
            return p
        } else {
            let (r, g, b) = hslToRgb(rand(), 0.4 + rand()*0.6, 0.6 + rand()*0.15)
            return pens[thread.id()] = chalk.fg("#{r#02x}{g#02x}{b#02x}")
        }
    }
}

class Logger {
    init(name) {
        @name = name
        @color = isatty(2)
        @indent = 4
        @level = WARN
        @stack = []
        @prefix = function (level, color) {
            let t = time.utime()
            let tString = "{time.strftime('%Y-%m-%d %H:%M:%S', t / 1000000)}.%03{(t % 1000000) / 1000}"
            let threadName = (Thread.getName() || 'main') + "({thread.id()})"
            if color {
                let levelName = chalk.padLeft(pens[level]("[{levels[level]}]"), 10)
                let threadString = chalk.padLeft(threadPen()("[{threadName}]"), 10)
                "{timePen(tString)} {levelName} {threadString}"
            } else {
                let levelName = "[{levels[level]}]".padLeft(10)
                let threadString = "[{threadName}]".padLeft(10)
                "{tString} {levelName} {threadString}"
            }
        }
    }

    setLevel(level) {
        @level = level
    }

    setPrefix(f) {
        @prefix = f
    }

    log(level, msg) {
        if @level >= level {
            let name = if #@stack == 0 {
                @name
            } else {
                "{@name}[{@stack.join('.')}]"
            }
            write(2, (@prefix)(level, @color) + " {@color ? namePen(name) : name}: {msg}\n")
        }
    }

    warn(msg) {
        @log(WARN, msg)
    }

    error(msg) {
        @log(ERROR, msg)
    }

    info(msg) {
        @log(INFO, msg)
    }

    critical(msg) {
        @log(CRITICAL, msg)
    }

    debug(msg) {
        @log(DEBUG, msg)
    }

    push(name) {
        @stack.push(name)
    }

    pop() {
        @stack.pop()
    }
}

pub function getLogger(name) {
    let mtx = static!(Mutex())
    let d = static!(%{})
    with mtx.lock() {
        if let $logger = d[name] {
            logger
        } else {
            d[name] = Logger(name)
        }
    }
}

function logMacro(level) {
    let e = parse.expr(50)
    ty.Block([
        ty.Let(
            ty.Id(name: 'logger'),
            ty.Call(
                func: ty.Id(module: 'log', name: 'getLogger'),
                args: [
                    ty.Arg(arg: ty.Id(name: '__module__'))
                ]
            )
        ),
        ty.MethodCall(
            object: ty.Id(name: 'logger'),
            method: level,
            args: [ty.Arg(arg: e)]
        )
    ])
}

pub macro debug!    { logMacro('debug') }
pub macro info!     { logMacro('info') }
pub macro warn!     { logMacro('warn') }
pub macro error!    { logMacro('error') }
pub macro critical! { logMacro('critical') }

pub macro logLevel! {
    let e = parse.expr(50)
    ty.Block([
        ty.Let(
            ty.Id(name: 'logger'),
            ty.Call(
                func: ty.Id(module: 'log', name: 'getLogger'),
                args: [
                    ty.Arg(arg: ty.Id(name: '__module__'))
                ]
            )
        ),
        ty.MethodCall(
            object: ty.Id(name: 'logger'),
            method: 'setLevel',
            args: [ty.Arg(arg: e)]
        )
    ])
}

pub macro logCtx! {
    let name = parse.expr(50)
    ty.Multi([
        ty.Let(
            ty.Id(name: 'logger'),
            ty.Call(
                func: ty.Id(module: 'log', name: 'getLogger'),
                args: [
                    ty.Arg(arg: ty.Id(name: '__module__'))
                ]
            )
        ),
        ty.MethodCall(
            object: ty.Id(name: 'logger'),
            method: 'push',
            args: [ty.Arg(arg: name)]
        ),
        ty.Defer(
            ty.Func(
                params: [],
                body: ty.MethodCall(
                    object: ty.Id(name: 'logger'),
                    method: 'pop',
                    args: []
                )
            )
        )
    ])
}
