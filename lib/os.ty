import os (..)
import ffi as c
import cutil (cfun!)
import errno (ENOTDIR)

fn os::read(fd: Int, n: Int) -> Int;
fn os::read(fd: Int, buf: Blob, n: Int) -> Int;
fn os::write(fd: Int, data: Any) -> Int;

fn os::ncpu() -> Int;

use ProcessDescriptor = {
    stdin: Int,
    stdout: Int,
    stderr: Int,
    pid: Int
}

fn os::spawn(
    cmd: Array[String],
    detach: Bool = false,
    combine-output: Bool = false,
    share-stdin: Bool = false,
    share-stdout: Bool = false,
    share-stderr: Bool = false
) -> ProcessDescriptor;

#|if __defined__(os::DT_DIR)
let os::walk = function walk*(path: String, skip: _ = nil) -> Generator[(String, [String], [String])] {
    let d = opendir(path)

    let fs: [String] = []
    let ds: [String] = []

    while let $entry = readdir(d) {
        match (entry.d_type, entry.d_name) {
            (_, '.'), (_, '..') => { },
            (::DT_DIR, name)    => ds.push(entry.d_name),
            (_,        name)    => fs.push(entry.d_name)
        }
    }

    yield (path, ds, fs)

    for d in ds {
        let path = "{path}/{d}"
        if !skip || !skip(path) {
            for t in walk(path) {
                yield t
            }
        }
    }

    closedir(d)
}
#|]

#|if !__windows__
cfun! nil c.int isatty(c.int)
cfun! nil c.ptr strsignal(c.int)
let os::isatty = isatty
let os::strsignal = strsignal |> c.str
let os::_ioctl = c.wrapVar(nil, 'ioctl', 2, c.int, c.int, c.ulong)
fn os::ioctl(fd: Int, ioctl: Int, *args: _) { os::_ioctl(fd, ioctl, *args) }
#|]

let os::rm = function rm(path, quiet=false) {
    if not let $d = opendir(path) {
        match errno.get() {
            ::ENOTDIR => {
                if unlink(path) == -1 && !quiet {
                    throw Err(errno.get())
                }
            },

            e => {
                if !quiet throw Err(e)
            }
        }

        return
    }

    try {
        while let $entry = readdir(d) {
            match (entry.d_type, entry.d_name) {
                (_, '.'), (_, '..') => { },
                (_, name)           => rm("{path}/{name}")
            }
        }
    } finally {
        closedir(d)
    }

    rmdir(path)
}
