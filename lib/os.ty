import os (..)
import ffi as c
import cutil (cfun!)
import errno (ENOTDIR)

#|if __defined__(os::DT_DIR)
let os::walk = function walk*(path: String) -> Generator[(String, [String], [String])] {
    let d = opendir(path)

    let fs = []
    let ds = []

    while let $entry = readdir(d) {
        match (entry.d_type, entry.d_name) {
            (_, '.'), (_, '..') => { },
            (::DT_DIR, name)    => ds.push(entry.d_name),
            (_,        name)    => fs.push(entry.d_name)
        }
    }

    yield (path, ds, fs)

    for d in ds {
        for t in walk("{path}/{d}") {
            yield t
        }
    }

    closedir(d)
}
#|]

#|if !__windows__
cfun! nil c.int isatty(c.int)
cfun! nil c.ptr strsignal(c.int)
let os::isatty = isatty
let os::strsignal = strsignal |> c.str
let os::ioctl = c.wrapVar(nil, 'ioctl', 2, c.int, c.int, c.ulong)
#|]

let os::rm = function rm(path, quiet=false) {
    if not let $d = opendir(path) {
        match errno.get() {
            ::ENOTDIR => {
                if unlink(path) == -1 && !quiet {
                    throw Err(errno.get())
                }
            },

            e => {
                if !quiet throw Err(e)
            }
        }

        return
    }

    try {
        while let $entry = readdir(d) {
            match (entry.d_type, entry.d_name) {
                (_, '.'), (_, '..') => { },
                (_, name)           => rm("{path}/{name}")
            }
        }
    } finally {
        closedir(d)
    }

    rmdir(path)
}
