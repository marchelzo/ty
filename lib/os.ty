import ffi as c (C!)
import errno (ENOTDIR)

__set_type__ argv Array[String];

pub fn open(path: String, flags: Int, mode: ?Int) -> Int;
pub fn close(fd: Int) -> Int;
pub fn read(fd: Int, n: Int) -> Blob;
pub fn read(fd: Int, buf: Blob, n: Int) -> Int;
pub fn write(fd: Int, data: Any, all: Bool) -> Int;
pub fn write(fd: Int, data: Any) -> Int;

pub fn mktemp(pattern: String = 'tmp.XXXXXX') -> (Int, String);

pub fn accept(sock: Int) -> (Int, Blob);
pub fn listen(sock: Int, n: Int) -> Int;

pub fn poll[T](
    pollfds: [Int | (Int, Int, ?T)],
    timeout: Float | Int | nil
) -> Ok[[(Int, Int, ?T)]] | Err[Int];

pub fn poll[T](
    pollfds-in: [Int | (Int, Int, T)],
    pollfds-out: [Int | (Int, Int, T)],
    timeout: Float | Int | nil
) -> Int;

pub fn listdir(path: String) -> [Float] | nil;
pub fn ncpu() -> Int;

use ProcessDescriptor = {
    stdin: Int,
    stdout: Int,
    stderr: Int,
    pid: Int
}

pub fn spawn(
    cmd: Array[String],
    stdin:  ?Int = nil,
    stdout: ?Int = nil,
    stderr: ?Int = nil,
    chdir:  Int | Blob | String | nil = nil,
    detach: Bool = false
) -> ProcessDescriptor;

#|if __defined__(DT_DIR)
pub fn walk*(path: String, skip: _ = nil) -> Generator[(String, [String], [String])] {
    let d = opendir(path)

    let fs: [String] = []
    let ds: [String] = []

    while let $entry = readdir(d) {
        match (entry.d_type, entry.d_name) {
            (_, '.'), (_, '..') => { },
            (::DT_DIR, name)    => ds.push(entry.d_name),
            (_,        name)    => fs.push(entry.d_name)
        }
    }

    yield (path, ds, fs)

    for d in ds {
        let path = "{path}/{d}"
        if !skip || !skip(path) {
            for t in walk(path) {
                yield t
            }
        }
    }

    closedir(d)
}
#|]

#|if !__windows__
C! function isatty(c.int) -> c.int;
C! function strsignal(c.int) -> c.ptr;
pub isatty = isatty
pub strsignal = strsignal |> c.str
pub ioctl: ({fd: Int, ioctl: Int, args: *_} -> Int) = c.wrapVar(nil, 'ioctl', 2, c.int, c.int, c.ulong);
#|]

pub fn rm(path, quiet=false) {
    if not let $d = opendir(path) {
        match errno.get() {
            ::ENOTDIR => {
                if unlink(path) == -1 && !quiet {
                    throw Err(errno.get())
                }
            },

            e => {
                if !quiet throw Err(e)
            }
        }

        return
    }

    try {
        while let $entry = readdir(d) {
            match (entry.d_type, entry.d_name) {
                (_, '.'), (_, '..') => { },
                (_, name)           => rm("{path}/{name}")
            }
        }
    } finally {
        closedir(d)
    }

    rmdir(path)
}
