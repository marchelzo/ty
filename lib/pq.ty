export Heap

class Heap {
    init() {
        self.keys = [];
        self.values = [];
        self.n = 0;
    }

    swap(i, j) {
        [self.keys[i], self.keys[j]] = [self.keys[j], self.keys[i]];
        [self.values[i], self.values[j]] = [self.values[j], self.values[i]];
    }

    push(key, value) {
        self.keys.push(key);
        self.values.push(value);

        let i = self.values.len() - 1;
        let p = (i - 1) / 2;
        while p >= 0 && self.keys[i] < self.keys[p] {
            self.swap(i, p);
            i = p;
            p = (p - 1) / 2;
        }
    }

    pop() {
        if self.values.len() == 0 {
            return nil;
        }

        let result = self.values[0];
        let priority = self.keys[0];

        self.keys[0] = self.keys[-1];
        self.values[0] = self.values[-1];

        self.keys.pop();
        self.values.pop();

        let i = 0;
        let left = 1;
        let right = 2;

        while left < self.values.len() {
            let c = i;
            if self.keys[left] < self.keys[c] {
                c = left;
            }
            if right < self.values.len() && self.keys[right] < self.keys[c] {
                c = right;
            }
            if c == i {
                break;
            }
            self.swap(i, c);
            i = c;
            left = 2 * i + 1;
            right = left + 1;
        }

        return result, priority;
    }

    __len__() {
        return #self.values
    }

    size() {
        return self.values.len()
    }

    __iter__() {
        for k, i in @keys {
            yield (k, @values[i])
        }
    }
}
