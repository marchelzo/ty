import bit
import math
import thread
import base64
import time
import ffi as c
import ty
import ty.parse as parse
import ty.token as lex

tag MatchError;
tag IndexError;

tag None {
     map()     { None }
     flatMap() { None }
}

tag Some {
    map(f) {
        Some(f(self))
    }

    flatMap(f) {
        f(self)
    }

    from(x) {
        match x {
            nil => None,
            _   => Some(x)
        }
    }
}

tag Ok {
     map(f) {
          Ok(f(self))
     }

     flatMap(f) {
          f(self)
     }
}

tag Err {
     map()     { self }
     flatMap() { self }
}

class Object {
    init(%props) {
        for k, v in props {
            member(self, k, v)
        }
    }

    is?(c) {
        subclass?(type(self), c)
    }

    drill(path) {
        let x = self

        for i in path {
            x = x[i]
        }

        return x
    }

    members() {
        members(self)
    }

    member(*args) {
        member(self, *args)
    }

    setFinalizer(*args) {
        setFinalizer(self, *args)
    }

    |(other) {
        c -> (c :: self) || (c :: other)
    }

    &(other) {
        c -> (c :: self) && (c :: other)
    }

    !::(x) {
        !(self :: x)
    }

    :>(other) {
        x -> (self(x) :: other)
    }

    <.>(other) {
        (*xs) -> self(other(*xs))
    }

    |>(f) {
        (*xs) -> f(self(*xs))
    }

    __match__(other) {
        self == other
    }

    __question__() {
        (x -> x == nil) | self
    }

    __str__() {
        str(self)
    }

    __fmt__(fmt) {
        str(self)
    }
}

class Class {
    |(other) {
        c -> (c :: self) || (c :: other)
    }

    &(other) {
        c -> (c :: self) && (c :: other)
    }

    __match__(other) {
        type(other) != Class && other.is?(self)
    }
}

class Function : Iter {
    init() {
        id
    }

    flip() {
        (a, b) -> self(b, a)
    }

    bind(x) {
        bindMethod(self, x)
    }

    apply(x, *ys) {
        apply(self, x, *ys)
    }

    __match__(x) {
        self(x)
    }

    __next__() {
        Some(self())
    }
}

class Array : Iterable {
    init(*xs) {
        xs
    }

    of(*shape, fill) {
        match shape {
            [k]      => [fill for _ in ..k],
            [k, *ks] => [Array.of(*ks, fill: fill) for _ in ..k]
        }
    }

    shape() {
        let s = []
        let x = self
        while x :: Array {
            s.push(#x)
            x = x[0]
        }
        return s
    }

    T() {
        let t = [[nil for _ in self] for _ in self[0]]

        for i in ..#self {
            for j in ..#self[i] {
                t[j][i] = self[i][j]
            }
        }

        return t
    }

    indices*() {
        for x, i in self {
            if x :: Array {
                for idx in x.indices() {
                    yield (idx :: Array) ? ([i] + idx) : [i, idx]
                }
            } else {
                yield i
            }
        }
    }

    sorted?() {
        for i in 1..#self {
            if self[i - 1] > self[i] {
                return false
            }
        }

        return true
    }

    at(i) {
        if i < #self {
            self[i]
        }
    }

    empty?() {
        #self == 0
    }

    cycle*() {
        let i = 0
        while true {
            yield self[i++ % #self]
        }
    }

    str() {
        @map(str).sum()
    }

    list() {
        self
    }

    mean(f = id) {
        match self {
            [] => nil,
            _  => @map(f |> float).sum() / @len()
        }
    }

    median() {
        match self {
            []                 => nil,
            xs :: xs.sorted?() => xs[#xs / 2],
            xs                 => @sort()[#self / 2]
        }
    }

    coalesce() {
        for x in self if x != nil {
            return x
        }
    }

    argmax(f = id) {
        if #self == 0 { return nil }

        let i, max = 0, f(self[0])

        for j in 1..#self {
            let y = f(self[j])
            if y > max {
                i, max = j, y
            }
        }

        return i
    }

    __iter__*() {
        for x in self { yield x }
    }

    __subscript__(T) {
        if self == Array {
            return xs -> (xs :: Array) && xs.all?(x -> x :: T)
        } else {
            return self[T]
        }
    }
}

class Dict : Iterable {
    init(ks, vs) {
        if ks && vs {
            return %{ k: v for (k, v) in ks.zip(vs) }
        } else {
            return %{}
        }
    }

    map(f) {
        return %{ k: f(v) for k, v in self }
    }

    kmap(f, combine) {
        let new = %{}
        for k, v in self {
            let key = f(k)
            if new.has?(key) {
                new[key] = combine(new[key], v)
            } else {
                new[key] = v
            }
        }
        return new
    }

    iterValues*() {
        for _, v in self {
            yield v
        }
    }

    __iter__() {
        return @keys().zip(@values()).__iter__()
    }
}

class String : Iterable {
    init(x) {
        return str(x)
    }

    int(base: Int = 10) {
        return int(self, base)
    }

    center(n, c = ' ') {
        let d = max(0, n - #self)
        self.padLeft(n - d/2, c).padRight(n, c)
    }

    reverse() {
        return @chars().reverse!().sum() ?? ''
    }

    num?() {
        return @match?(/^\d+(?:\.\d+)?$/)
    }

    lower?() {
        return self == @lower()
    }

    upper?() {
        return self == @upper()
    }

    searchr(pattern) {
        for let off = @len() - 1; off >= 0; --off {
            if let $i = @search(pattern, off) {
                return i
            }
        }
    }

    trim() {
        return @comb(/^\s+|\s+$/)
    }

    trimRight() {
        @comb(/\s+$/)
    }

    trimLeft() {
        @comb(/^\s+/)
    }

    strip() {
        return @comb(/^\s+|\s+$/)
    }

    stripRight() {
        @comb(/\s+$/)
    }

    stripLeft() {
        @comb(/^\s+/)
    }

    unhex() {
        let b = Blob()

        for octet in self.matches(/../) {
            if let $x = int(octet, 16) {
                b.push(x)
            } else {
                return nil
            }
        }

        return b
    }

    editDistance(other) {
        let a, b = self, other

        let D = [[0 for _ in ...#b] for _ in ...#a]

        for i in ...#a {
            D[i][0] = i
        }

        for j in ...#b {
            D[0][j] = j
        }

        for i in ..#a {
            for j in ..#b {
                let cost = (a[i] == b[j]) ? 0 : 1

                D[i + 1][j + 1] = min(
                    D[i][j + 1] + 1,
                    D[i + 1][j] + 1,
                    D[i][j] + cost
                )

                if i > 0 && j > 0 && a[i] == b[j - 1] && b[j] == a[i - 1] {
                    D[i + 1][j + 1] = min(D[i + 1][j + 1], D[i - 1][j - 1] + 1)
                }
            }
        }

        D[#a][#b]
    }

    __iter__*() {
        for c in @chars() {
            yield c
        }
    }

    __fmt__(s) {
        match int(s) {
            nil        => self,
            n :: n > 0 => @padRight(n),
            n :: n < 0 => @padLeft(-n)
        }
    }
}

class Int {
    init(x)  {
        int(x ?? 0)
    }

    ^(b)    { bit.XOR(self, b)        }
    .&.(b)  { bit.AND(self, b)        }
    .|.(b)  { bit.OR(self, b)         }
    <<(b)   { bit.shiftLeft(self, b)  }
    >>(b)   { bit.shiftRight(self, b) }

    **(b) {
        if b :: Int {
            int(math.pow(self, b))
        } else {
            math.pow(self, b)
        }
    }

    upto*(b: Int) {
        while self <= b {
            yield self++
        }
    }

    even?() {
        self % 2 == 0
    }

    odd?() {
        self % 2 == 1
    }

    sgn() {
        self <=> 0
    }

    str(base: Int = 10) {
        let digits = '0123456789ABCDEF'

        if base == 10 { return str(self) }

        let s = ''
        let k = abs(self)

        while k != 0 || #s == 0 {
            s = digits[k % base] + s
            k /= base
        }

        (self < 0) ? ('-' + s) : s
    }

    downto*(b: Int) {
        while self >= b {
            yield self--
        }
    }

    count*(k: Int = 1) {
        while true {
            yield self
            self += k
        }
    }

    negate() {
        -self
    }

    sub(n) {
        self - n
    }

    add(n) {
        self + n
    }

    mul(n) {
        self * n
    }

    div(n) {
        self / int(n)
    }

    mod(n) {
        self % int(n)
    }

    in?(r: Range) {
        self in r
    }

    pred() {
        self - 1
    }

    succ() {
        self + 1
    }

    zero?() {
        self == 0
    }

    nonZero?() {
        self != 0
    }

    positive?() {
        self > 0
    }

    negative?() {
        self < 0
    }

    clamp(*args) {
        Float.clamp.bind(self)(*args)
    }

    __fmt__(fmt) {
        match fmt {
            /^(0?)(\d+)/ => "{self}".padLeft(int(_2), _1 || ' '),
            /^-(\d+)/ => "{self}".padRight(int(_1))
        }
    }
}

class Float {
    init(x) {
        float(x)
    }

    **(b: Int | Float) {
        return math.pow(self, b)
    }

    negate() {
        -self
    }

    sub(n) {
        self - n
    }

    add(n) {
        self + n
    }

    mul(n) {
        self * n
    }

    nan?() {
        math.nan?(self)
    }

    clamp(*args) {
        match args {
            [low, high] => {
                return if self < low {
                    low
                } else if self > high {
                    high
                } else {
                    self
                }
            },

            [range] => {
                @clamp(range.low(), range.high())
            }
        }
    }

    str(prec: ?Int) {
        if prec == nil {
            str(self)
        } else {
            let p10 = math.pow(10, prec)
            let [whole, ?frac] = str(iround(self * p10) / p10).split('.')
            return "{whole}.{(frac ?? '').padRight(prec, '0')}"
        }
    }
}

class Blob : Iterable {
    init(*args) {
        let b = blob()

        for arg in args {
            if (arg :: Iterable) && !(arg :: String) {
                for c in arg {
                    b.push(c)
                }
            } else {
                b.push(arg)
            }
        }

        return b
    }

    searchr(s) {
        for let off = @size() - 1; off >= 0; --off {
            if let $i = @search(off, s) {
                return i
            }
        }
    }

    base64() {
        base64.encode(self)
    }

    __iter__*() {
        for x in self {
            yield x
        }
    }
}

class Bool {
    init(x) {
        return bool(x)
    }

    __not__() { return !self }
}

class Regex {
    init(x) { regex(x) }

    ~=(s) { s.match!(self) }

    test(s) { s.match?(self) }

    exec(s) { s.match!(self) }

    __match__(s) {
        (s :: String) && s.match?(self)
    }
}

class Generator : Iter {
    init*(f) {
        while let Some(x) = f() {
            yield x
        }
    }

    __next__() {
        self()
    }
}

class Tag {
}

class Tuple {
    init(*args, %kwargs) {
        tuple(*args, **kwargs)
    }

    __str___() {
        str(self)
    }

    %(t) {
        let myMembers = members(self)
        let tMembers = members(t)

        for k, v in tMembers {
            if let $c = myMembers[k] {
                myMembers[k] = (c.?isTuple() && v.?isTuple()) ? (c % v) : v(c)
            } else {
                myMembers[k] = v(nil)
            }
        }

        tuple(**myMembers)
    }

    isTuple() {
        true
    }

    __match__(t) {
        let myMembers = members(self)
        let tMembers = members(t)

        if #myMembers.diff(tMembers) != 0 {
            return false
        }

        for k, v in tMembers {
            if !(v :: myMembers[k]) {
                return false
            }
        }

        return true
    }
}

class Iterable {
    map(f) {
        @__iter__().map(f)
    }

    filter(f) {
        @__iter__().filter(f)
    }

    reverse() {
        @__iter__().reverse()
    }

    list() {
        @__iter__().list()
    }

    uniq(f) {
        @__iter__().uniq(f)
    }

    take(n) {
        @__iter__().take(n)
    }

    takeWhile(pred) {
        @__iter__().takeWhile(pred)
    }

    drop(n) {
        @__iter__().drop(n)
    }

    dropWhile(pred) {
        @__iter__().dropWhile(pred)
    }

    set() {
        @__iter__().set()
    }

    str() {
        @__iter__().str()
    }

    join(s) {
        @__iter__().join(s)
    }

    unlines() {
        @__iter__().unlines()
    }

    unwords() {
        @__iter__().unwords()
    }

    tally(f) {
        @__iter__().tally(f)
    }

    min(k) {
        @__iter__().min(k)
    }

    max(k) {
        @__iter__().max(k)
    }

    minmax(k) {
        @__iter__().minmax(k)
    }

    count(x) {
        @__iter__().count(x)
    }

    intersperse(x) {
        @__iter__().intersperse(x)
    }

    groupsOf(n, keepShort) {
        @__iter__().groupsOf(n, keepShort)
    }

    classify(f = id) {
        @__iter__().classify(f)
    }

    pad(n, x) {
        @__iter__().pad(n, x)
    }

    zip(*its, longest) {
        @__iter__().zip(*its, longest: longest)
    }

    zipWith(f, *its, longest) {
        @__iter__().zipWith(f, *its, longest: longest)
    }

    unzip() {
        @__iter__().unzip()
    }

    unzipWith(f) {
        @__iter__().unzipWith(f)
    }

    mean() {
        @__iter__().mean()
    }

    median() {
        @__iter__().median()
    }

    sum() {
        @__iter__().sum()
    }

    fold(a, b) {
        @__iter__().fold(a, b)
    }

    group(f) {
        @__iter__().group(f)
    }

    chain(A, B) {
        A.__iter__().chain(B)
    }

    cycle() {
        @list().cycle()
    }

    repeat(n) {
        @__iter__().repeat(n)
    }

    all?(pred) {
        @__iter__().all?(pred)
    }

    interleave(xs) {
        @__iter__().interleave(xs)
    }

    enumerate() {
        @__iter__().enumerate()
    }

    find(p) {
        @__iter__().find(p)
    }

    __len__() {
        @__iter__().__len__()
    }

    __subscript__(i) {
        @__iter__().__subscript__(i)
    }

    __iter__() -> Iter;
}

class Iter : Iterable {
    map*(f) {
        for x in self {
            yield f(x)
        }
    }

    filter*(f) {
        for x in self if f(x) {
            yield x
        }
    }

    fold(x, f) {
        if f == nil {
            f = x
            if not Some(x) = @__next__() {
                return nil
            }
        }

        while let Some(y) = @__next__() {
            x = f(x, y)
        }

        return x
    }

    __len__() {
        let n = 0

        for _ in self {
            n += 1
        }

        return n
    }

    uniq*(f: Function = id) {
        let seen = %{}
        for x in self {
            let y = f(x)
            if y not in seen {
                seen << y
                yield x
            }
        }
    }

    unzipWith(f) {
        let lists = []

        for x in self {
            let t = f(x)
            let n = #members(t)

            while #lists < n {
                lists.push([])
            }

            for i in ..n {
                lists[i].push(t[i])
            }
        }

        return tuple(*lists)
    }

    unzip() {
        @unzipWith(id)
    }

    zipWith*(f, *its, longest) {
        its.map!(&__iter__)
        its.insert(0, self)

        while true {
            let group = []

            for it in its {
                group.push(it.__next__())
            }

            if group.all?(Some) || (group.any?(Some) && longest) {
                yield f(*group.map!(x -> match x {
                    None    => nil,
                    Some(x) => x
                }))
            } else {
                break
            }
        }
    }

    zip(*its, longest = false) {
        @zipWith(tuple, *its, longest: longest)
    }

    pad*(n, x) {
        let i = 0
        for x in self {
            yield x
            i += 1
        }
        while i < n {
            yield x
            i += 1
        }
    }

    find(p) {
        for x in self {
            if p(x) return x
        }
    }

    group(f = id) {
        if not let Some(x) = @__next__() {
            return [].__iter__()
        }

        let g = [x]

        return Generator(function () {
            while let Some(x) = @__next__() {
                if f(x) == f(g[-1]) {
                    g.push(x)
                } else {
                    let group = g
                    g = [x]
                    return Some(group)
                }
            }

            if g {
                let g_ = g
                g = nil
                return Some(g_)
            } else {
                None
            }
        })
    }

    classify(f = id) {
        let d = %{*: []}

        for x in self {
            d[f(x)].push(x)
        }

        return d
    }

    groupsOf*(n: Int & n >= 0, keepShort: Bool = true) {
        while let xs = @take(n).list() and #xs > 0 {
            if #xs == n || keepShort {
                yield xs
            }
        }
    }

    join(sep: String) {
        if not let Some(str ~> $s) = @__next__() {
            return ''
        }

        let b = blob()
        b.push(s)

        while let Some(s) = @__next__() {
            b.push(sep)
            b.push(str(s))
        }

        return b.str()
    }

    unlines() {
        return @join("\n")
    }

    unwords() {
        return @join(' ')
    }

    count(x) {
        let n = 0

        if x :: (Function | Regex) {
            for y in self {
                if x(y) { n += 1 }
            }
        } else for y in self {
            if x == y { n += 1 }
        }

        return n
    }

    interleave*(ys) {
        ys = ys.__iter__()
        for x in self {
            yield x
            if let Some(y) = ys.__next__() {
                yield y
            }
        }
    }

    list() {
        [x for x in self]
    }

    reverse() {
        return ReverseIter(self)
    }

    take*(n) {
        for _ in ..n {
            if let Some(x) = @__next__() {
                yield x
            } else {
                break
            }
        }
    }

    takeWhile*(pred) {
        while let Some(x) = @__next__() {
            if pred(x) {
                yield x
            } else {
                break
            }
        }
    }

    drop(n) {
        for _ in ..n { @__next__() }
        return self
    }

    dropWhile*(pred) {
        while let Some(x) = @__next__() {
            if !pred(x) {
                yield x
                break
            }
        }
        while let Some(x) = @__next__() {
            yield x
        }
    }

    set() {
        return %{ x for x in self }
    }

    str() {
        let b = blob()

        for s in self {
            b.push(str(s))
        }

        return b.str()
    }

    tally(f = id) {
        let d = %{*:0}
        for x in self { d[f(x)] += 1 }
        return d
    }

    enumerate*() {
        let i = 0
        for x in self {
            yield (i++, x)
        }
    }

    max(k = id) {
        if not let Some(x) = @__next__() {
            return nil
        }

        let m = x
        let mKey = k(m)

        while let Some(x) = @__next__() {
            let key = k(x)
            if key > mKey {
                m, mKey = x, key
            }
        }

        return m
    }

    min(k = id) {
        if not let Some(x) = @__next__() {
            return nil
        }

        let m = x
        let mKey = k(m)

        while let Some(x) = @__next__() {
            let key = k(x)
            if key < mKey {
                m, mKey = x, key
            }
        }

        return m
    }

    minmax(k = id) {
        if not let Some(x) = @__next__() {
            return nil
        }

        let max = x
        let maxKey = k(x)

        let min = max
        let minKey = maxKey

        while let Some(x) = @__next__() {
            let key = k(x)
            if key < minKey {
                min, minKey = x, key
            } else if key > maxKey {
                max, maxKey = x, key
            }
        }

        return (min, max)
    }

    intersperse*(sep) {
        let first = true;
        for x in self {
            if !first {
                yield sep
            }

            yield x

            first = false
        }
    }

    chainAll*() {
        for it in self {
            for x in it.__iter__() {
                yield x
            }
        }
    }

    chain*(*its) {
        for it in its {
            for x in it.__iter__() {
                yield x
            }
        }
    }

    cycle() {
        return @list().cycle()
    }

    repeat*(n) {
        let xs = []

        for x in self {
            yield x
            xs.push(x)
        }

        let i = 1

        while i != n {
            for x in xs { yield x }
            i += 1
        }
    }

    replicate*(x, n) {
        for _ in ..n {
            yield x
        }
    }

    sum() {
        return @list().sum()
    }

    mean() {
        return @list().mean()
    }

    median() {
        return @list().median()
    }

    all?(pred) {
        for x in self {
            if !pred(x) { return false }
        }

        return true
    }

    __subscript__(i) {
        for _ in ..(i - 1) {
            if @__next__() == None { return nil }
        }

        if let Some(x) = @__next__() {
            return x
        }
    }

    __iter__() { self }
}

class ReverseIter : Iter {
    init(I) {
        @xs = []
        while let Some(x) = I.__next__() {
            @xs.push(x)
        }
    }

    __next__() {
        if @xs {
            Some(@xs.pop())
        } else {
            None
        }
    }
}

class Range : Iterable {
    init(a, b) {
        @a = a
        @b = b
    }

    low() {
        return min(@a, @b)
    }

    high() {
        return max(@a, @b) - 1
    }

    __len__() {
        return @high() - @low() + 1
    }

    __str__() {
        return "({@a} .. {@b})"
    }

    contains?(k) {
        k :: self
    }

    __match__(x) {
        (x :: (Int | Float)) && (x >= @low() && x <= @high())
    }

    has?(k) {
        k :: self
    }

    __iter__() {
        let a, b = @a, @b
        return if a < b {
            a.upto(b - 1)
        } else {
            (a - 1).downto(b)
        }
    }
}

class InclusiveRange : Range {
    __str__() {
        return "({@a} ... {@b})"
    }

    __iter__() {
        let a, b = @a, @b

        if a < b {
            a.upto(b)
        } else {
            a.downto(b)
        }
    }

    high() {
        max(@a, @b)
    }
}

function id(x) { x }

function zip(*xs) {
    match xs {
        [x, *xs] => x.zip(*xs),
        []       => []
    }
}

function uuid4() {
    let b = Blob(*[rand(256) for _ in ..16])

    b.set(6, 0x40 .|. (b[6] .&. 0x0F))
    b.set(8, 0xA0 .|. (b[8] .&. 0x3F))

    let hex = b.hex()

    return [
        hex.slice(0, 8),
        hex.slice(8, 4),
        hex.slice(12, 4),
        hex.slice(16, 4),
        hex.slice(20, 12)
    ].join('-')
}

class Mutex {
    init() {
        @mtx = thread.mutex()
        @setFinalizer(@destroy)
    }

    inner() {
        @mtx
    }

    lock() {
        thread.lock(@mtx)
        return MutexLock(@mtx)
    }

    tryLock() {
        if thread.tryLock(@mtx) == 0 {
            return MutexLock(@mtx)
        }
    }

    unlock() {
        thread.unlock(@mtx)
    }

    destroy() {
        thread.destroyMutex(@mtx)
    }
}

class MutexLock {
    init(mtx) {
        @mtx = mtx
    }

    __drop__() {
        thread.unlock(@mtx)
    }
}

class Sync {
    init(x) {
        @x = x
        @mtx = Mutex()
    }

    __missing__(name, *args) {
        with @mtx.lock() {
            let f = member(@x, name)
            f(*args)
        }
    }

    add(y) {
        with @mtx.lock() {
            @x += y
        }
    }
}

class CondVar {
    init() {
        @var = thread.cond()
        @setFinalizer(@destroy)
    }

    destroy() {
        thread.destroyCond(@var)
    }

    wait(mtx, *timeout) {
        thread.waitCond(@var, mtx.inner(), *timeout)
    }

    signal() {
        thread.signalCond(@var)
    }

    broadcast() {
        thread.broadcastCond(@var)
    }
}

class Thread {
    init(*args, name) {
        if name != nil {
            @handle = thread.create(*args, name: name)
        } else {
            @handle = thread.create(*args)
        }
    }

    getName() {
        thread.getName()
    }

    setName(s) {
        thread.setName(s)
    }

    join() {
        thread.join(@handle)
    }

    kill(sig) {
        thread.kill(@handle, sig)
    }

    detach() {
        thread.detach(@handle)
    }

    id() {
        int(@handle)
    }
}

macro static! {
    let e = parse.expr(50)
    ty.Value(ty.eval(e))
}

macro showCode {
    let e = parse.stmt(0)
    print(e)
    e
}

macro dbg! {
    // (
    lex.next()

    let (p, e) = parse.stmt(0, raw: true)

    // )
    lex.next()

    ty.Block([
        ty.Let(ty.Id(name: 'x'), e),
        ty.Call(
            func: ty.Id(name: 'print'),
            args: [
                ty.Arg(arg: ty.Id(name: '__module__')),
                ty.Arg(arg: ty.String(':')),
                ty.Arg(arg: ty.Id(name: '__line__')),
                ty.Arg(arg: ty.String(': ')),
                ty.Arg(arg: ty.String(parse.show(p))),
                ty.Arg(arg: ty.String(' = ')),
                ty.Arg(arg: ty.Id(name: 'x')),
                ty.Arg(name: 'sep', arg: ty.String('')),
                ty.Arg(name: 'flush', arg: ty.Bool(true))
            ]
        ),
        ty.Id(name: 'x')
    ])
}

macro time! {
    // (
    lex.next()

    let (p, e) = parse.stmt(0, raw: true)

    // )
    lex.next()

    ty.Block([
        ty.Let(
            ty.Array([
                ty.ArrayItem(item: ty.Id(name: 's')),
                ty.ArrayItem(item: ty.Id(name: 'x')),
                ty.ArrayItem(item: ty.Id(name: 'e'))
            ]),
            ty.Array([
                ty.ArrayItem(item: ty.Call(func: ty.Value(time.utime), args: [])),
                ty.ArrayItem(item: e),
                ty.ArrayItem(item: ty.Call(func: ty.Value(time.utime), args: []))
            ])
        ),
        ty.Multi([
            ty.Call(
                func: ty.Id(name: 'print'),
                args: [
                    ty.Arg(arg: ty.Id(name: '__module__')),
                    ty.Arg(arg: ty.String(':')),
                    ty.Arg(arg: ty.Id(name: '__line__')),
                    ty.Arg(arg: ty.String(': ')),
                    ty.Arg(arg: ty.String(parse.show(p))),
                    ty.Arg(arg: ty.String(': ')),
                    ty.Arg(arg: ty.Div(ty.Sub(ty.Id(name: 'e'), ty.Id(name: 's')), ty.Value(1.0e6))),
                    ty.Arg(arg: ty.String('s')),
                    ty.Arg(name: 'sep', arg: ty.String(''))
                ]
            ),
            ty.Id(name: 'x')
        ])
    ])
}

macro timed! {
    // (
    lex.next()

    let e = parse.stmt(0)

    // )
    lex.next()

    ty.Block([
        ty.Let(
            ty.Array([
                ty.ArrayItem(item: ty.Id(name: 's')),
                ty.ArrayItem(item: ty.Id(name: 'x')),
                ty.ArrayItem(item: ty.Id(name: 'e'))
            ]),
            ty.Array([
                ty.ArrayItem(item: ty.Call(func: ty.Value(time.utime), args: [])),
                ty.ArrayItem(item: e),
                ty.ArrayItem(item: ty.Call(func: ty.Value(time.utime), args: []))
            ])
        ),
        ty.Record([
            ty.RecordEntry(item: ty.Div(ty.Sub(ty.Id(name: 'e'), ty.Id(name: 's')), ty.Value(1.0e6))),
            ty.RecordEntry(item: ty.Id(name: 'x'))
        ])
    ])
}

macro modify! {
    function path() {
        let p = [lex.next().id]

        while lex.peek().type == '.' {
            lex.next()
            p.push(lex.next().id)
        }

        p
    }

    function convert(d) {
        let entries = []

        for k, v in d {
            entries.push(ty.RecordEntry(item: (v :: Dict) ? convert(v) : v, name: k))
        }

        ty.Record(entries)
    }


    let record = %{}

    // {
    lex.next()

    while lex.peek().type != '}' {
        let (p, [field]) = path().split(-1)

        // : or =
        lex.next()

        let e = ty.ImplicitFunc(body: parse.expr(0), params: [])

        let d = record

        for part in p {
            if part not in d {
                d[part] = %{}
            }
            d = d[part]
        }

        d[field] = e

        if lex.peek().type == ',' {
            lex.next()
        }
    }

    // }
    lex.next()

    convert(record)
}

function nextEnumValue(last) {
    let name = lex.next().id
    if lex.peek().type == '=' {
        lex.next()
        (name, parse.expr(0))
    } else {
        (name, ty.Add(last, ty.Int(1)))
    }
}

macro enum! {
    if lex.peek().type == '{' {
        lex.next()

        let vars = []
        let i = ty.Int(-1)

        while lex.peek().type != '}' {
            let (e, val) = nextEnumValue(i)
            vars.push(ty.Let(ty.Id(name: e), val))
            if lex.peek().type == ',' lex.next()
            i = val
        }

        lex.next()

        ty.Multi(vars)
    } else {
        let name = lex.next().id

        lex.next()

        let entries = []
        let i = ty.Int(-1)

        while lex.peek().type != '}' {
            let (e, val) = nextEnumValue(i)
            entries.push(ty.RecordEntry(item: val, name: e))
            if lex.peek().type == ',' lex.next()
            i = val
        }

        lex.next()

        ty.Let(ty.Id(name: name), ty.Record(entries))
    }
}

macro lock! {
    let mtx = parse.expr(0)
    let stmt = parse.stmt(0)
    ty.With(
        ty.Let(
            ty.Id(name: '_'),
            ty.MethodCall(object: mtx, method: 'lock', args: [])
        ),
        stmt
    )
}

operator **   10 right
operator <<   7  left
operator >>   7  left
operator ^    5  left
operator :>   5  left
operator !::  3  left
