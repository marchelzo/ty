import ffi as c (C!)

if not let $lib = c.open('libsodium') {
   throw "failed to load libsodium"
}

function wrap(*args) {
  c.wrap(lib, *args)
}

C! lib fn {
    c.int sodium_init()
    c.int crypto_pwhash_alg_default()
    c.u64 crypto_pwhash_saltbytes()
    c.u64 crypto_pwhash_strbytes()
    c.u64 crypto_pwhash_opslimit_min()
    c.u64 crypto_pwhash_opslimit_max()
    c.u64 crypto_pwhash_opslimit_interactive()
    c.u64 crypto_pwhash_memlimit_min()
    c.u64 crypto_pwhash_memlimit_max()
    c.u64 crypto_pwhash_memlimit_interactive()
    c.int crypto_pwhash(c.ptr, c.u64, c.ptr, c.u64, c.ptr, c.u64, c.u64, c.int)
    c.int crypto_pwhash_str(c.ptr, c.ptr, c.u64, c.u64, c.u64)
    c.int crypto_pwhash_str_verify(c.ptr, c.ptr, c.u64)
    c.int crypto_pwhash_str_needs_rehash(c.ptr, c.u64, c.u64)
}

sodium_init()

let salt_bytes = crypto_pwhash_saltbytes()
let str_bytes = crypto_pwhash_strbytes()

let min_ops = crypto_pwhash_opslimit_min()
let max_ops = crypto_pwhash_opslimit_max()
let interactive_ops = crypto_pwhash_opslimit_interactive()

let min_mem = crypto_pwhash_memlimit_min()
let max_mem = crypto_pwhash_memlimit_max()
let interactive_mem = crypto_pwhash_memlimit_interactive()

let default_alg = crypto_pwhash_alg_default()

pub function hash(pass: String | Blob, buf: ?Blob) -> String | nil {
  let b = buf ?? c.alloc(str_bytes)
 
  let h = match crypto_pwhash_str(
    b,
    pass, pass.size(),
    interactive_ops,
    interactive_mem
  ) {
    -1 => nil,
     0 => c.str(b, str_bytes)
  }

  if buf == nil {
    c.free(b)
  }

  return h
}

pub function verify(hash: String, pass: String | Blob) -> Bool {
  crypto_pwhash_str_verify(hash, pass, pass.size()) == 0
}
