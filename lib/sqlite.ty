import sqlite3c (..)

fn sqlite3c::open(path: String, flags: ?Int) -> _;

tag SQLiteError {
    str() -> String {
        errorMessage(self)
    }
}

class SQLiteRowIter[a] : Iter[a] {
    __stmt: SQLiteStatement[a]
    __assoc: Bool

    init(stmt, assoc=true) {
        __stmt = stmt
        __assoc = assoc
    }

    __next__() {
        Some.from(
            __stmt.nextRow(__assoc)
        )
    }
}

class SQLiteStatement[a] : Iterable[a] {
    __p: _
    __status: Int

    init(p: _) {
        __p = p
    }

    exec() -> Int {
        if __p {
            __status = ::step(__p)
            ::finalize(__p)
            __p = nil
            return __status
        } else {
            throw SQLiteError(SQLITE_MISUSE)
        }
    }

    step() -> Int {
        if __p {
            return (__status = ::step(__p))
        } else {
            throw SQLiteError(SQLITE_MISUSE)
        }
    }

    row(assoc=true) -> a | nil {
        if __p {
            if __status == SQLITE_ROW {
                return assoc ? cast(fetchAssoc(__p)) : cast(fetch(__p))
            } else {
                return nil
            }
        } else {
            throw SQLiteError(SQLITE_MISUSE)
        }
    }

    nextRow(assoc=true) -> a | nil {
        step()
        let row = row(assoc)
        if __status == SQLITE_DONE {
            finalize()
        }
        row
    }

    finalize() -> nil {
        if __p {
            __status = ::finalize(__p)
            __p = nil
            if __status != SQLITE_OK {
                throw SQLiteError(__status)
            }
        }
    }

    rows(assoc=true) -> SQLiteRowIter[a] {
        if !__p {
            throw SQLiteError(SQLITE_MISUSE)
        }
        ::reset(__p)
        return SQLiteRowIter(self, assoc)
    }

    __drop__() {
        finalize()
    }

    __iter__() {
        rows()
    }
}

pub class SQLite {
    __path: String | nil
    __db: _

    init(path: String, fullMutex: Bool = false) {
        let fullMutexFlags = SQLITE_OPEN_FULLMUTEX
                           | SQLITE_OPEN_READWRITE
                           | SQLITE_OPEN_CREATE

        if let $db = open(path, fullMutexFlags if fullMutex) {
            __db = db
            __path = path
        } else {
            throw SQLiteError(error())
        }
    }

    close() {
        if __db {
            ::close(__db)
            __db = nil
        }
    }

    fetchOne[a](*args, assoc=true) -> a {
        with q = query(*args) {
            if let $row = q.nextRow(assoc: assoc) {
                row
            }
        }
    }

    fetchAll[a](*args, assoc=true) -> [a] {
        let xs = []
        with q = query(*args) {
            while let $row = q.nextRow(assoc: assoc) {
                xs.push(row)
            }
        }
        xs
    }

    query[a](sql, *ps) -> SQLiteStatement[a] {
        if not let $s  = ::prepare(__db, sql) {
            throw SQLiteError(error(__db))
        }

        for p, i in ps {
            match ::bind(s, i + 1, p) {
                SQLITE_OK => { },
                e         => throw SQLiteError(e)
            }
        }

        return SQLiteStatement(s)
    }

    changes() -> Int {
        ::changes(__db)
    }

    totalChanges() -> Int {
        ::totalChanges(__db)
    }

    exec(sql, *ps) -> Int {
        self.query(sql, *ps).exec()
    }

    errorMessage() -> String {
        ::errorMessage(__db)
    }
}
