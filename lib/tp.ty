tag CanceledError;

class ThreadPool[*Args, T] {
  __f:        _
  __setup:    _
  queue:    Array[_]
  mtx:      Mutex
  cv:       CondVar
  stop:     Bool
  threads:  Array[Thread[_]]

  init(n: Int, f: (*Args) -> T, setup: _ = nil) {
    __f     = f
    __setup = setup
    queue   = []
    mtx     = Mutex()
    cv      = CondVar()
    stop    = false
    threads = [Thread(cast(runThread), mtx, cv, __f, __setup) for _ in ..n]
  }

  submit(*args: *Args, %kwargs: _) -> Future[T] {
    mtx.lock()

    let future = Future()

    queue.push((args, kwargs, future))

    mtx.unlock()
    cv.signal()

    return future
  }

  runThread(mtx: Mutex, cv: CondVar, f: _, setup: _ = nil) {
    let state = if setup != nil {
        (setup)()
    }

    while true {
      mtx.lock()

      while !stop && #queue == 0 {
        cv.wait(mtx)
      }

      if stop && #queue == 0 {
        mtx.unlock()
        break
      }

      let (args, kwargs, future) = queue.pop(0)

      mtx.unlock()

      future._mtx.lock()

      if future._canceled {
        future._mtx.unlock()
        continue
      } else {
        future._running = true
        future._mtx.unlock()
      }

      let x = f(*args, state if state != nil, **kwargs)

      future._mtx.lock()
      future._box.push(x)
      future._mtx.unlock()

      future._cv.signal()
    }
  }

  close() {
    mtx.lock()
    stop = true
    mtx.unlock()
    cv.broadcast()
    threads.map(&join)
  }

  __drop__() {
    close()
  }
}

class Future[T] {
  _cv:       CondVar
  _mtx:      Mutex
  _box:      Array[T]
  _running:  Bool
  _canceled: Bool

  init() {
    _cv       = CondVar()
    _mtx      = Mutex()
    _box      = []
    _running  = false
    _canceled = false
  }

  wait() {
    _mtx.lock()

    if _canceled {
      throw CanceledError
    }

    while #_box == 0 {
      _cv.wait(_mtx)
    }

    let x = _box[0]

    _mtx.unlock()

    return x
  }

  cancel() {
    with _mtx.lock() {
      if _running {
        return false
      } else {
        _canceled = true
        return true
      }
    }
  }

  running? {
    with _mtx.lock() {
      _running
    }
  }

  ready? {
    with _mtx.lock() {
      #_box == 1
    }
  }

  canceled? {
    with _mtx.lock() {
      _canceled
    }
  }

  static all(fs) {
    let xs = []

    try {
        for f in fs {
            xs.push(f.wait())
        }
    } catch CanceledError {
        return None
    }

    return Some(xs)
  }
}
