import ffi as c (C!)
import os (args)
import ptr
import help (pretty)

if not let $libxml = c.dlopen('libxml2.so') ?? c.dlopen('libxml2.dylib') ?? c.dlopen('libxml2-2.dll') {
    throw "Failed to load libxml2"
}

tag XMLError;

pub ns xpath {
    pub tag String;
    pub tag Int;
    pub tag Bool;
    pub tag NodeSet;
}

pub ns defs {
    pub const xmlError            = c.int
    pub const xmlParserErrors     = c.int
    pub const xmlParserInputState = c.int
    pub const xmlParserMode       = c.int

    pub const xmlValidityErrorFunc       = c.ptr
    pub const xmlValidityWarningFunc     = c.ptr
    pub const xmlXPathVariableLookupFunc = c.ptr
    pub const xmlXPathFuncLookupFunc     = c.ptr
    pub const xmlStructuredErrorFunc     = c.ptr

    pub const xmlSchemaValidityErrorFunc   = c.ptr
    pub const xmlSchemaValidityWarningFunc = c.ptr

    pub const xmlDictPtr           = c.ptr
    pub const xmlDocPtr            = c.ptr
    pub const xmlNodePtr           = c.ptr
    pub const xmlHashTablePtr      = c.ptr
    pub const xmlDictPtr           = c.ptr
    pub const xmlParserInputPtr    = c.ptr
    pub const xmlAttrPtr           = c.ptr
}

use defs;

enum! {
    XPATH_UNDEFINED = 0,
    XPATH_NODESET = 1,
    XPATH_BOOLEAN = 2,
    XPATH_NUMBER = 3,
    XPATH_STRING = 4,
    XPATH_POINT = 5,
    XPATH_RANGE = 6,
    XPATH_LOCATIONSET = 7,
    XPATH_USERS = 8,
    XPATH_XSLT_TREE = 9  /* An XSLT value tree, non modifiable */
}

let XML_MAX_TEXT_LENGTH = 10000000
let XML_MAX_NAME_LENGTH = 50000
let XML_MAX_DICTIONARY_LIMIT = 10000000
let XML_MAX_LOOKUP_LIMIT = 10000000
let XML_MAX_NAMELEN = 100
let XML_SUBSTITUTE_NONE = 0
let XML_SUBSTITUTE_REF = 1
let XML_SUBSTITUTE_PEREF = 2
let XML_SUBSTITUTE_BOTH = 3
let XML_PARSER_SEVERITY_VALIDITY_WARNING = 1
let XML_PARSER_SEVERITY_VALIDITY_ERROR = 2
let XML_PARSER_SEVERITY_WARNING = 3
let XML_PARSER_SEVERITY_ERROR = 4
let XML_TEXTREADER_MODE_INITIAL = 0
let XML_TEXTREADER_MODE_INTERACTIVE = 1
let XML_TEXTREADER_MODE_ERROR = 2
let XML_TEXTREADER_MODE_EOF = 3
let XML_TEXTREADER_MODE_CLOSED = 4
let XML_TEXTREADER_MODE_READING = 5
let XML_PARSER_LOADDTD = 1
let XML_PARSER_DEFAULTATTRS = 2
let XML_PARSER_VALIDATE = 3
let XML_PARSER_SUBST_ENTITIES = 4
let XML_READER_TYPE_NONE = 0
let XML_READER_TYPE_ELEMENT = 1
let XML_READER_TYPE_ATTRIBUTE = 2
let XML_READER_TYPE_TEXT = 3
let XML_READER_TYPE_CDATA = 4
let XML_READER_TYPE_ENTITY_REFERENCE = 5
let XML_READER_TYPE_ENTITY = 6
let XML_READER_TYPE_PROCESSING_INSTRUCTION = 7
let XML_READER_TYPE_COMMENT = 8
let XML_READER_TYPE_DOCUMENT = 9
let XML_READER_TYPE_DOCUMENT_TYPE = 10
let XML_READER_TYPE_DOCUMENT_FRAGMENT = 11
let XML_READER_TYPE_NOTATION = 12
let XML_READER_TYPE_WHITESPACE = 13
let XML_READER_TYPE_SIGNIFICANT_WHITESPACE = 14
let XML_READER_TYPE_END_ELEMENT = 15
let XML_READER_TYPE_END_ENTITY = 16
let XML_READER_TYPE_XML_DECLARATION = 17
let XML_RELAXNG_OK = 0
let XML_RELAXNG_ERR_MEMORY = XML_RELAXNG_OK + 1
let XML_RELAXNG_ERR_TYPE = XML_RELAXNG_ERR_MEMORY + 1
let XML_RELAXNG_ERR_TYPEVAL = XML_RELAXNG_ERR_TYPE + 1
let XML_RELAXNG_ERR_DUPID = XML_RELAXNG_ERR_TYPEVAL + 1
let XML_RELAXNG_ERR_TYPECMP = XML_RELAXNG_ERR_DUPID + 1
let XML_RELAXNG_ERR_NOSTATE = XML_RELAXNG_ERR_TYPECMP + 1
let XML_RELAXNG_ERR_NODEFINE = XML_RELAXNG_ERR_NOSTATE + 1
let XML_RELAXNG_ERR_LISTEXTRA = XML_RELAXNG_ERR_NODEFINE + 1
let XML_RELAXNG_ERR_LISTEMPTY = XML_RELAXNG_ERR_LISTEXTRA + 1
let XML_RELAXNG_ERR_INTERNODATA = XML_RELAXNG_ERR_LISTEMPTY + 1
let XML_RELAXNG_ERR_INTERSEQ = XML_RELAXNG_ERR_INTERNODATA + 1
let XML_RELAXNG_ERR_INTEREXTRA = XML_RELAXNG_ERR_INTERSEQ + 1
let XML_RELAXNG_ERR_ELEMNAME = XML_RELAXNG_ERR_INTEREXTRA + 1
let XML_RELAXNG_ERR_ATTRNAME = XML_RELAXNG_ERR_ELEMNAME + 1
let XML_RELAXNG_ERR_ELEMNONS = XML_RELAXNG_ERR_ATTRNAME + 1
let XML_RELAXNG_ERR_ATTRNONS = XML_RELAXNG_ERR_ELEMNONS + 1
let XML_RELAXNG_ERR_ELEMWRONGNS = XML_RELAXNG_ERR_ATTRNONS + 1
let XML_RELAXNG_ERR_ATTRWRONGNS = XML_RELAXNG_ERR_ELEMWRONGNS + 1
let XML_RELAXNG_ERR_ELEMEXTRANS = XML_RELAXNG_ERR_ATTRWRONGNS + 1
let XML_RELAXNG_ERR_ATTREXTRANS = XML_RELAXNG_ERR_ELEMEXTRANS + 1
let XML_RELAXNG_ERR_ELEMNOTEMPTY = XML_RELAXNG_ERR_ATTREXTRANS + 1
let XML_RELAXNG_ERR_NOELEM = XML_RELAXNG_ERR_ELEMNOTEMPTY + 1
let XML_RELAXNG_ERR_NOTELEM = XML_RELAXNG_ERR_NOELEM + 1
let XML_RELAXNG_ERR_ATTRVALID = XML_RELAXNG_ERR_NOTELEM + 1
let XML_RELAXNG_ERR_CONTENTVALID = XML_RELAXNG_ERR_ATTRVALID + 1
let XML_RELAXNG_ERR_EXTRACONTENT = XML_RELAXNG_ERR_CONTENTVALID + 1
let XML_RELAXNG_ERR_INVALIDATTR = XML_RELAXNG_ERR_EXTRACONTENT + 1
let XML_RELAXNG_ERR_DATAELEM = XML_RELAXNG_ERR_INVALIDATTR + 1
let XML_RELAXNG_ERR_VALELEM = XML_RELAXNG_ERR_DATAELEM + 1
let XML_RELAXNG_ERR_LISTELEM = XML_RELAXNG_ERR_VALELEM + 1
let XML_RELAXNG_ERR_DATATYPE = XML_RELAXNG_ERR_LISTELEM + 1
let XML_RELAXNG_ERR_VALUE = XML_RELAXNG_ERR_DATATYPE + 1
let XML_RELAXNG_ERR_LIST = XML_RELAXNG_ERR_VALUE + 1
let XML_RELAXNG_ERR_NOGRAMMAR = XML_RELAXNG_ERR_LIST + 1
let XML_RELAXNG_ERR_EXTRADATA = XML_RELAXNG_ERR_NOGRAMMAR + 1
let XML_RELAXNG_ERR_LACKDATA = XML_RELAXNG_ERR_EXTRADATA + 1
let XML_RELAXNG_ERR_INTERNAL = XML_RELAXNG_ERR_LACKDATA + 1
let XML_RELAXNG_ERR_ELEMWRONG = XML_RELAXNG_ERR_INTERNAL + 1
let XML_RELAXNG_ERR_TEXTWRONG = XML_RELAXNG_ERR_ELEMWRONG + 1
let XML_RELAXNGP_NONE = 0
let XML_RELAXNGP_FREE_DOC = 1
let XML_RELAXNGP_CRNG = 2
let XML_INTERNAL_GENERAL_ENTITY = 1
let XML_EXTERNAL_GENERAL_PARSED_ENTITY = 2
let XML_EXTERNAL_GENERAL_UNPARSED_ENTITY = 3
let XML_INTERNAL_PARAMETER_ENTITY = 4
let XML_EXTERNAL_PARAMETER_ENTITY = 5
let XML_INTERNAL_PREDEFINED_ENTITY = 6
let XML_XPATH_CHECKNS = (1<<0)
let XML_XPATH_NOVAR = (1<<1)
let XML_SCHEMA_WHITESPACE_UNKNOWN = 0
let XML_SCHEMA_WHITESPACE_PRESERVE = 1
let XML_SCHEMA_WHITESPACE_REPLACE = 2
let XML_SCHEMA_WHITESPACE_COLLAPSE = 3
let XML_DEFAULT_VERSION = "1.0"
let XML_PARSER_EOF = -1
let XML_PARSER_START = 0
let XML_PARSER_MISC = XML_PARSER_START + 1
let XML_PARSER_PI = XML_PARSER_MISC + 1
let XML_PARSER_DTD = XML_PARSER_PI + 1
let XML_PARSER_PROLOG = XML_PARSER_DTD + 1
let XML_PARSER_COMMENT = XML_PARSER_PROLOG + 1
let XML_PARSER_START_TAG = XML_PARSER_COMMENT + 1
let XML_PARSER_CONTENT = XML_PARSER_START_TAG + 1
let XML_PARSER_CDATA_SECTION = XML_PARSER_CONTENT + 1
let XML_PARSER_END_TAG = XML_PARSER_CDATA_SECTION + 1
let XML_PARSER_ENTITY_DECL = XML_PARSER_END_TAG + 1
let XML_PARSER_ENTITY_VALUE = XML_PARSER_ENTITY_DECL + 1
let XML_PARSER_ATTRIBUTE_VALUE = XML_PARSER_ENTITY_VALUE + 1
let XML_PARSER_SYSTEM_LITERAL = XML_PARSER_ATTRIBUTE_VALUE + 1
let XML_PARSER_EPILOG = XML_PARSER_SYSTEM_LITERAL + 1
let XML_PARSER_IGNORE = XML_PARSER_EPILOG + 1
let XML_PARSER_PUBLIC_LITERAL = XML_PARSER_IGNORE + 1
let XML_DETECT_IDS = 2
let XML_COMPLETE_ATTRS = 4
let XML_SKIP_IDS = 8
let XML_PARSE_UNKNOWN = 0
let XML_PARSE_DOM = 1
let XML_PARSE_SAX = 2
let XML_PARSE_PUSH_DOM = 3
let XML_PARSE_PUSH_SAX = 4
let XML_PARSE_READER = 5
let XML_SAX2_MAGIC = 0xDEEDBEAF
let XML_PARSE_RECOVER = 1<<0
let XML_PARSE_NOENT = 1<<1
let XML_PARSE_DTDLOAD = 1<<2
let XML_PARSE_DTDATTR = 1<<3
let XML_PARSE_DTDVALID = 1<<4
let XML_PARSE_NOERROR = 1<<5
let XML_PARSE_NOWARNING = 1<<6
let XML_PARSE_PEDANTIC = 1<<7
let XML_PARSE_NOBLANKS = 1<<8
let XML_PARSE_SAX1 = 1<<9
let XML_PARSE_XINCLUDE = 1<<10
let XML_PARSE_NONET = 1<<11
let XML_PARSE_NODICT = 1<<12
let XML_PARSE_NSCLEAN = 1<<13
let XML_PARSE_NOCDATA = 1<<14
let XML_PARSE_NOXINCNODE = 1<<15
let XML_PARSE_COMPACT = 1<<16
let XML_PARSE_OLD10 = 1<<17
let XML_PARSE_NOBASEFIX = 1<<18
let XML_PARSE_HUGE = 1<<19
let XML_PARSE_OLDSAX = 1<<20
let XML_PARSE_IGNORE_ENC = 1<<21
let XML_PARSE_BIG_LINES = 1<<22 /* Store big lines numbers in text PSVI field */
let XML_WITH_THREAD = 1
let XML_WITH_TREE = 2
let XML_WITH_OUTPUT = 3
let XML_WITH_PUSH = 4
let XML_WITH_READER = 5
let XML_WITH_PATTERN = 6
let XML_WITH_WRITER = 7
let XML_WITH_SAX1 = 8
let XML_WITH_FTP = 9
let XML_WITH_HTTP = 10
let XML_WITH_VALID = 11
let XML_WITH_HTML = 12
let XML_WITH_LEGACY = 13
let XML_WITH_C14N = 14
let XML_WITH_CATALOG = 15
let XML_WITH_XPATH = 16
let XML_WITH_XPTR = 17
let XML_WITH_XINCLUDE = 18
let XML_WITH_ICONV = 19
let XML_WITH_ISO8859X = 20
let XML_WITH_UNICODE = 21
let XML_WITH_REGEXP = 22
let XML_WITH_AUTOMATA = 23
let XML_WITH_EXPR = 24
let XML_WITH_SCHEMAS = 25
let XML_WITH_SCHEMATRON = 26
let XML_WITH_MODULES = 27
let XML_WITH_DEBUG = 28
let XML_WITH_DEBUG_MEM = 29
let XML_WITH_DEBUG_RUN = 30
let XML_WITH_ZLIB = 31
let XML_WITH_ICU = 32
let XML_WITH_LZMA = 33
let XML_WITH_NONE = 99999 /* just to be sure of allocation size */
let XML_BUFFER_ALLOC_DOUBLEIT = 0
let XML_BUFFER_ALLOC_EXACT = XML_BUFFER_ALLOC_DOUBLEIT + 1
let XML_BUFFER_ALLOC_IMMUTABLE = XML_BUFFER_ALLOC_EXACT + 1
let XML_BUFFER_ALLOC_IO = XML_BUFFER_ALLOC_IMMUTABLE + 1
let XML_BUFFER_ALLOC_HYBRID = XML_BUFFER_ALLOC_IO + 1
let XML_BUFFER_ALLOC_BOUNDED = XML_BUFFER_ALLOC_HYBRID + 1
let XML_XML_ID = "xml:id"
let XML_ELEMENT_NODE = 1
let XML_ATTRIBUTE_NODE = 2
let XML_TEXT_NODE = 3
let XML_CDATA_SECTION_NODE = 4
let XML_ENTITY_REF_NODE = 5
let XML_ENTITY_NODE = 6
let XML_PI_NODE = 7
let XML_COMMENT_NODE = 8
let XML_DOCUMENT_NODE = 9
let XML_DOCUMENT_TYPE_NODE = 10
let XML_DOCUMENT_FRAG_NODE = 11
let XML_NOTATION_NODE = 12
let XML_HTML_DOCUMENT_NODE = 13
let XML_DTD_NODE = 14
let XML_ELEMENT_DECL = 15
let XML_ATTRIBUTE_DECL = 16
let XML_ENTITY_DECL = 17
let XML_NAMESPACE_DECL = 18
let XML_XINCLUDE_START = 19
let XML_XINCLUDE_END = 20
let XML_ATTRIBUTE_CDATA = 1
let XML_ATTRIBUTE_ID = XML_ATTRIBUTE_CDATA + 1
let XML_ATTRIBUTE_IDREF = XML_ATTRIBUTE_ID + 1
let XML_ATTRIBUTE_IDREFS = XML_ATTRIBUTE_IDREF + 1
let XML_ATTRIBUTE_ENTITY = XML_ATTRIBUTE_IDREFS + 1
let XML_ATTRIBUTE_ENTITIES = XML_ATTRIBUTE_ENTITY + 1
let XML_ATTRIBUTE_NMTOKEN = XML_ATTRIBUTE_ENTITIES + 1
let XML_ATTRIBUTE_NMTOKENS = XML_ATTRIBUTE_NMTOKEN + 1
let XML_ATTRIBUTE_ENUMERATION = XML_ATTRIBUTE_NMTOKENS + 1
let XML_ATTRIBUTE_NOTATION = XML_ATTRIBUTE_ENUMERATION + 1
let XML_ATTRIBUTE_NONE = 1
let XML_ATTRIBUTE_REQUIRED = XML_ATTRIBUTE_NONE + 1
let XML_ATTRIBUTE_IMPLIED = XML_ATTRIBUTE_REQUIRED + 1
let XML_ATTRIBUTE_FIXED = XML_ATTRIBUTE_IMPLIED + 1
let XML_ELEMENT_CONTENT_PCDATA = 1
let XML_ELEMENT_CONTENT_ELEMENT = XML_ELEMENT_CONTENT_PCDATA + 1
let XML_ELEMENT_CONTENT_SEQ = XML_ELEMENT_CONTENT_ELEMENT + 1
let XML_ELEMENT_CONTENT_OR = XML_ELEMENT_CONTENT_SEQ + 1
let XML_ELEMENT_CONTENT_ONCE = 1
let XML_ELEMENT_CONTENT_OPT = XML_ELEMENT_CONTENT_ONCE + 1
let XML_ELEMENT_CONTENT_MULT = XML_ELEMENT_CONTENT_OPT + 1
let XML_ELEMENT_CONTENT_PLUS = XML_ELEMENT_CONTENT_MULT + 1
let XML_ELEMENT_TYPE_UNDEFINED = 0
let XML_ELEMENT_TYPE_EMPTY = 1
let XML_ELEMENT_TYPE_ANY = XML_ELEMENT_TYPE_EMPTY + 1
let XML_ELEMENT_TYPE_MIXED = XML_ELEMENT_TYPE_ANY + 1
let XML_ELEMENT_TYPE_ELEMENT = XML_ELEMENT_TYPE_MIXED + 1
let XML_LOCAL_NAMESPACE = XML_NAMESPACE_DECL
let XML_DOC_WELLFORMED = 1<<0
let XML_DOC_NSVALID = 1<<1
let XML_DOC_OLD10 = 1<<2
let XML_DOC_DTDVALID = 1<<3
let XML_DOC_XINCLUDE = 1<<4
let XML_DOC_USERBUILT = 1<<5
let XML_DOC_INTERNAL = 1<<6
let XML_DOC_HTML = 1<<7  /* parsed or built HTML document */
let XML_SAVE_FORMAT = 1<<0
let XML_SAVE_NO_DECL = 1<<1
let XML_SAVE_NO_EMPTY = 1<<2
let XML_SAVE_NO_XHTML = 1<<3
let XML_SAVE_XHTML = 1<<4
let XML_SAVE_AS_XML = 1<<5
let XML_SAVE_AS_HTML = 1<<6
let XML_SAVE_WSNONSIG = 1<<7  /* format with non-significant whitespace */
let XML_CHAR_ENCODING_ERROR = -1
let XML_CHAR_ENCODING_NONE = 0
let XML_CHAR_ENCODING_UTF8 = 1
let XML_CHAR_ENCODING_UTF16LE = 2
let XML_CHAR_ENCODING_UTF16BE = 3
let XML_CHAR_ENCODING_UCS4LE = 4
let XML_CHAR_ENCODING_UCS4BE = 5
let XML_CHAR_ENCODING_EBCDIC = 6
let XML_CHAR_ENCODING_UCS4_2143 = 7
let XML_CHAR_ENCODING_UCS4_3412 = 8
let XML_CHAR_ENCODING_UCS2 = 9
let XML_CHAR_ENCODING_8859_1 = 10
let XML_CHAR_ENCODING_8859_2 = 11
let XML_CHAR_ENCODING_8859_3 = 12
let XML_CHAR_ENCODING_8859_4 = 13
let XML_CHAR_ENCODING_8859_5 = 14
let XML_CHAR_ENCODING_8859_6 = 15
let XML_CHAR_ENCODING_8859_7 = 16
let XML_CHAR_ENCODING_8859_8 = 17
let XML_CHAR_ENCODING_8859_9 = 18
let XML_CHAR_ENCODING_2022_JP = 19
let XML_CHAR_ENCODING_SHIFT_JIS = 20
let XML_CHAR_ENCODING_EUC_JP = 21
let XML_CHAR_ENCODING_ASCII = 22 /* pure ASCII */
let XML_SCHEMAS_ERR_OK = 0
let XML_SCHEMAS_ERR_NOROOT = 1
let XML_SCHEMAS_ERR_UNDECLAREDELEM = XML_SCHEMAS_ERR_NOROOT + 1
let XML_SCHEMAS_ERR_NOTTOPLEVEL = XML_SCHEMAS_ERR_UNDECLAREDELEM + 1
let XML_SCHEMAS_ERR_MISSING = XML_SCHEMAS_ERR_NOTTOPLEVEL + 1
let XML_SCHEMAS_ERR_WRONGELEM = XML_SCHEMAS_ERR_MISSING + 1
let XML_SCHEMAS_ERR_NOTYPE = XML_SCHEMAS_ERR_WRONGELEM + 1
let XML_SCHEMAS_ERR_NOROLLBACK = XML_SCHEMAS_ERR_NOTYPE + 1
let XML_SCHEMAS_ERR_ISABSTRACT = XML_SCHEMAS_ERR_NOROLLBACK + 1
let XML_SCHEMAS_ERR_NOTEMPTY = XML_SCHEMAS_ERR_ISABSTRACT + 1
let XML_SCHEMAS_ERR_ELEMCONT = XML_SCHEMAS_ERR_NOTEMPTY + 1
let XML_SCHEMAS_ERR_HAVEDEFAULT = XML_SCHEMAS_ERR_ELEMCONT + 1
let XML_SCHEMAS_ERR_NOTNILLABLE = XML_SCHEMAS_ERR_HAVEDEFAULT + 1
let XML_SCHEMAS_ERR_EXTRACONTENT = XML_SCHEMAS_ERR_NOTNILLABLE + 1
let XML_SCHEMAS_ERR_INVALIDATTR = XML_SCHEMAS_ERR_EXTRACONTENT + 1
let XML_SCHEMAS_ERR_INVALIDELEM = XML_SCHEMAS_ERR_INVALIDATTR + 1
let XML_SCHEMAS_ERR_NOTDETERMINIST = XML_SCHEMAS_ERR_INVALIDELEM + 1
let XML_SCHEMAS_ERR_CONSTRUCT = XML_SCHEMAS_ERR_NOTDETERMINIST + 1
let XML_SCHEMAS_ERR_INTERNAL = XML_SCHEMAS_ERR_CONSTRUCT + 1
let XML_SCHEMAS_ERR_NOTSIMPLE = XML_SCHEMAS_ERR_INTERNAL + 1
let XML_SCHEMAS_ERR_ATTRUNKNOWN = XML_SCHEMAS_ERR_NOTSIMPLE + 1
let XML_SCHEMAS_ERR_ATTRINVALID = XML_SCHEMAS_ERR_ATTRUNKNOWN + 1
let XML_SCHEMAS_ERR_VALUE = XML_SCHEMAS_ERR_ATTRINVALID + 1
let XML_SCHEMAS_ERR_FACET = XML_SCHEMAS_ERR_VALUE + 1
let XML_SCHEMAS_ERR_ = XML_SCHEMAS_ERR_FACET + 1
let XML_SCHEMAS_ERR_XXX = XML_SCHEMAS_ERR_ + 1
let XML_SCHEMA_VAL_VC_I_CREATE = 1<<0
let LIBXML_DOTTED_VERSION = "2.9.10"
let LIBXML_VERSION = 20910
let LIBXML_VERSION_STRING = "20910"
let LIBXML_VERSION_EXTRA = ""
let LIBXML_MODULE_EXTENSION = ".so" 
let XML_C14N_1_0 = 0
let XML_C14N_EXCLUSIVE_1_0 = 1
let XML_C14N_1_1 = 2     /* C14N 1.1 spec */
let XML_MODULE_LAZY = 1
let XML_MODULE_LOCAL = 2		/* local binding */
let XML_SCHEMAS_UNKNOWN = 0
let XML_SCHEMAS_STRING = 1
let XML_SCHEMAS_NORMSTRING = 2
let XML_SCHEMAS_DECIMAL = 3
let XML_SCHEMAS_TIME = 4
let XML_SCHEMAS_GDAY = 5
let XML_SCHEMAS_GMONTH = 6
let XML_SCHEMAS_GMONTHDAY = 7
let XML_SCHEMAS_GYEAR = 8
let XML_SCHEMAS_GYEARMONTH = 9
let XML_SCHEMAS_DATE = 10
let XML_SCHEMAS_DATETIME = 11
let XML_SCHEMAS_DURATION = 12
let XML_SCHEMAS_FLOAT = 13
let XML_SCHEMAS_DOUBLE = 14
let XML_SCHEMAS_BOOLEAN = 15
let XML_SCHEMAS_TOKEN = 16
let XML_SCHEMAS_LANGUAGE = 17
let XML_SCHEMAS_NMTOKEN = 18
let XML_SCHEMAS_NMTOKENS = 19
let XML_SCHEMAS_NAME = 20
let XML_SCHEMAS_QNAME = 21
let XML_SCHEMAS_NCNAME = 22
let XML_SCHEMAS_ID = 23
let XML_SCHEMAS_IDREF = 24
let XML_SCHEMAS_IDREFS = 25
let XML_SCHEMAS_ENTITY = 26
let XML_SCHEMAS_ENTITIES = 27
let XML_SCHEMAS_NOTATION = 28
let XML_SCHEMAS_ANYURI = 29
let XML_SCHEMAS_INTEGER = 30
let XML_SCHEMAS_NPINTEGER = 31
let XML_SCHEMAS_NINTEGER = 32
let XML_SCHEMAS_NNINTEGER = 33
let XML_SCHEMAS_PINTEGER = 34
let XML_SCHEMAS_INT = 35
let XML_SCHEMAS_UINT = 36
let XML_SCHEMAS_LONG = 37
let XML_SCHEMAS_ULONG = 38
let XML_SCHEMAS_SHORT = 39
let XML_SCHEMAS_USHORT = 40
let XML_SCHEMAS_BYTE = 41
let XML_SCHEMAS_UBYTE = 42
let XML_SCHEMAS_HEXBINARY = 43
let XML_SCHEMAS_BASE64BINARY = 44
let XML_SCHEMAS_ANYTYPE = 45
let XML_SCHEMAS_ANYSIMPLETYPE = 46
let XML_SCHEMA_TYPE_BASIC = 1
let XML_SCHEMA_TYPE_ANY = XML_SCHEMA_TYPE_BASIC + 1
let XML_SCHEMA_TYPE_FACET = XML_SCHEMA_TYPE_ANY + 1
let XML_SCHEMA_TYPE_SIMPLE = XML_SCHEMA_TYPE_FACET + 1
let XML_SCHEMA_TYPE_COMPLEX = XML_SCHEMA_TYPE_SIMPLE + 1
let XML_SCHEMA_TYPE_SEQUENCE = 6
let XML_SCHEMA_TYPE_CHOICE = XML_SCHEMA_TYPE_SEQUENCE + 1
let XML_SCHEMA_TYPE_ALL = XML_SCHEMA_TYPE_CHOICE + 1
let XML_SCHEMA_TYPE_SIMPLE_CONTENT = XML_SCHEMA_TYPE_ALL + 1
let XML_SCHEMA_TYPE_COMPLEX_CONTENT = XML_SCHEMA_TYPE_SIMPLE_CONTENT + 1
let XML_SCHEMA_TYPE_UR = XML_SCHEMA_TYPE_COMPLEX_CONTENT + 1
let XML_SCHEMA_TYPE_RESTRICTION = XML_SCHEMA_TYPE_UR + 1
let XML_SCHEMA_TYPE_EXTENSION = XML_SCHEMA_TYPE_RESTRICTION + 1
let XML_SCHEMA_TYPE_ELEMENT = XML_SCHEMA_TYPE_EXTENSION + 1
let XML_SCHEMA_TYPE_ATTRIBUTE = XML_SCHEMA_TYPE_ELEMENT + 1
let XML_SCHEMA_TYPE_ATTRIBUTEGROUP = XML_SCHEMA_TYPE_ATTRIBUTE + 1
let XML_SCHEMA_TYPE_GROUP = XML_SCHEMA_TYPE_ATTRIBUTEGROUP + 1
let XML_SCHEMA_TYPE_NOTATION = XML_SCHEMA_TYPE_GROUP + 1
let XML_SCHEMA_TYPE_LIST = XML_SCHEMA_TYPE_NOTATION + 1
let XML_SCHEMA_TYPE_UNION = XML_SCHEMA_TYPE_LIST + 1
let XML_SCHEMA_TYPE_ANY_ATTRIBUTE = XML_SCHEMA_TYPE_UNION + 1
let XML_SCHEMA_TYPE_IDC_UNIQUE = XML_SCHEMA_TYPE_ANY_ATTRIBUTE + 1
let XML_SCHEMA_TYPE_IDC_KEY = XML_SCHEMA_TYPE_IDC_UNIQUE + 1
let XML_SCHEMA_TYPE_IDC_KEYREF = XML_SCHEMA_TYPE_IDC_KEY + 1
let XML_SCHEMA_TYPE_PARTICLE = 25
let XML_SCHEMA_TYPE_ATTRIBUTE_USE = XML_SCHEMA_TYPE_PARTICLE + 1
let XML_SCHEMA_FACET_MININCLUSIVE = 1000
let XML_SCHEMA_FACET_MINEXCLUSIVE = XML_SCHEMA_FACET_MININCLUSIVE + 1
let XML_SCHEMA_FACET_MAXINCLUSIVE = XML_SCHEMA_FACET_MINEXCLUSIVE + 1
let XML_SCHEMA_FACET_MAXEXCLUSIVE = XML_SCHEMA_FACET_MAXINCLUSIVE + 1
let XML_SCHEMA_FACET_TOTALDIGITS = XML_SCHEMA_FACET_MAXEXCLUSIVE + 1
let XML_SCHEMA_FACET_FRACTIONDIGITS = XML_SCHEMA_FACET_TOTALDIGITS + 1
let XML_SCHEMA_FACET_PATTERN = XML_SCHEMA_FACET_FRACTIONDIGITS + 1
let XML_SCHEMA_FACET_ENUMERATION = XML_SCHEMA_FACET_PATTERN + 1
let XML_SCHEMA_FACET_WHITESPACE = XML_SCHEMA_FACET_ENUMERATION + 1
let XML_SCHEMA_FACET_LENGTH = XML_SCHEMA_FACET_WHITESPACE + 1
let XML_SCHEMA_FACET_MAXLENGTH = XML_SCHEMA_FACET_LENGTH + 1
let XML_SCHEMA_FACET_MINLENGTH = XML_SCHEMA_FACET_MAXLENGTH + 1
let XML_SCHEMA_EXTRA_QNAMEREF = 2000
let XML_SCHEMA_EXTRA_ATTR_USE_PROHIB = XML_SCHEMA_EXTRA_QNAMEREF + 1
let XML_SCHEMA_CONTENT_UNKNOWN = 0
let XML_SCHEMA_CONTENT_EMPTY = 1
let XML_SCHEMA_CONTENT_ELEMENTS = XML_SCHEMA_CONTENT_EMPTY + 1
let XML_SCHEMA_CONTENT_MIXED = XML_SCHEMA_CONTENT_ELEMENTS + 1
let XML_SCHEMA_CONTENT_SIMPLE = XML_SCHEMA_CONTENT_MIXED + 1
let XML_SCHEMA_CONTENT_MIXED_OR_ELEMENTS = XML_SCHEMA_CONTENT_SIMPLE + 1
let XML_SCHEMA_CONTENT_BASIC = XML_SCHEMA_CONTENT_MIXED_OR_ELEMENTS + 1
let XML_SCHEMA_CONTENT_ANY = XML_SCHEMA_CONTENT_BASIC + 1
let XML_SCHEMAS_ANYATTR_SKIP = 1
let XML_SCHEMAS_ANYATTR_LAX = 2
let XML_SCHEMAS_ANYATTR_STRICT = 3
let XML_SCHEMAS_ANY_SKIP = 1
let XML_SCHEMAS_ANY_LAX = 2
let XML_SCHEMAS_ANY_STRICT = 3
let XML_SCHEMAS_ATTR_USE_PROHIBITED = 0
let XML_SCHEMAS_ATTR_USE_REQUIRED = 1
let XML_SCHEMAS_ATTR_USE_OPTIONAL = 2
let XML_SCHEMAS_ATTR_GLOBAL = 1 << 0
let XML_SCHEMAS_ATTR_NSDEFAULT = 1 << 7
let XML_SCHEMAS_ATTR_INTERNAL_RESOLVED = 1 << 8
let XML_SCHEMAS_ATTR_FIXED = 1 << 9
let XML_SCHEMAS_WILDCARD_COMPLETE = 1 << 0
let XML_SCHEMAS_ATTRGROUP_WILDCARD_BUILDED = 1 << 0
let XML_SCHEMAS_ATTRGROUP_GLOBAL = 1 << 1
let XML_SCHEMAS_ATTRGROUP_MARKED = 1 << 2
let XML_SCHEMAS_ATTRGROUP_REDEFINED = 1 << 3
let XML_SCHEMAS_ATTRGROUP_HAS_REFS = 1 << 4
let XML_SCHEMAS_TYPE_MIXED = 1 << 0
let XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION = 1 << 1
let XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION = 1 << 2
let XML_SCHEMAS_TYPE_GLOBAL = 1 << 3
let XML_SCHEMAS_TYPE_OWNED_ATTR_WILDCARD = 1 << 4 /* Obsolete. */
let XML_SCHEMAS_TYPE_VARIETY_ABSENT = 1 << 5
let XML_SCHEMAS_TYPE_VARIETY_LIST = 1 << 6
let XML_SCHEMAS_TYPE_VARIETY_UNION = 1 << 7
let XML_SCHEMAS_TYPE_VARIETY_ATOMIC = 1 << 8
let XML_SCHEMAS_TYPE_FINAL_EXTENSION = 1 << 9
let XML_SCHEMAS_TYPE_FINAL_RESTRICTION = 1 << 10
let XML_SCHEMAS_TYPE_FINAL_LIST = 1 << 11
let XML_SCHEMAS_TYPE_FINAL_UNION = 1 << 12
let XML_SCHEMAS_TYPE_FINAL_DEFAULT = 1 << 13
let XML_SCHEMAS_TYPE_BUILTIN_PRIMITIVE = 1 << 14
let XML_SCHEMAS_TYPE_MARKED = 1 << 16
let XML_SCHEMAS_TYPE_BLOCK_DEFAULT = 1 << 17
let XML_SCHEMAS_TYPE_BLOCK_EXTENSION = 1 << 18
let XML_SCHEMAS_TYPE_BLOCK_RESTRICTION = 1 << 19
let XML_SCHEMAS_TYPE_ABSTRACT = 1 << 20
let XML_SCHEMAS_TYPE_FACETSNEEDVALUE = 1 << 21
let XML_SCHEMAS_TYPE_INTERNAL_RESOLVED = 1 << 22
let XML_SCHEMAS_TYPE_INTERNAL_INVALID = 1 << 23
let XML_SCHEMAS_TYPE_WHITESPACE_PRESERVE = 1 << 24
let XML_SCHEMAS_TYPE_WHITESPACE_REPLACE = 1 << 25
let XML_SCHEMAS_TYPE_WHITESPACE_COLLAPSE = 1 << 26
let XML_SCHEMAS_TYPE_HAS_FACETS = 1 << 27
let XML_SCHEMAS_TYPE_NORMVALUENEEDED = 1 << 28
let XML_SCHEMAS_TYPE_FIXUP_1 = 1 << 29
let XML_SCHEMAS_TYPE_REDEFINED = 1 << 30
let XML_SCHEMAS_TYPE_REDEFINING = 1 << 31
let XML_SCHEMAS_ELEM_NILLABLE = 1 << 0
let XML_SCHEMAS_ELEM_GLOBAL = 1 << 1
let XML_SCHEMAS_ELEM_DEFAULT = 1 << 2
let XML_SCHEMAS_ELEM_FIXED = 1 << 3
let XML_SCHEMAS_ELEM_ABSTRACT = 1 << 4
let XML_SCHEMAS_ELEM_TOPLEVEL = 1 << 5
let XML_SCHEMAS_ELEM_REF = 1 << 6
let XML_SCHEMAS_ELEM_NSDEFAULT = 1 << 7
let XML_SCHEMAS_ELEM_INTERNAL_RESOLVED = 1 << 8
let XML_SCHEMAS_ELEM_CIRCULAR = 1 << 9
let XML_SCHEMAS_ELEM_BLOCK_ABSENT = 1 << 10
let XML_SCHEMAS_ELEM_BLOCK_EXTENSION = 1 << 11
let XML_SCHEMAS_ELEM_BLOCK_RESTRICTION = 1 << 12
let XML_SCHEMAS_ELEM_BLOCK_SUBSTITUTION = 1 << 13
let XML_SCHEMAS_ELEM_FINAL_ABSENT = 1 << 14
let XML_SCHEMAS_ELEM_FINAL_EXTENSION = 1 << 15
let XML_SCHEMAS_ELEM_FINAL_RESTRICTION = 1 << 16
let XML_SCHEMAS_ELEM_SUBST_GROUP_HEAD = 1 << 17
let XML_SCHEMAS_ELEM_INTERNAL_CHECKED = 1 << 18
let XML_SCHEMAS_FACET_UNKNOWN = 0
let XML_SCHEMAS_FACET_PRESERVE = 1
let XML_SCHEMAS_FACET_REPLACE = 2
let XML_SCHEMAS_FACET_COLLAPSE = 3
let XML_SCHEMAS_QUALIF_ELEM = 1 << 0
let XML_SCHEMAS_QUALIF_ATTR = 1 << 1
let XML_SCHEMAS_FINAL_DEFAULT_EXTENSION = 1 << 2
let XML_SCHEMAS_FINAL_DEFAULT_RESTRICTION = 1 << 3
let XML_SCHEMAS_FINAL_DEFAULT_LIST = 1 << 4
let XML_SCHEMAS_FINAL_DEFAULT_UNION = 1 << 5
let XML_SCHEMAS_BLOCK_DEFAULT_EXTENSION = 1 << 6
let XML_SCHEMAS_BLOCK_DEFAULT_RESTRICTION = 1 << 7
let XML_SCHEMAS_BLOCK_DEFAULT_SUBSTITUTION = 1 << 8
let XML_SCHEMAS_INCLUDING_CONVERT_NS = 1 << 9
let XML_CTXT_FINISH_DTD_0 = 0xabcd1234
let XML_CTXT_FINISH_DTD_1 = 0xabcd1235
let XML_PATTERN_DEFAULT = 0
let XML_PATTERN_XPATH = 1<<0
let XML_PATTERN_XSSEL = 1<<1
let XML_PATTERN_XSFIELD = 1<<2	/* XPath subset for schema field */
let XML_SCHEMATRON_OUT_QUIET = 1 << 0
let XML_SCHEMATRON_OUT_TEXT = 1 << 1
let XML_SCHEMATRON_OUT_XML = 1 << 2
let XML_SCHEMATRON_OUT_ERROR = 1 << 3
let XML_SCHEMATRON_OUT_FILE = 1 << 8
let XML_SCHEMATRON_OUT_BUFFER = 1 << 9
let XML_SCHEMATRON_OUT_IO = 1 << 10	/* output to I/O mechanism */
let XINCLUDE_PARSE_XML = "xml"
let XML_ERR_NONE = 0
let XML_ERR_WARNING = 1
let XML_ERR_ERROR = 2
let XML_ERR_FATAL = 3		/* A fatal error */
let XML_FROM_NONE = 0
let XML_FROM_PARSER = XML_FROM_NONE + 1
let XML_FROM_TREE = XML_FROM_PARSER + 1
let XML_FROM_NAMESPACE = XML_FROM_TREE + 1
let XML_FROM_DTD = XML_FROM_NAMESPACE + 1
let XML_FROM_HTML = XML_FROM_DTD + 1
let XML_FROM_MEMORY = XML_FROM_HTML + 1
let XML_FROM_OUTPUT = XML_FROM_MEMORY + 1
let XML_FROM_IO = XML_FROM_OUTPUT + 1
let XML_FROM_FTP = XML_FROM_IO + 1
let XML_FROM_HTTP = XML_FROM_FTP + 1
let XML_FROM_XINCLUDE = XML_FROM_HTTP + 1
let XML_FROM_XPATH = XML_FROM_XINCLUDE + 1
let XML_FROM_XPOINTER = XML_FROM_XPATH + 1
let XML_FROM_REGEXP = XML_FROM_XPOINTER + 1
let XML_FROM_DATATYPE = XML_FROM_REGEXP + 1
let XML_FROM_SCHEMASP = XML_FROM_DATATYPE + 1
let XML_FROM_SCHEMASV = XML_FROM_SCHEMASP + 1
let XML_FROM_RELAXNGP = XML_FROM_SCHEMASV + 1
let XML_FROM_RELAXNGV = XML_FROM_RELAXNGP + 1
let XML_FROM_CATALOG = XML_FROM_RELAXNGV + 1
let XML_FROM_C14N = XML_FROM_CATALOG + 1
let XML_FROM_XSLT = XML_FROM_C14N + 1
let XML_FROM_VALID = XML_FROM_XSLT + 1
let XML_FROM_CHECK = XML_FROM_VALID + 1
let XML_FROM_WRITER = XML_FROM_CHECK + 1
let XML_FROM_MODULE = XML_FROM_WRITER + 1
let XML_FROM_I18N = XML_FROM_MODULE + 1
let XML_FROM_SCHEMATRONV = XML_FROM_I18N + 1
let XML_FROM_BUFFER = XML_FROM_SCHEMATRONV + 1
let XML_FROM_URI = XML_FROM_BUFFER + 1
let XML_ERR_OK = 0
let XML_ERR_INTERNAL_ERROR = XML_ERR_OK + 1
let XML_ERR_NO_MEMORY = XML_ERR_INTERNAL_ERROR + 1
let XML_ERR_DOCUMENT_START = XML_ERR_NO_MEMORY + 1
let XML_ERR_DOCUMENT_EMPTY = XML_ERR_DOCUMENT_START + 1
let XML_ERR_DOCUMENT_END = XML_ERR_DOCUMENT_EMPTY + 1
let XML_ERR_INVALID_HEX_CHARREF = XML_ERR_DOCUMENT_END + 1
let XML_ERR_INVALID_DEC_CHARREF = XML_ERR_INVALID_HEX_CHARREF + 1
let XML_ERR_INVALID_CHARREF = XML_ERR_INVALID_DEC_CHARREF + 1
let XML_ERR_INVALID_CHAR = XML_ERR_INVALID_CHARREF + 1
let XML_ERR_CHARREF_AT_EOF = XML_ERR_INVALID_CHAR + 1
let XML_ERR_CHARREF_IN_PROLOG = XML_ERR_CHARREF_AT_EOF + 1
let XML_ERR_CHARREF_IN_EPILOG = XML_ERR_CHARREF_IN_PROLOG + 1
let XML_ERR_CHARREF_IN_DTD = XML_ERR_CHARREF_IN_EPILOG + 1
let XML_ERR_ENTITYREF_AT_EOF = XML_ERR_CHARREF_IN_DTD + 1
let XML_ERR_ENTITYREF_IN_PROLOG = XML_ERR_ENTITYREF_AT_EOF + 1
let XML_ERR_ENTITYREF_IN_EPILOG = XML_ERR_ENTITYREF_IN_PROLOG + 1
let XML_ERR_ENTITYREF_IN_DTD = XML_ERR_ENTITYREF_IN_EPILOG + 1
let XML_ERR_PEREF_AT_EOF = XML_ERR_ENTITYREF_IN_DTD + 1
let XML_ERR_PEREF_IN_PROLOG = XML_ERR_PEREF_AT_EOF + 1
let XML_ERR_PEREF_IN_EPILOG = XML_ERR_PEREF_IN_PROLOG + 1
let XML_ERR_PEREF_IN_INT_SUBSET = XML_ERR_PEREF_IN_EPILOG + 1
let XML_ERR_ENTITYREF_NO_NAME = XML_ERR_PEREF_IN_INT_SUBSET + 1
let XML_ERR_ENTITYREF_SEMICOL_MISSING = XML_ERR_ENTITYREF_NO_NAME + 1
let XML_ERR_PEREF_NO_NAME = XML_ERR_ENTITYREF_SEMICOL_MISSING + 1
let XML_ERR_PEREF_SEMICOL_MISSING = XML_ERR_PEREF_NO_NAME + 1
let XML_ERR_UNDECLARED_ENTITY = XML_ERR_PEREF_SEMICOL_MISSING + 1
let XML_WAR_UNDECLARED_ENTITY = XML_ERR_UNDECLARED_ENTITY + 1
let XML_ERR_UNPARSED_ENTITY = XML_WAR_UNDECLARED_ENTITY + 1
let XML_ERR_ENTITY_IS_EXTERNAL = XML_ERR_UNPARSED_ENTITY + 1
let XML_ERR_ENTITY_IS_PARAMETER = XML_ERR_ENTITY_IS_EXTERNAL + 1
let XML_ERR_UNKNOWN_ENCODING = XML_ERR_ENTITY_IS_PARAMETER + 1
let XML_ERR_UNSUPPORTED_ENCODING = XML_ERR_UNKNOWN_ENCODING + 1
let XML_ERR_STRING_NOT_STARTED = XML_ERR_UNSUPPORTED_ENCODING + 1
let XML_ERR_STRING_NOT_CLOSED = XML_ERR_STRING_NOT_STARTED + 1
let XML_ERR_NS_DECL_ERROR = XML_ERR_STRING_NOT_CLOSED + 1
let XML_ERR_ENTITY_NOT_STARTED = XML_ERR_NS_DECL_ERROR + 1
let XML_ERR_ENTITY_NOT_FINISHED = XML_ERR_ENTITY_NOT_STARTED + 1
let XML_ERR_LT_IN_ATTRIBUTE = XML_ERR_ENTITY_NOT_FINISHED + 1
let XML_ERR_ATTRIBUTE_NOT_STARTED = XML_ERR_LT_IN_ATTRIBUTE + 1
let XML_ERR_ATTRIBUTE_NOT_FINISHED = XML_ERR_ATTRIBUTE_NOT_STARTED + 1
let XML_ERR_ATTRIBUTE_WITHOUT_VALUE = XML_ERR_ATTRIBUTE_NOT_FINISHED + 1
let XML_ERR_ATTRIBUTE_REDEFINED = XML_ERR_ATTRIBUTE_WITHOUT_VALUE + 1
let XML_ERR_LITERAL_NOT_STARTED = XML_ERR_ATTRIBUTE_REDEFINED + 1
let XML_ERR_LITERAL_NOT_FINISHED = XML_ERR_LITERAL_NOT_STARTED + 1
let XML_ERR_COMMENT_NOT_FINISHED = XML_ERR_LITERAL_NOT_FINISHED + 1
let XML_ERR_PI_NOT_STARTED = XML_ERR_COMMENT_NOT_FINISHED + 1
let XML_ERR_PI_NOT_FINISHED = XML_ERR_PI_NOT_STARTED + 1
let XML_ERR_NOTATION_NOT_STARTED = XML_ERR_PI_NOT_FINISHED + 1
let XML_ERR_NOTATION_NOT_FINISHED = XML_ERR_NOTATION_NOT_STARTED + 1
let XML_ERR_ATTLIST_NOT_STARTED = XML_ERR_NOTATION_NOT_FINISHED + 1
let XML_ERR_ATTLIST_NOT_FINISHED = XML_ERR_ATTLIST_NOT_STARTED + 1
let XML_ERR_MIXED_NOT_STARTED = XML_ERR_ATTLIST_NOT_FINISHED + 1
let XML_ERR_MIXED_NOT_FINISHED = XML_ERR_MIXED_NOT_STARTED + 1
let XML_ERR_ELEMCONTENT_NOT_STARTED = XML_ERR_MIXED_NOT_FINISHED + 1
let XML_ERR_ELEMCONTENT_NOT_FINISHED = XML_ERR_ELEMCONTENT_NOT_STARTED + 1
let XML_ERR_XMLDECL_NOT_STARTED = XML_ERR_ELEMCONTENT_NOT_FINISHED + 1
let XML_ERR_XMLDECL_NOT_FINISHED = XML_ERR_XMLDECL_NOT_STARTED + 1
let XML_ERR_CONDSEC_NOT_STARTED = XML_ERR_XMLDECL_NOT_FINISHED + 1
let XML_ERR_CONDSEC_NOT_FINISHED = XML_ERR_CONDSEC_NOT_STARTED + 1
let XML_ERR_EXT_SUBSET_NOT_FINISHED = XML_ERR_CONDSEC_NOT_FINISHED + 1
let XML_ERR_DOCTYPE_NOT_FINISHED = XML_ERR_EXT_SUBSET_NOT_FINISHED + 1
let XML_ERR_MISPLACED_CDATA_END = XML_ERR_DOCTYPE_NOT_FINISHED + 1
let XML_ERR_CDATA_NOT_FINISHED = XML_ERR_MISPLACED_CDATA_END + 1
let XML_ERR_RESERVED_XML_NAME = XML_ERR_CDATA_NOT_FINISHED + 1
let XML_ERR_SPACE_REQUIRED = XML_ERR_RESERVED_XML_NAME + 1
let XML_ERR_SEPARATOR_REQUIRED = XML_ERR_SPACE_REQUIRED + 1
let XML_ERR_NMTOKEN_REQUIRED = XML_ERR_SEPARATOR_REQUIRED + 1
let XML_ERR_NAME_REQUIRED = XML_ERR_NMTOKEN_REQUIRED + 1
let XML_ERR_PCDATA_REQUIRED = XML_ERR_NAME_REQUIRED + 1
let XML_ERR_URI_REQUIRED = XML_ERR_PCDATA_REQUIRED + 1
let XML_ERR_PUBID_REQUIRED = XML_ERR_URI_REQUIRED + 1
let XML_ERR_LT_REQUIRED = XML_ERR_PUBID_REQUIRED + 1
let XML_ERR_GT_REQUIRED = XML_ERR_LT_REQUIRED + 1
let XML_ERR_LTSLASH_REQUIRED = XML_ERR_GT_REQUIRED + 1
let XML_ERR_EQUAL_REQUIRED = XML_ERR_LTSLASH_REQUIRED + 1
let XML_ERR_TAG_NAME_MISMATCH = XML_ERR_EQUAL_REQUIRED + 1
let XML_ERR_TAG_NOT_FINISHED = XML_ERR_TAG_NAME_MISMATCH + 1
let XML_ERR_STANDALONE_VALUE = XML_ERR_TAG_NOT_FINISHED + 1
let XML_ERR_ENCODING_NAME = XML_ERR_STANDALONE_VALUE + 1
let XML_ERR_HYPHEN_IN_COMMENT = XML_ERR_ENCODING_NAME + 1
let XML_ERR_INVALID_ENCODING = XML_ERR_HYPHEN_IN_COMMENT + 1
let XML_ERR_EXT_ENTITY_STANDALONE = XML_ERR_INVALID_ENCODING + 1
let XML_ERR_CONDSEC_INVALID = XML_ERR_EXT_ENTITY_STANDALONE + 1
let XML_ERR_VALUE_REQUIRED = XML_ERR_CONDSEC_INVALID + 1
let XML_ERR_NOT_WELL_BALANCED = XML_ERR_VALUE_REQUIRED + 1
let XML_ERR_EXTRA_CONTENT = XML_ERR_NOT_WELL_BALANCED + 1
let XML_ERR_ENTITY_CHAR_ERROR = XML_ERR_EXTRA_CONTENT + 1
let XML_ERR_ENTITY_PE_INTERNAL = XML_ERR_ENTITY_CHAR_ERROR + 1
let XML_ERR_ENTITY_LOOP = XML_ERR_ENTITY_PE_INTERNAL + 1
let XML_ERR_ENTITY_BOUNDARY = XML_ERR_ENTITY_LOOP + 1
let XML_ERR_INVALID_URI = XML_ERR_ENTITY_BOUNDARY + 1
let XML_ERR_URI_FRAGMENT = XML_ERR_INVALID_URI + 1
let XML_WAR_CATALOG_PI = XML_ERR_URI_FRAGMENT + 1
let XML_ERR_NO_DTD = XML_WAR_CATALOG_PI + 1
let XML_ERR_CONDSEC_INVALID_KEYWORD = XML_ERR_NO_DTD + 1
let XML_ERR_VERSION_MISSING = XML_ERR_CONDSEC_INVALID_KEYWORD + 1
let XML_WAR_UNKNOWN_VERSION = XML_ERR_VERSION_MISSING + 1
let XML_WAR_LANG_VALUE = XML_WAR_UNKNOWN_VERSION + 1
let XML_WAR_NS_URI = XML_WAR_LANG_VALUE + 1
let XML_WAR_NS_URI_RELATIVE = XML_WAR_NS_URI + 1
let XML_ERR_MISSING_ENCODING = XML_WAR_NS_URI_RELATIVE + 1
let XML_WAR_SPACE_VALUE = XML_ERR_MISSING_ENCODING + 1
let XML_ERR_NOT_STANDALONE = XML_WAR_SPACE_VALUE + 1
let XML_ERR_ENTITY_PROCESSING = XML_ERR_NOT_STANDALONE + 1
let XML_ERR_NOTATION_PROCESSING = XML_ERR_ENTITY_PROCESSING + 1
let XML_WAR_NS_COLUMN = XML_ERR_NOTATION_PROCESSING + 1
let XML_WAR_ENTITY_REDEFINED = XML_WAR_NS_COLUMN + 1
let XML_ERR_UNKNOWN_VERSION = XML_WAR_ENTITY_REDEFINED + 1
let XML_ERR_VERSION_MISMATCH = XML_ERR_UNKNOWN_VERSION + 1
let XML_ERR_NAME_TOO_LONG = XML_ERR_VERSION_MISMATCH + 1
let XML_ERR_USER_STOP = XML_ERR_NAME_TOO_LONG + 1
let XML_NS_ERR_XML_NAMESPACE = 200
let XML_NS_ERR_UNDEFINED_NAMESPACE = XML_NS_ERR_XML_NAMESPACE + 1
let XML_NS_ERR_QNAME = XML_NS_ERR_UNDEFINED_NAMESPACE + 1
let XML_NS_ERR_ATTRIBUTE_REDEFINED = XML_NS_ERR_QNAME + 1
let XML_NS_ERR_EMPTY = XML_NS_ERR_ATTRIBUTE_REDEFINED + 1
let XML_NS_ERR_COLON = XML_NS_ERR_EMPTY + 1
let XML_DTD_ATTRIBUTE_DEFAULT = 500
let XML_DTD_ATTRIBUTE_REDEFINED = XML_DTD_ATTRIBUTE_DEFAULT + 1
let XML_DTD_ATTRIBUTE_VALUE = XML_DTD_ATTRIBUTE_REDEFINED + 1
let XML_DTD_CONTENT_ERROR = XML_DTD_ATTRIBUTE_VALUE + 1
let XML_DTD_CONTENT_MODEL = XML_DTD_CONTENT_ERROR + 1
let XML_DTD_CONTENT_NOT_DETERMINIST = XML_DTD_CONTENT_MODEL + 1
let XML_DTD_DIFFERENT_PREFIX = XML_DTD_CONTENT_NOT_DETERMINIST + 1
let XML_DTD_ELEM_DEFAULT_NAMESPACE = XML_DTD_DIFFERENT_PREFIX + 1
let XML_DTD_ELEM_NAMESPACE = XML_DTD_ELEM_DEFAULT_NAMESPACE + 1
let XML_DTD_ELEM_REDEFINED = XML_DTD_ELEM_NAMESPACE + 1
let XML_DTD_EMPTY_NOTATION = XML_DTD_ELEM_REDEFINED + 1
let XML_DTD_ENTITY_TYPE = XML_DTD_EMPTY_NOTATION + 1
let XML_DTD_ID_FIXED = XML_DTD_ENTITY_TYPE + 1
let XML_DTD_ID_REDEFINED = XML_DTD_ID_FIXED + 1
let XML_DTD_ID_SUBSET = XML_DTD_ID_REDEFINED + 1
let XML_DTD_INVALID_CHILD = XML_DTD_ID_SUBSET + 1
let XML_DTD_INVALID_DEFAULT = XML_DTD_INVALID_CHILD + 1
let XML_DTD_LOAD_ERROR = XML_DTD_INVALID_DEFAULT + 1
let XML_DTD_MISSING_ATTRIBUTE = XML_DTD_LOAD_ERROR + 1
let XML_DTD_MIXED_CORRUPT = XML_DTD_MISSING_ATTRIBUTE + 1
let XML_DTD_MULTIPLE_ID = XML_DTD_MIXED_CORRUPT + 1
let XML_DTD_NO_DOC = XML_DTD_MULTIPLE_ID + 1
let XML_DTD_NO_DTD = XML_DTD_NO_DOC + 1
let XML_DTD_NO_ELEM_NAME = XML_DTD_NO_DTD + 1
let XML_DTD_NO_PREFIX = XML_DTD_NO_ELEM_NAME + 1
let XML_DTD_NO_ROOT = XML_DTD_NO_PREFIX + 1
let XML_DTD_NOTATION_REDEFINED = XML_DTD_NO_ROOT + 1
let XML_DTD_NOTATION_VALUE = XML_DTD_NOTATION_REDEFINED + 1
let XML_DTD_NOT_EMPTY = XML_DTD_NOTATION_VALUE + 1
let XML_DTD_NOT_PCDATA = XML_DTD_NOT_EMPTY + 1
let XML_DTD_NOT_STANDALONE = XML_DTD_NOT_PCDATA + 1
let XML_DTD_ROOT_NAME = XML_DTD_NOT_STANDALONE + 1
let XML_DTD_STANDALONE_WHITE_SPACE = XML_DTD_ROOT_NAME + 1
let XML_DTD_UNKNOWN_ATTRIBUTE = XML_DTD_STANDALONE_WHITE_SPACE + 1
let XML_DTD_UNKNOWN_ELEM = XML_DTD_UNKNOWN_ATTRIBUTE + 1
let XML_DTD_UNKNOWN_ENTITY = XML_DTD_UNKNOWN_ELEM + 1
let XML_DTD_UNKNOWN_ID = XML_DTD_UNKNOWN_ENTITY + 1
let XML_DTD_UNKNOWN_NOTATION = XML_DTD_UNKNOWN_ID + 1
let XML_DTD_STANDALONE_DEFAULTED = XML_DTD_UNKNOWN_NOTATION + 1
let XML_DTD_XMLID_VALUE = XML_DTD_STANDALONE_DEFAULTED + 1
let XML_DTD_XMLID_TYPE = XML_DTD_XMLID_VALUE + 1
let XML_DTD_DUP_TOKEN = XML_DTD_XMLID_TYPE + 1
let XML_HTML_STRUCURE_ERROR = 800
let XML_HTML_UNKNOWN_TAG = XML_HTML_STRUCURE_ERROR + 1
let XML_RNGP_ANYNAME_ATTR_ANCESTOR = 1000
let XML_RNGP_ATTR_CONFLICT = XML_RNGP_ANYNAME_ATTR_ANCESTOR + 1
let XML_RNGP_ATTRIBUTE_CHILDREN = XML_RNGP_ATTR_CONFLICT + 1
let XML_RNGP_ATTRIBUTE_CONTENT = XML_RNGP_ATTRIBUTE_CHILDREN + 1
let XML_RNGP_ATTRIBUTE_EMPTY = XML_RNGP_ATTRIBUTE_CONTENT + 1
let XML_RNGP_ATTRIBUTE_NOOP = XML_RNGP_ATTRIBUTE_EMPTY + 1
let XML_RNGP_CHOICE_CONTENT = XML_RNGP_ATTRIBUTE_NOOP + 1
let XML_RNGP_CHOICE_EMPTY = XML_RNGP_CHOICE_CONTENT + 1
let XML_RNGP_CREATE_FAILURE = XML_RNGP_CHOICE_EMPTY + 1
let XML_RNGP_DATA_CONTENT = XML_RNGP_CREATE_FAILURE + 1
let XML_RNGP_DEF_CHOICE_AND_INTERLEAVE = XML_RNGP_DATA_CONTENT + 1
let XML_RNGP_DEFINE_CREATE_FAILED = XML_RNGP_DEF_CHOICE_AND_INTERLEAVE + 1
let XML_RNGP_DEFINE_EMPTY = XML_RNGP_DEFINE_CREATE_FAILED + 1
let XML_RNGP_DEFINE_MISSING = XML_RNGP_DEFINE_EMPTY + 1
let XML_RNGP_DEFINE_NAME_MISSING = XML_RNGP_DEFINE_MISSING + 1
let XML_RNGP_ELEM_CONTENT_EMPTY = XML_RNGP_DEFINE_NAME_MISSING + 1
let XML_RNGP_ELEM_CONTENT_ERROR = XML_RNGP_ELEM_CONTENT_EMPTY + 1
let XML_RNGP_ELEMENT_EMPTY = XML_RNGP_ELEM_CONTENT_ERROR + 1
let XML_RNGP_ELEMENT_CONTENT = XML_RNGP_ELEMENT_EMPTY + 1
let XML_RNGP_ELEMENT_NAME = XML_RNGP_ELEMENT_CONTENT + 1
let XML_RNGP_ELEMENT_NO_CONTENT = XML_RNGP_ELEMENT_NAME + 1
let XML_RNGP_ELEM_TEXT_CONFLICT = XML_RNGP_ELEMENT_NO_CONTENT + 1
let XML_RNGP_EMPTY = XML_RNGP_ELEM_TEXT_CONFLICT + 1
let XML_RNGP_EMPTY_CONSTRUCT = XML_RNGP_EMPTY + 1
let XML_RNGP_EMPTY_CONTENT = XML_RNGP_EMPTY_CONSTRUCT + 1
let XML_RNGP_EMPTY_NOT_EMPTY = XML_RNGP_EMPTY_CONTENT + 1
let XML_RNGP_ERROR_TYPE_LIB = XML_RNGP_EMPTY_NOT_EMPTY + 1
let XML_RNGP_EXCEPT_EMPTY = XML_RNGP_ERROR_TYPE_LIB + 1
let XML_RNGP_EXCEPT_MISSING = XML_RNGP_EXCEPT_EMPTY + 1
let XML_RNGP_EXCEPT_MULTIPLE = XML_RNGP_EXCEPT_MISSING + 1
let XML_RNGP_EXCEPT_NO_CONTENT = XML_RNGP_EXCEPT_MULTIPLE + 1
let XML_RNGP_EXTERNALREF_EMTPY = XML_RNGP_EXCEPT_NO_CONTENT + 1
let XML_RNGP_EXTERNAL_REF_FAILURE = XML_RNGP_EXTERNALREF_EMTPY + 1
let XML_RNGP_EXTERNALREF_RECURSE = XML_RNGP_EXTERNAL_REF_FAILURE + 1
let XML_RNGP_FORBIDDEN_ATTRIBUTE = XML_RNGP_EXTERNALREF_RECURSE + 1
let XML_RNGP_FOREIGN_ELEMENT = XML_RNGP_FORBIDDEN_ATTRIBUTE + 1
let XML_RNGP_GRAMMAR_CONTENT = XML_RNGP_FOREIGN_ELEMENT + 1
let XML_RNGP_GRAMMAR_EMPTY = XML_RNGP_GRAMMAR_CONTENT + 1
let XML_RNGP_GRAMMAR_MISSING = XML_RNGP_GRAMMAR_EMPTY + 1
let XML_RNGP_GRAMMAR_NO_START = XML_RNGP_GRAMMAR_MISSING + 1
let XML_RNGP_GROUP_ATTR_CONFLICT = XML_RNGP_GRAMMAR_NO_START + 1
let XML_RNGP_HREF_ERROR = XML_RNGP_GROUP_ATTR_CONFLICT + 1
let XML_RNGP_INCLUDE_EMPTY = XML_RNGP_HREF_ERROR + 1
let XML_RNGP_INCLUDE_FAILURE = XML_RNGP_INCLUDE_EMPTY + 1
let XML_RNGP_INCLUDE_RECURSE = XML_RNGP_INCLUDE_FAILURE + 1
let XML_RNGP_INTERLEAVE_ADD = XML_RNGP_INCLUDE_RECURSE + 1
let XML_RNGP_INTERLEAVE_CREATE_FAILED = XML_RNGP_INTERLEAVE_ADD + 1
let XML_RNGP_INTERLEAVE_EMPTY = XML_RNGP_INTERLEAVE_CREATE_FAILED + 1
let XML_RNGP_INTERLEAVE_NO_CONTENT = XML_RNGP_INTERLEAVE_EMPTY + 1
let XML_RNGP_INVALID_DEFINE_NAME = XML_RNGP_INTERLEAVE_NO_CONTENT + 1
let XML_RNGP_INVALID_URI = XML_RNGP_INVALID_DEFINE_NAME + 1
let XML_RNGP_INVALID_VALUE = XML_RNGP_INVALID_URI + 1
let XML_RNGP_MISSING_HREF = XML_RNGP_INVALID_VALUE + 1
let XML_RNGP_NAME_MISSING = XML_RNGP_MISSING_HREF + 1
let XML_RNGP_NEED_COMBINE = XML_RNGP_NAME_MISSING + 1
let XML_RNGP_NOTALLOWED_NOT_EMPTY = XML_RNGP_NEED_COMBINE + 1
let XML_RNGP_NSNAME_ATTR_ANCESTOR = XML_RNGP_NOTALLOWED_NOT_EMPTY + 1
let XML_RNGP_NSNAME_NO_NS = XML_RNGP_NSNAME_ATTR_ANCESTOR + 1
let XML_RNGP_PARAM_FORBIDDEN = XML_RNGP_NSNAME_NO_NS + 1
let XML_RNGP_PARAM_NAME_MISSING = XML_RNGP_PARAM_FORBIDDEN + 1
let XML_RNGP_PARENTREF_CREATE_FAILED = XML_RNGP_PARAM_NAME_MISSING + 1
let XML_RNGP_PARENTREF_NAME_INVALID = XML_RNGP_PARENTREF_CREATE_FAILED + 1
let XML_RNGP_PARENTREF_NO_NAME = XML_RNGP_PARENTREF_NAME_INVALID + 1
let XML_RNGP_PARENTREF_NO_PARENT = XML_RNGP_PARENTREF_NO_NAME + 1
let XML_RNGP_PARENTREF_NOT_EMPTY = XML_RNGP_PARENTREF_NO_PARENT + 1
let XML_RNGP_PARSE_ERROR = XML_RNGP_PARENTREF_NOT_EMPTY + 1
let XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME = XML_RNGP_PARSE_ERROR + 1
let XML_RNGP_PAT_ATTR_ATTR = XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME + 1
let XML_RNGP_PAT_ATTR_ELEM = XML_RNGP_PAT_ATTR_ATTR + 1
let XML_RNGP_PAT_DATA_EXCEPT_ATTR = XML_RNGP_PAT_ATTR_ELEM + 1
let XML_RNGP_PAT_DATA_EXCEPT_ELEM = XML_RNGP_PAT_DATA_EXCEPT_ATTR + 1
let XML_RNGP_PAT_DATA_EXCEPT_EMPTY = XML_RNGP_PAT_DATA_EXCEPT_ELEM + 1
let XML_RNGP_PAT_DATA_EXCEPT_GROUP = XML_RNGP_PAT_DATA_EXCEPT_EMPTY + 1
let XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE = XML_RNGP_PAT_DATA_EXCEPT_GROUP + 1
let XML_RNGP_PAT_DATA_EXCEPT_LIST = XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE + 1
let XML_RNGP_PAT_DATA_EXCEPT_ONEMORE = XML_RNGP_PAT_DATA_EXCEPT_LIST + 1
let XML_RNGP_PAT_DATA_EXCEPT_REF = XML_RNGP_PAT_DATA_EXCEPT_ONEMORE + 1
let XML_RNGP_PAT_DATA_EXCEPT_TEXT = XML_RNGP_PAT_DATA_EXCEPT_REF + 1
let XML_RNGP_PAT_LIST_ATTR = XML_RNGP_PAT_DATA_EXCEPT_TEXT + 1
let XML_RNGP_PAT_LIST_ELEM = XML_RNGP_PAT_LIST_ATTR + 1
let XML_RNGP_PAT_LIST_INTERLEAVE = XML_RNGP_PAT_LIST_ELEM + 1
let XML_RNGP_PAT_LIST_LIST = XML_RNGP_PAT_LIST_INTERLEAVE + 1
let XML_RNGP_PAT_LIST_REF = XML_RNGP_PAT_LIST_LIST + 1
let XML_RNGP_PAT_LIST_TEXT = XML_RNGP_PAT_LIST_REF + 1
let XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME = XML_RNGP_PAT_LIST_TEXT + 1
let XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME = XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME + 1
let XML_RNGP_PAT_ONEMORE_GROUP_ATTR = XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME + 1
let XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR = XML_RNGP_PAT_ONEMORE_GROUP_ATTR + 1
let XML_RNGP_PAT_START_ATTR = XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR + 1
let XML_RNGP_PAT_START_DATA = XML_RNGP_PAT_START_ATTR + 1
let XML_RNGP_PAT_START_EMPTY = XML_RNGP_PAT_START_DATA + 1
let XML_RNGP_PAT_START_GROUP = XML_RNGP_PAT_START_EMPTY + 1
let XML_RNGP_PAT_START_INTERLEAVE = XML_RNGP_PAT_START_GROUP + 1
let XML_RNGP_PAT_START_LIST = XML_RNGP_PAT_START_INTERLEAVE + 1
let XML_RNGP_PAT_START_ONEMORE = XML_RNGP_PAT_START_LIST + 1
let XML_RNGP_PAT_START_TEXT = XML_RNGP_PAT_START_ONEMORE + 1
let XML_RNGP_PAT_START_VALUE = XML_RNGP_PAT_START_TEXT + 1
let XML_RNGP_PREFIX_UNDEFINED = XML_RNGP_PAT_START_VALUE + 1
let XML_RNGP_REF_CREATE_FAILED = XML_RNGP_PREFIX_UNDEFINED + 1
let XML_RNGP_REF_CYCLE = XML_RNGP_REF_CREATE_FAILED + 1
let XML_RNGP_REF_NAME_INVALID = XML_RNGP_REF_CYCLE + 1
let XML_RNGP_REF_NO_DEF = XML_RNGP_REF_NAME_INVALID + 1
let XML_RNGP_REF_NO_NAME = XML_RNGP_REF_NO_DEF + 1
let XML_RNGP_REF_NOT_EMPTY = XML_RNGP_REF_NO_NAME + 1
let XML_RNGP_START_CHOICE_AND_INTERLEAVE = XML_RNGP_REF_NOT_EMPTY + 1
let XML_RNGP_START_CONTENT = XML_RNGP_START_CHOICE_AND_INTERLEAVE + 1
let XML_RNGP_START_EMPTY = XML_RNGP_START_CONTENT + 1
let XML_RNGP_START_MISSING = XML_RNGP_START_EMPTY + 1
let XML_RNGP_TEXT_EXPECTED = XML_RNGP_START_MISSING + 1
let XML_RNGP_TEXT_HAS_CHILD = XML_RNGP_TEXT_EXPECTED + 1
let XML_RNGP_TYPE_MISSING = XML_RNGP_TEXT_HAS_CHILD + 1
let XML_RNGP_TYPE_NOT_FOUND = XML_RNGP_TYPE_MISSING + 1
let XML_RNGP_TYPE_VALUE = XML_RNGP_TYPE_NOT_FOUND + 1
let XML_RNGP_UNKNOWN_ATTRIBUTE = XML_RNGP_TYPE_VALUE + 1
let XML_RNGP_UNKNOWN_COMBINE = XML_RNGP_UNKNOWN_ATTRIBUTE + 1
let XML_RNGP_UNKNOWN_CONSTRUCT = XML_RNGP_UNKNOWN_COMBINE + 1
let XML_RNGP_UNKNOWN_TYPE_LIB = XML_RNGP_UNKNOWN_CONSTRUCT + 1
let XML_RNGP_URI_FRAGMENT = XML_RNGP_UNKNOWN_TYPE_LIB + 1
let XML_RNGP_URI_NOT_ABSOLUTE = XML_RNGP_URI_FRAGMENT + 1
let XML_RNGP_VALUE_EMPTY = XML_RNGP_URI_NOT_ABSOLUTE + 1
let XML_RNGP_VALUE_NO_CONTENT = XML_RNGP_VALUE_EMPTY + 1
let XML_RNGP_XMLNS_NAME = XML_RNGP_VALUE_NO_CONTENT + 1
let XML_RNGP_XML_NS = XML_RNGP_XMLNS_NAME + 1
let XML_XPATH_EXPRESSION_OK = 1200
let XML_XPATH_NUMBER_ERROR = XML_XPATH_EXPRESSION_OK + 1
let XML_XPATH_UNFINISHED_LITERAL_ERROR = XML_XPATH_NUMBER_ERROR + 1
let XML_XPATH_START_LITERAL_ERROR = XML_XPATH_UNFINISHED_LITERAL_ERROR + 1
let XML_XPATH_VARIABLE_REF_ERROR = XML_XPATH_START_LITERAL_ERROR + 1
let XML_XPATH_UNDEF_VARIABLE_ERROR = XML_XPATH_VARIABLE_REF_ERROR + 1
let XML_XPATH_INVALID_PREDICATE_ERROR = XML_XPATH_UNDEF_VARIABLE_ERROR + 1
let XML_XPATH_EXPR_ERROR = XML_XPATH_INVALID_PREDICATE_ERROR + 1
let XML_XPATH_UNCLOSED_ERROR = XML_XPATH_EXPR_ERROR + 1
let XML_XPATH_UNKNOWN_FUNC_ERROR = XML_XPATH_UNCLOSED_ERROR + 1
let XML_XPATH_INVALID_OPERAND = XML_XPATH_UNKNOWN_FUNC_ERROR + 1
let XML_XPATH_INVALID_TYPE = XML_XPATH_INVALID_OPERAND + 1
let XML_XPATH_INVALID_ARITY = XML_XPATH_INVALID_TYPE + 1
let XML_XPATH_INVALID_CTXT_SIZE = XML_XPATH_INVALID_ARITY + 1
let XML_XPATH_INVALID_CTXT_POSITION = XML_XPATH_INVALID_CTXT_SIZE + 1
let XML_XPATH_MEMORY_ERROR = XML_XPATH_INVALID_CTXT_POSITION + 1
let XML_XPTR_SYNTAX_ERROR = XML_XPATH_MEMORY_ERROR + 1
let XML_XPTR_RESOURCE_ERROR = XML_XPTR_SYNTAX_ERROR + 1
let XML_XPTR_SUB_RESOURCE_ERROR = XML_XPTR_RESOURCE_ERROR + 1
let XML_XPATH_UNDEF_PREFIX_ERROR = XML_XPTR_SUB_RESOURCE_ERROR + 1
let XML_XPATH_ENCODING_ERROR = XML_XPATH_UNDEF_PREFIX_ERROR + 1
let XML_XPATH_INVALID_CHAR_ERROR = XML_XPATH_ENCODING_ERROR + 1
let XML_TREE_INVALID_HEX = 1300
let XML_TREE_INVALID_DEC = XML_TREE_INVALID_HEX + 1
let XML_TREE_UNTERMINATED_ENTITY = XML_TREE_INVALID_DEC + 1
let XML_TREE_NOT_UTF8 = XML_TREE_UNTERMINATED_ENTITY + 1
let XML_SAVE_NOT_UTF8 = 1400
let XML_SAVE_CHAR_INVALID = XML_SAVE_NOT_UTF8 + 1
let XML_SAVE_NO_DOCTYPE = XML_SAVE_CHAR_INVALID + 1
let XML_SAVE_UNKNOWN_ENCODING = XML_SAVE_NO_DOCTYPE + 1
let XML_REGEXP_COMPILE_ERROR = 1450
let XML_IO_UNKNOWN = 1500
let XML_IO_EACCES = XML_IO_UNKNOWN + 1
let XML_IO_EAGAIN = XML_IO_EACCES + 1
let XML_IO_EBADF = XML_IO_EAGAIN + 1
let XML_IO_EBADMSG = XML_IO_EBADF + 1
let XML_IO_EBUSY = XML_IO_EBADMSG + 1
let XML_IO_ECANCELED = XML_IO_EBUSY + 1
let XML_IO_ECHILD = XML_IO_ECANCELED + 1
let XML_IO_EDEADLK = XML_IO_ECHILD + 1
let XML_IO_EDOM = XML_IO_EDEADLK + 1
let XML_IO_EEXIST = XML_IO_EDOM + 1
let XML_IO_EFAULT = XML_IO_EEXIST + 1
let XML_IO_EFBIG = XML_IO_EFAULT + 1
let XML_IO_EINPROGRESS = XML_IO_EFBIG + 1
let XML_IO_EINTR = XML_IO_EINPROGRESS + 1
let XML_IO_EINVAL = XML_IO_EINTR + 1
let XML_IO_EIO = XML_IO_EINVAL + 1
let XML_IO_EISDIR = XML_IO_EIO + 1
let XML_IO_EMFILE = XML_IO_EISDIR + 1
let XML_IO_EMLINK = XML_IO_EMFILE + 1
let XML_IO_EMSGSIZE = XML_IO_EMLINK + 1
let XML_IO_ENAMETOOLONG = XML_IO_EMSGSIZE + 1
let XML_IO_ENFILE = XML_IO_ENAMETOOLONG + 1
let XML_IO_ENODEV = XML_IO_ENFILE + 1
let XML_IO_ENOENT = XML_IO_ENODEV + 1
let XML_IO_ENOEXEC = XML_IO_ENOENT + 1
let XML_IO_ENOLCK = XML_IO_ENOEXEC + 1
let XML_IO_ENOMEM = XML_IO_ENOLCK + 1
let XML_IO_ENOSPC = XML_IO_ENOMEM + 1
let XML_IO_ENOSYS = XML_IO_ENOSPC + 1
let XML_IO_ENOTDIR = XML_IO_ENOSYS + 1
let XML_IO_ENOTEMPTY = XML_IO_ENOTDIR + 1
let XML_IO_ENOTSUP = XML_IO_ENOTEMPTY + 1
let XML_IO_ENOTTY = XML_IO_ENOTSUP + 1
let XML_IO_ENXIO = XML_IO_ENOTTY + 1
let XML_IO_EPERM = XML_IO_ENXIO + 1
let XML_IO_EPIPE = XML_IO_EPERM + 1
let XML_IO_ERANGE = XML_IO_EPIPE + 1
let XML_IO_EROFS = XML_IO_ERANGE + 1
let XML_IO_ESPIPE = XML_IO_EROFS + 1
let XML_IO_ESRCH = XML_IO_ESPIPE + 1
let XML_IO_ETIMEDOUT = XML_IO_ESRCH + 1
let XML_IO_EXDEV = XML_IO_ETIMEDOUT + 1
let XML_IO_NETWORK_ATTEMPT = XML_IO_EXDEV + 1
let XML_IO_ENCODER = XML_IO_NETWORK_ATTEMPT + 1
let XML_IO_FLUSH = XML_IO_ENCODER + 1
let XML_IO_WRITE = XML_IO_FLUSH + 1
let XML_IO_NO_INPUT = XML_IO_WRITE + 1
let XML_IO_BUFFER_FULL = XML_IO_NO_INPUT + 1
let XML_IO_LOAD_ERROR = XML_IO_BUFFER_FULL + 1
let XML_IO_ENOTSOCK = XML_IO_LOAD_ERROR + 1
let XML_IO_EISCONN = XML_IO_ENOTSOCK + 1
let XML_IO_ECONNREFUSED = XML_IO_EISCONN + 1
let XML_IO_ENETUNREACH = XML_IO_ECONNREFUSED + 1
let XML_IO_EADDRINUSE = XML_IO_ENETUNREACH + 1
let XML_IO_EALREADY = XML_IO_EADDRINUSE + 1
let XML_IO_EAFNOSUPPORT = XML_IO_EALREADY + 1
let XML_XINCLUDE_RECURSION = 1600
let XML_XINCLUDE_PARSE_VALUE = XML_XINCLUDE_RECURSION + 1
let XML_XINCLUDE_ENTITY_DEF_MISMATCH = XML_XINCLUDE_PARSE_VALUE + 1
let XML_XINCLUDE_NO_HREF = XML_XINCLUDE_ENTITY_DEF_MISMATCH + 1
let XML_XINCLUDE_NO_FALLBACK = XML_XINCLUDE_NO_HREF + 1
let XML_XINCLUDE_HREF_URI = XML_XINCLUDE_NO_FALLBACK + 1
let XML_XINCLUDE_TEXT_FRAGMENT = XML_XINCLUDE_HREF_URI + 1
let XML_XINCLUDE_TEXT_DOCUMENT = XML_XINCLUDE_TEXT_FRAGMENT + 1
let XML_XINCLUDE_INVALID_CHAR = XML_XINCLUDE_TEXT_DOCUMENT + 1
let XML_XINCLUDE_BUILD_FAILED = XML_XINCLUDE_INVALID_CHAR + 1
let XML_XINCLUDE_UNKNOWN_ENCODING = XML_XINCLUDE_BUILD_FAILED + 1
let XML_XINCLUDE_MULTIPLE_ROOT = XML_XINCLUDE_UNKNOWN_ENCODING + 1
let XML_XINCLUDE_XPTR_FAILED = XML_XINCLUDE_MULTIPLE_ROOT + 1
let XML_XINCLUDE_XPTR_RESULT = XML_XINCLUDE_XPTR_FAILED + 1
let XML_XINCLUDE_INCLUDE_IN_INCLUDE = XML_XINCLUDE_XPTR_RESULT + 1
let XML_XINCLUDE_FALLBACKS_IN_INCLUDE = XML_XINCLUDE_INCLUDE_IN_INCLUDE + 1
let XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE = XML_XINCLUDE_FALLBACKS_IN_INCLUDE + 1
let XML_XINCLUDE_DEPRECATED_NS = XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE + 1
let XML_XINCLUDE_FRAGMENT_ID = XML_XINCLUDE_DEPRECATED_NS + 1
let XML_CATALOG_MISSING_ATTR = 1650
let XML_CATALOG_ENTRY_BROKEN = XML_CATALOG_MISSING_ATTR + 1
let XML_CATALOG_PREFER_VALUE = XML_CATALOG_ENTRY_BROKEN + 1
let XML_CATALOG_NOT_CATALOG = XML_CATALOG_PREFER_VALUE + 1
let XML_CATALOG_RECURSION = XML_CATALOG_NOT_CATALOG + 1
let XML_SCHEMAP_PREFIX_UNDEFINED = 1700
let XML_SCHEMAP_ATTRFORMDEFAULT_VALUE = XML_SCHEMAP_PREFIX_UNDEFINED + 1
let XML_SCHEMAP_ATTRGRP_NONAME_NOREF = XML_SCHEMAP_ATTRFORMDEFAULT_VALUE + 1
let XML_SCHEMAP_ATTR_NONAME_NOREF = XML_SCHEMAP_ATTRGRP_NONAME_NOREF + 1
let XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF = XML_SCHEMAP_ATTR_NONAME_NOREF + 1
let XML_SCHEMAP_ELEMFORMDEFAULT_VALUE = XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF + 1
let XML_SCHEMAP_ELEM_NONAME_NOREF = XML_SCHEMAP_ELEMFORMDEFAULT_VALUE + 1
let XML_SCHEMAP_EXTENSION_NO_BASE = XML_SCHEMAP_ELEM_NONAME_NOREF + 1
let XML_SCHEMAP_FACET_NO_VALUE = XML_SCHEMAP_EXTENSION_NO_BASE + 1
let XML_SCHEMAP_FAILED_BUILD_IMPORT = XML_SCHEMAP_FACET_NO_VALUE + 1
let XML_SCHEMAP_GROUP_NONAME_NOREF = XML_SCHEMAP_FAILED_BUILD_IMPORT + 1
let XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI = XML_SCHEMAP_GROUP_NONAME_NOREF + 1
let XML_SCHEMAP_IMPORT_REDEFINE_NSNAME = XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI + 1
let XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI = XML_SCHEMAP_IMPORT_REDEFINE_NSNAME + 1
let XML_SCHEMAP_INVALID_BOOLEAN = XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI + 1
let XML_SCHEMAP_INVALID_ENUM = XML_SCHEMAP_INVALID_BOOLEAN + 1
let XML_SCHEMAP_INVALID_FACET = XML_SCHEMAP_INVALID_ENUM + 1
let XML_SCHEMAP_INVALID_FACET_VALUE = XML_SCHEMAP_INVALID_FACET + 1
let XML_SCHEMAP_INVALID_MAXOCCURS = XML_SCHEMAP_INVALID_FACET_VALUE + 1
let XML_SCHEMAP_INVALID_MINOCCURS = XML_SCHEMAP_INVALID_MAXOCCURS + 1
let XML_SCHEMAP_INVALID_REF_AND_SUBTYPE = XML_SCHEMAP_INVALID_MINOCCURS + 1
let XML_SCHEMAP_INVALID_WHITE_SPACE = XML_SCHEMAP_INVALID_REF_AND_SUBTYPE + 1
let XML_SCHEMAP_NOATTR_NOREF = XML_SCHEMAP_INVALID_WHITE_SPACE + 1
let XML_SCHEMAP_NOTATION_NO_NAME = XML_SCHEMAP_NOATTR_NOREF + 1
let XML_SCHEMAP_NOTYPE_NOREF = XML_SCHEMAP_NOTATION_NO_NAME + 1
let XML_SCHEMAP_REF_AND_SUBTYPE = XML_SCHEMAP_NOTYPE_NOREF + 1
let XML_SCHEMAP_RESTRICTION_NONAME_NOREF = XML_SCHEMAP_REF_AND_SUBTYPE + 1
let XML_SCHEMAP_SIMPLETYPE_NONAME = XML_SCHEMAP_RESTRICTION_NONAME_NOREF + 1
let XML_SCHEMAP_TYPE_AND_SUBTYPE = XML_SCHEMAP_SIMPLETYPE_NONAME + 1
let XML_SCHEMAP_UNKNOWN_ALL_CHILD = XML_SCHEMAP_TYPE_AND_SUBTYPE + 1
let XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD = XML_SCHEMAP_UNKNOWN_ALL_CHILD + 1
let XML_SCHEMAP_UNKNOWN_ATTR_CHILD = XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD + 1
let XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD = XML_SCHEMAP_UNKNOWN_ATTR_CHILD + 1
let XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP = XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD + 1
let XML_SCHEMAP_UNKNOWN_BASE_TYPE = XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP + 1
let XML_SCHEMAP_UNKNOWN_CHOICE_CHILD = XML_SCHEMAP_UNKNOWN_BASE_TYPE + 1
let XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD = XML_SCHEMAP_UNKNOWN_CHOICE_CHILD + 1
let XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD = XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD + 1
let XML_SCHEMAP_UNKNOWN_ELEM_CHILD = XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD + 1
let XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD = XML_SCHEMAP_UNKNOWN_ELEM_CHILD + 1
let XML_SCHEMAP_UNKNOWN_FACET_CHILD = XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD + 1
let XML_SCHEMAP_UNKNOWN_FACET_TYPE = XML_SCHEMAP_UNKNOWN_FACET_CHILD + 1
let XML_SCHEMAP_UNKNOWN_GROUP_CHILD = XML_SCHEMAP_UNKNOWN_FACET_TYPE + 1
let XML_SCHEMAP_UNKNOWN_IMPORT_CHILD = XML_SCHEMAP_UNKNOWN_GROUP_CHILD + 1
let XML_SCHEMAP_UNKNOWN_LIST_CHILD = XML_SCHEMAP_UNKNOWN_IMPORT_CHILD + 1
let XML_SCHEMAP_UNKNOWN_NOTATION_CHILD = XML_SCHEMAP_UNKNOWN_LIST_CHILD + 1
let XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD = XML_SCHEMAP_UNKNOWN_NOTATION_CHILD + 1
let XML_SCHEMAP_UNKNOWN_REF = XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD + 1
let XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD = XML_SCHEMAP_UNKNOWN_REF + 1
let XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD = XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD + 1
let XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD = XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD + 1
let XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD = XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD + 1
let XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD = XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD + 1
let XML_SCHEMAP_UNKNOWN_TYPE = XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD + 1
let XML_SCHEMAP_UNKNOWN_UNION_CHILD = XML_SCHEMAP_UNKNOWN_TYPE + 1
let XML_SCHEMAP_ELEM_DEFAULT_FIXED = XML_SCHEMAP_UNKNOWN_UNION_CHILD + 1
let XML_SCHEMAP_REGEXP_INVALID = XML_SCHEMAP_ELEM_DEFAULT_FIXED + 1
let XML_SCHEMAP_FAILED_LOAD = XML_SCHEMAP_REGEXP_INVALID + 1
let XML_SCHEMAP_NOTHING_TO_PARSE = XML_SCHEMAP_FAILED_LOAD + 1
let XML_SCHEMAP_NOROOT = XML_SCHEMAP_NOTHING_TO_PARSE + 1
let XML_SCHEMAP_REDEFINED_GROUP = XML_SCHEMAP_NOROOT + 1
let XML_SCHEMAP_REDEFINED_TYPE = XML_SCHEMAP_REDEFINED_GROUP + 1
let XML_SCHEMAP_REDEFINED_ELEMENT = XML_SCHEMAP_REDEFINED_TYPE + 1
let XML_SCHEMAP_REDEFINED_ATTRGROUP = XML_SCHEMAP_REDEFINED_ELEMENT + 1
let XML_SCHEMAP_REDEFINED_ATTR = XML_SCHEMAP_REDEFINED_ATTRGROUP + 1
let XML_SCHEMAP_REDEFINED_NOTATION = XML_SCHEMAP_REDEFINED_ATTR + 1
let XML_SCHEMAP_FAILED_PARSE = XML_SCHEMAP_REDEFINED_NOTATION + 1
let XML_SCHEMAP_UNKNOWN_PREFIX = XML_SCHEMAP_FAILED_PARSE + 1
let XML_SCHEMAP_DEF_AND_PREFIX = XML_SCHEMAP_UNKNOWN_PREFIX + 1
let XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD = XML_SCHEMAP_DEF_AND_PREFIX + 1
let XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI = XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD + 1
let XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI = XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI + 1
let XML_SCHEMAP_NOT_SCHEMA = XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI + 1
let XML_SCHEMAP_UNKNOWN_MEMBER_TYPE = XML_SCHEMAP_NOT_SCHEMA + 1
let XML_SCHEMAP_INVALID_ATTR_USE = XML_SCHEMAP_UNKNOWN_MEMBER_TYPE + 1
let XML_SCHEMAP_RECURSIVE = XML_SCHEMAP_INVALID_ATTR_USE + 1
let XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE = XML_SCHEMAP_RECURSIVE + 1
let XML_SCHEMAP_INVALID_ATTR_COMBINATION = XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE + 1
let XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION = XML_SCHEMAP_INVALID_ATTR_COMBINATION + 1
let XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD = XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION + 1
let XML_SCHEMAP_INVALID_ATTR_NAME = XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD + 1
let XML_SCHEMAP_REF_AND_CONTENT = XML_SCHEMAP_INVALID_ATTR_NAME + 1
let XML_SCHEMAP_CT_PROPS_CORRECT_1 = XML_SCHEMAP_REF_AND_CONTENT + 1
let XML_SCHEMAP_CT_PROPS_CORRECT_2 = XML_SCHEMAP_CT_PROPS_CORRECT_1 + 1
let XML_SCHEMAP_CT_PROPS_CORRECT_3 = XML_SCHEMAP_CT_PROPS_CORRECT_2 + 1
let XML_SCHEMAP_CT_PROPS_CORRECT_4 = XML_SCHEMAP_CT_PROPS_CORRECT_3 + 1
let XML_SCHEMAP_CT_PROPS_CORRECT_5 = XML_SCHEMAP_CT_PROPS_CORRECT_4 + 1
let XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1 = XML_SCHEMAP_CT_PROPS_CORRECT_5 + 1
let XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1 = XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1 + 1
let XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2 = XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1 + 1
let XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2 = XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2 + 1
let XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3 = XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2 + 1
let XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER = XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3 + 1
let XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE = XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER + 1
let XML_SCHEMAP_UNION_NOT_EXPRESSIBLE = XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE + 1
let XML_SCHEMAP_SRC_IMPORT_3_1 = XML_SCHEMAP_UNION_NOT_EXPRESSIBLE + 1
let XML_SCHEMAP_SRC_IMPORT_3_2 = XML_SCHEMAP_SRC_IMPORT_3_1 + 1
let XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1 = XML_SCHEMAP_SRC_IMPORT_3_2 + 1
let XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2 = XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1 + 1
let XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3 = XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2 + 1
let XML_SCHEMAP_COS_CT_EXTENDS_1_3 = XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3 + 1
let XML_SCHEMAV_NOROOT = 1801
let XML_SCHEMAV_UNDECLAREDELEM = XML_SCHEMAV_NOROOT + 1
let XML_SCHEMAV_NOTTOPLEVEL = XML_SCHEMAV_UNDECLAREDELEM + 1
let XML_SCHEMAV_MISSING = XML_SCHEMAV_NOTTOPLEVEL + 1
let XML_SCHEMAV_WRONGELEM = XML_SCHEMAV_MISSING + 1
let XML_SCHEMAV_NOTYPE = XML_SCHEMAV_WRONGELEM + 1
let XML_SCHEMAV_NOROLLBACK = XML_SCHEMAV_NOTYPE + 1
let XML_SCHEMAV_ISABSTRACT = XML_SCHEMAV_NOROLLBACK + 1
let XML_SCHEMAV_NOTEMPTY = XML_SCHEMAV_ISABSTRACT + 1
let XML_SCHEMAV_ELEMCONT = XML_SCHEMAV_NOTEMPTY + 1
let XML_SCHEMAV_HAVEDEFAULT = XML_SCHEMAV_ELEMCONT + 1
let XML_SCHEMAV_NOTNILLABLE = XML_SCHEMAV_HAVEDEFAULT + 1
let XML_SCHEMAV_EXTRACONTENT = XML_SCHEMAV_NOTNILLABLE + 1
let XML_SCHEMAV_INVALIDATTR = XML_SCHEMAV_EXTRACONTENT + 1
let XML_SCHEMAV_INVALIDELEM = XML_SCHEMAV_INVALIDATTR + 1
let XML_SCHEMAV_NOTDETERMINIST = XML_SCHEMAV_INVALIDELEM + 1
let XML_SCHEMAV_CONSTRUCT = XML_SCHEMAV_NOTDETERMINIST + 1
let XML_SCHEMAV_INTERNAL = XML_SCHEMAV_CONSTRUCT + 1
let XML_SCHEMAV_NOTSIMPLE = XML_SCHEMAV_INTERNAL + 1
let XML_SCHEMAV_ATTRUNKNOWN = XML_SCHEMAV_NOTSIMPLE + 1
let XML_SCHEMAV_ATTRINVALID = XML_SCHEMAV_ATTRUNKNOWN + 1
let XML_SCHEMAV_VALUE = XML_SCHEMAV_ATTRINVALID + 1
let XML_SCHEMAV_FACET = XML_SCHEMAV_VALUE + 1
let XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1 = XML_SCHEMAV_FACET + 1
let XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2 = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1 + 1
let XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3 = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2 + 1
let XML_SCHEMAV_CVC_TYPE_3_1_1 = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3 + 1
let XML_SCHEMAV_CVC_TYPE_3_1_2 = XML_SCHEMAV_CVC_TYPE_3_1_1 + 1
let XML_SCHEMAV_CVC_FACET_VALID = XML_SCHEMAV_CVC_TYPE_3_1_2 + 1
let XML_SCHEMAV_CVC_LENGTH_VALID = XML_SCHEMAV_CVC_FACET_VALID + 1
let XML_SCHEMAV_CVC_MINLENGTH_VALID = XML_SCHEMAV_CVC_LENGTH_VALID + 1
let XML_SCHEMAV_CVC_MAXLENGTH_VALID = XML_SCHEMAV_CVC_MINLENGTH_VALID + 1
let XML_SCHEMAV_CVC_MININCLUSIVE_VALID = XML_SCHEMAV_CVC_MAXLENGTH_VALID + 1
let XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID = XML_SCHEMAV_CVC_MININCLUSIVE_VALID + 1
let XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID = XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID + 1
let XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID = XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID + 1
let XML_SCHEMAV_CVC_TOTALDIGITS_VALID = XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID + 1
let XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID = XML_SCHEMAV_CVC_TOTALDIGITS_VALID + 1
let XML_SCHEMAV_CVC_PATTERN_VALID = XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID + 1
let XML_SCHEMAV_CVC_ENUMERATION_VALID = XML_SCHEMAV_CVC_PATTERN_VALID + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1 = XML_SCHEMAV_CVC_ENUMERATION_VALID + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2 = XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1 + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3 = XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2 + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4 = XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3 + 1
let XML_SCHEMAV_CVC_ELT_1 = XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4 + 1
let XML_SCHEMAV_CVC_ELT_2 = XML_SCHEMAV_CVC_ELT_1 + 1
let XML_SCHEMAV_CVC_ELT_3_1 = XML_SCHEMAV_CVC_ELT_2 + 1
let XML_SCHEMAV_CVC_ELT_3_2_1 = XML_SCHEMAV_CVC_ELT_3_1 + 1
let XML_SCHEMAV_CVC_ELT_3_2_2 = XML_SCHEMAV_CVC_ELT_3_2_1 + 1
let XML_SCHEMAV_CVC_ELT_4_1 = XML_SCHEMAV_CVC_ELT_3_2_2 + 1
let XML_SCHEMAV_CVC_ELT_4_2 = XML_SCHEMAV_CVC_ELT_4_1 + 1
let XML_SCHEMAV_CVC_ELT_4_3 = XML_SCHEMAV_CVC_ELT_4_2 + 1
let XML_SCHEMAV_CVC_ELT_5_1_1 = XML_SCHEMAV_CVC_ELT_4_3 + 1
let XML_SCHEMAV_CVC_ELT_5_1_2 = XML_SCHEMAV_CVC_ELT_5_1_1 + 1
let XML_SCHEMAV_CVC_ELT_5_2_1 = XML_SCHEMAV_CVC_ELT_5_1_2 + 1
let XML_SCHEMAV_CVC_ELT_5_2_2_1 = XML_SCHEMAV_CVC_ELT_5_2_1 + 1
let XML_SCHEMAV_CVC_ELT_5_2_2_2_1 = XML_SCHEMAV_CVC_ELT_5_2_2_1 + 1
let XML_SCHEMAV_CVC_ELT_5_2_2_2_2 = XML_SCHEMAV_CVC_ELT_5_2_2_2_1 + 1
let XML_SCHEMAV_CVC_ELT_6 = XML_SCHEMAV_CVC_ELT_5_2_2_2_2 + 1
let XML_SCHEMAV_CVC_ELT_7 = XML_SCHEMAV_CVC_ELT_6 + 1
let XML_SCHEMAV_CVC_ATTRIBUTE_1 = XML_SCHEMAV_CVC_ELT_7 + 1
let XML_SCHEMAV_CVC_ATTRIBUTE_2 = XML_SCHEMAV_CVC_ATTRIBUTE_1 + 1
let XML_SCHEMAV_CVC_ATTRIBUTE_3 = XML_SCHEMAV_CVC_ATTRIBUTE_2 + 1
let XML_SCHEMAV_CVC_ATTRIBUTE_4 = XML_SCHEMAV_CVC_ATTRIBUTE_3 + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1 = XML_SCHEMAV_CVC_ATTRIBUTE_4 + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1 = XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1 + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2 = XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1 + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_4 = XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2 + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1 = XML_SCHEMAV_CVC_COMPLEX_TYPE_4 + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2 = XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1 + 1
let XML_SCHEMAV_ELEMENT_CONTENT = XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2 + 1
let XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING = XML_SCHEMAV_ELEMENT_CONTENT + 1
let XML_SCHEMAV_CVC_COMPLEX_TYPE_1 = XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING + 1
let XML_SCHEMAV_CVC_AU = XML_SCHEMAV_CVC_COMPLEX_TYPE_1 + 1
let XML_SCHEMAV_CVC_TYPE_1 = XML_SCHEMAV_CVC_AU + 1
let XML_SCHEMAV_CVC_TYPE_2 = XML_SCHEMAV_CVC_TYPE_1 + 1
let XML_SCHEMAV_CVC_IDC = XML_SCHEMAV_CVC_TYPE_2 + 1
let XML_SCHEMAV_CVC_WILDCARD = XML_SCHEMAV_CVC_IDC + 1
let XML_SCHEMAV_MISC = XML_SCHEMAV_CVC_WILDCARD + 1
let XML_XPTR_UNKNOWN_SCHEME = 1900
let XML_XPTR_CHILDSEQ_START = XML_XPTR_UNKNOWN_SCHEME + 1
let XML_XPTR_EVAL_FAILED = XML_XPTR_CHILDSEQ_START + 1
let XML_XPTR_EXTRA_OBJECTS = XML_XPTR_EVAL_FAILED + 1
let XML_C14N_CREATE_CTXT = 1950
let XML_C14N_REQUIRES_UTF8 = XML_C14N_CREATE_CTXT + 1
let XML_C14N_CREATE_STACK = XML_C14N_REQUIRES_UTF8 + 1
let XML_C14N_INVALID_NODE = XML_C14N_CREATE_STACK + 1
let XML_C14N_UNKNOW_NODE = XML_C14N_INVALID_NODE + 1
let XML_C14N_RELATIVE_NAMESPACE = XML_C14N_UNKNOW_NODE + 1
let XML_FTP_PASV_ANSWER = 2000
let XML_FTP_EPSV_ANSWER = XML_FTP_PASV_ANSWER + 1
let XML_FTP_ACCNT = XML_FTP_EPSV_ANSWER + 1
let XML_FTP_URL_SYNTAX = XML_FTP_ACCNT + 1
let XML_HTTP_URL_SYNTAX = 2020
let XML_HTTP_USE_IP = XML_HTTP_URL_SYNTAX + 1
let XML_HTTP_UNKNOWN_HOST = XML_HTTP_USE_IP + 1
let XML_SCHEMAP_SRC_SIMPLE_TYPE_1 = 3000
let XML_SCHEMAP_SRC_SIMPLE_TYPE_2 = XML_SCHEMAP_SRC_SIMPLE_TYPE_1 + 1
let XML_SCHEMAP_SRC_SIMPLE_TYPE_3 = XML_SCHEMAP_SRC_SIMPLE_TYPE_2 + 1
let XML_SCHEMAP_SRC_SIMPLE_TYPE_4 = XML_SCHEMAP_SRC_SIMPLE_TYPE_3 + 1
let XML_SCHEMAP_SRC_RESOLVE = XML_SCHEMAP_SRC_SIMPLE_TYPE_4 + 1
let XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE = XML_SCHEMAP_SRC_RESOLVE + 1
let XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE = XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE + 1
let XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES = XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE + 1
let XML_SCHEMAP_ST_PROPS_CORRECT_1 = XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES + 1
let XML_SCHEMAP_ST_PROPS_CORRECT_2 = XML_SCHEMAP_ST_PROPS_CORRECT_1 + 1
let XML_SCHEMAP_ST_PROPS_CORRECT_3 = XML_SCHEMAP_ST_PROPS_CORRECT_2 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_1_1 = XML_SCHEMAP_ST_PROPS_CORRECT_3 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_1_2 = XML_SCHEMAP_COS_ST_RESTRICTS_1_1 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1 = XML_SCHEMAP_COS_ST_RESTRICTS_1_2 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2 = XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_2_1 = XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1 = XML_SCHEMAP_COS_ST_RESTRICTS_2_1 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2 = XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1 = XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2 = XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3 = XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4 = XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5 = XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_3_1 = XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1 = XML_SCHEMAP_COS_ST_RESTRICTS_3_1 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2 = XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2 = XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1 = XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3 = XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4 = XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3 + 1
let XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5 = XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4 + 1
let XML_SCHEMAP_COS_ST_DERIVED_OK_2_1 = XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5 + 1
let XML_SCHEMAP_COS_ST_DERIVED_OK_2_2 = XML_SCHEMAP_COS_ST_DERIVED_OK_2_1 + 1
let XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED = XML_SCHEMAP_COS_ST_DERIVED_OK_2_2 + 1
let XML_SCHEMAP_S4S_ELEM_MISSING = XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED + 1
let XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED = XML_SCHEMAP_S4S_ELEM_MISSING + 1
let XML_SCHEMAP_S4S_ATTR_MISSING = XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED + 1
let XML_SCHEMAP_S4S_ATTR_INVALID_VALUE = XML_SCHEMAP_S4S_ATTR_MISSING + 1
let XML_SCHEMAP_SRC_ELEMENT_1 = XML_SCHEMAP_S4S_ATTR_INVALID_VALUE + 1
let XML_SCHEMAP_SRC_ELEMENT_2_1 = XML_SCHEMAP_SRC_ELEMENT_1 + 1
let XML_SCHEMAP_SRC_ELEMENT_2_2 = XML_SCHEMAP_SRC_ELEMENT_2_1 + 1
let XML_SCHEMAP_SRC_ELEMENT_3 = XML_SCHEMAP_SRC_ELEMENT_2_2 + 1
let XML_SCHEMAP_P_PROPS_CORRECT_1 = XML_SCHEMAP_SRC_ELEMENT_3 + 1
let XML_SCHEMAP_P_PROPS_CORRECT_2_1 = XML_SCHEMAP_P_PROPS_CORRECT_1 + 1
let XML_SCHEMAP_P_PROPS_CORRECT_2_2 = XML_SCHEMAP_P_PROPS_CORRECT_2_1 + 1
let XML_SCHEMAP_E_PROPS_CORRECT_2 = XML_SCHEMAP_P_PROPS_CORRECT_2_2 + 1
let XML_SCHEMAP_E_PROPS_CORRECT_3 = XML_SCHEMAP_E_PROPS_CORRECT_2 + 1
let XML_SCHEMAP_E_PROPS_CORRECT_4 = XML_SCHEMAP_E_PROPS_CORRECT_3 + 1
let XML_SCHEMAP_E_PROPS_CORRECT_5 = XML_SCHEMAP_E_PROPS_CORRECT_4 + 1
let XML_SCHEMAP_E_PROPS_CORRECT_6 = XML_SCHEMAP_E_PROPS_CORRECT_5 + 1
let XML_SCHEMAP_SRC_INCLUDE = XML_SCHEMAP_E_PROPS_CORRECT_6 + 1
let XML_SCHEMAP_SRC_ATTRIBUTE_1 = XML_SCHEMAP_SRC_INCLUDE + 1
let XML_SCHEMAP_SRC_ATTRIBUTE_2 = XML_SCHEMAP_SRC_ATTRIBUTE_1 + 1
let XML_SCHEMAP_SRC_ATTRIBUTE_3_1 = XML_SCHEMAP_SRC_ATTRIBUTE_2 + 1
let XML_SCHEMAP_SRC_ATTRIBUTE_3_2 = XML_SCHEMAP_SRC_ATTRIBUTE_3_1 + 1
let XML_SCHEMAP_SRC_ATTRIBUTE_4 = XML_SCHEMAP_SRC_ATTRIBUTE_3_2 + 1
let XML_SCHEMAP_NO_XMLNS = XML_SCHEMAP_SRC_ATTRIBUTE_4 + 1
let XML_SCHEMAP_NO_XSI = XML_SCHEMAP_NO_XMLNS + 1
let XML_SCHEMAP_COS_VALID_DEFAULT_1 = XML_SCHEMAP_NO_XSI + 1
let XML_SCHEMAP_COS_VALID_DEFAULT_2_1 = XML_SCHEMAP_COS_VALID_DEFAULT_1 + 1
let XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1 = XML_SCHEMAP_COS_VALID_DEFAULT_2_1 + 1
let XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2 = XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1 + 1
let XML_SCHEMAP_CVC_SIMPLE_TYPE = XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2 + 1
let XML_SCHEMAP_COS_CT_EXTENDS_1_1 = XML_SCHEMAP_CVC_SIMPLE_TYPE + 1
let XML_SCHEMAP_SRC_IMPORT_1_1 = XML_SCHEMAP_COS_CT_EXTENDS_1_1 + 1
let XML_SCHEMAP_SRC_IMPORT_1_2 = XML_SCHEMAP_SRC_IMPORT_1_1 + 1
let XML_SCHEMAP_SRC_IMPORT_2 = XML_SCHEMAP_SRC_IMPORT_1_2 + 1
let XML_SCHEMAP_SRC_IMPORT_2_1 = XML_SCHEMAP_SRC_IMPORT_2 + 1
let XML_SCHEMAP_SRC_IMPORT_2_2 = XML_SCHEMAP_SRC_IMPORT_2_1 + 1
let XML_SCHEMAP_INTERNAL = XML_SCHEMAP_SRC_IMPORT_2_2 + 1
let XML_SCHEMAP_NOT_DETERMINISTIC = XML_SCHEMAP_INTERNAL + 1
let XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1 = XML_SCHEMAP_NOT_DETERMINISTIC + 1
let XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2 = XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1 + 1
let XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3 = XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2 + 1
let XML_SCHEMAP_MG_PROPS_CORRECT_1 = XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3 + 1
let XML_SCHEMAP_MG_PROPS_CORRECT_2 = XML_SCHEMAP_MG_PROPS_CORRECT_1 + 1
let XML_SCHEMAP_SRC_CT_1 = XML_SCHEMAP_MG_PROPS_CORRECT_2 + 1
let XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3 = XML_SCHEMAP_SRC_CT_1 + 1
let XML_SCHEMAP_AU_PROPS_CORRECT_2 = XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3 + 1
let XML_SCHEMAP_A_PROPS_CORRECT_2 = XML_SCHEMAP_AU_PROPS_CORRECT_2 + 1
let XML_SCHEMAP_C_PROPS_CORRECT = XML_SCHEMAP_A_PROPS_CORRECT_2 + 1
let XML_SCHEMAP_SRC_REDEFINE = XML_SCHEMAP_C_PROPS_CORRECT + 1
let XML_SCHEMAP_SRC_IMPORT = XML_SCHEMAP_SRC_REDEFINE + 1
let XML_SCHEMAP_WARN_SKIP_SCHEMA = XML_SCHEMAP_SRC_IMPORT + 1
let XML_SCHEMAP_WARN_UNLOCATED_SCHEMA = XML_SCHEMAP_WARN_SKIP_SCHEMA + 1
let XML_SCHEMAP_WARN_ATTR_REDECL_PROH = XML_SCHEMAP_WARN_UNLOCATED_SCHEMA + 1
let XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH = XML_SCHEMAP_WARN_ATTR_REDECL_PROH + 1
let XML_SCHEMAP_AG_PROPS_CORRECT = XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH + 1
let XML_SCHEMAP_COS_CT_EXTENDS_1_2 = XML_SCHEMAP_AG_PROPS_CORRECT + 1
let XML_SCHEMAP_AU_PROPS_CORRECT = XML_SCHEMAP_COS_CT_EXTENDS_1_2 + 1
let XML_SCHEMAP_A_PROPS_CORRECT_3 = XML_SCHEMAP_AU_PROPS_CORRECT + 1
let XML_SCHEMAP_COS_ALL_LIMITED = XML_SCHEMAP_A_PROPS_CORRECT_3 + 1
let XML_SCHEMATRONV_ASSERT = 4000
let XML_SCHEMATRONV_REPORT = XML_SCHEMATRONV_ASSERT + 1
let XML_MODULE_OPEN = 4900
let XML_MODULE_CLOSE = XML_MODULE_OPEN + 1
let XML_CHECK_FOUND_ELEMENT = 5000
let XML_CHECK_FOUND_ATTRIBUTE = XML_CHECK_FOUND_ELEMENT + 1
let XML_CHECK_FOUND_TEXT = XML_CHECK_FOUND_ATTRIBUTE + 1
let XML_CHECK_FOUND_CDATA = XML_CHECK_FOUND_TEXT + 1
let XML_CHECK_FOUND_ENTITYREF = XML_CHECK_FOUND_CDATA + 1
let XML_CHECK_FOUND_ENTITY = XML_CHECK_FOUND_ENTITYREF + 1
let XML_CHECK_FOUND_PI = XML_CHECK_FOUND_ENTITY + 1
let XML_CHECK_FOUND_COMMENT = XML_CHECK_FOUND_PI + 1
let XML_CHECK_FOUND_DOCTYPE = XML_CHECK_FOUND_COMMENT + 1
let XML_CHECK_FOUND_FRAGMENT = XML_CHECK_FOUND_DOCTYPE + 1
let XML_CHECK_FOUND_NOTATION = XML_CHECK_FOUND_FRAGMENT + 1
let XML_CHECK_UNKNOWN_NODE = XML_CHECK_FOUND_NOTATION + 1
let XML_CHECK_ENTITY_TYPE = XML_CHECK_UNKNOWN_NODE + 1
let XML_CHECK_NO_PARENT = XML_CHECK_ENTITY_TYPE + 1
let XML_CHECK_NO_DOC = XML_CHECK_NO_PARENT + 1
let XML_CHECK_NO_NAME = XML_CHECK_NO_DOC + 1
let XML_CHECK_NO_ELEM = XML_CHECK_NO_NAME + 1
let XML_CHECK_WRONG_DOC = XML_CHECK_NO_ELEM + 1
let XML_CHECK_NO_PREV = XML_CHECK_WRONG_DOC + 1
let XML_CHECK_WRONG_PREV = XML_CHECK_NO_PREV + 1
let XML_CHECK_NO_NEXT = XML_CHECK_WRONG_PREV + 1
let XML_CHECK_WRONG_NEXT = XML_CHECK_NO_NEXT + 1
let XML_CHECK_NOT_DTD = XML_CHECK_WRONG_NEXT + 1
let XML_CHECK_NOT_ATTR = XML_CHECK_NOT_DTD + 1
let XML_CHECK_NOT_ATTR_DECL = XML_CHECK_NOT_ATTR + 1
let XML_CHECK_NOT_ELEM_DECL = XML_CHECK_NOT_ATTR_DECL + 1
let XML_CHECK_NOT_ENTITY_DECL = XML_CHECK_NOT_ELEM_DECL + 1
let XML_CHECK_NOT_NS_DECL = XML_CHECK_NOT_ENTITY_DECL + 1
let XML_CHECK_NO_HREF = XML_CHECK_NOT_NS_DECL + 1
let XML_CHECK_WRONG_PARENT = XML_CHECK_NO_HREF + 1
let XML_CHECK_NS_SCOPE = XML_CHECK_WRONG_PARENT + 1
let XML_CHECK_NS_ANCESTOR = XML_CHECK_NS_SCOPE + 1
let XML_CHECK_NOT_UTF8 = XML_CHECK_NS_ANCESTOR + 1
let XML_CHECK_NO_DICT = XML_CHECK_NOT_UTF8 + 1
let XML_CHECK_NOT_NCNAME = XML_CHECK_NO_DICT + 1
let XML_CHECK_OUTSIDE_DICT = XML_CHECK_NOT_NCNAME + 1
let XML_CHECK_WRONG_NAME = XML_CHECK_OUTSIDE_DICT + 1
let XML_CHECK_NAME_NOT_NULL = XML_CHECK_WRONG_NAME + 1
let XML_I18N_NO_NAME = 6000
let XML_I18N_NO_HANDLER = XML_I18N_NO_NAME + 1
let XML_I18N_EXCESS_HANDLER = XML_I18N_NO_HANDLER + 1
let XML_I18N_CONV_FAILED = XML_I18N_EXCESS_HANDLER + 1
let XML_I18N_NO_OUTPUT = XML_I18N_CONV_FAILED + 1
let XML_BUF_OVERFLOW = 7000
let XML_CATA_PREFER_NONE = 0
let XML_CATA_PREFER_PUBLIC = 1
let XML_CATA_PREFER_SYSTEM = XML_CATA_PREFER_PUBLIC + 1
let XML_CATA_ALLOW_NONE = 0
let XML_CATA_ALLOW_GLOBAL = 1
let XML_CATA_ALLOW_DOCUMENT = 2
let XML_CATA_ALLOW_ALL = 3
let XML_EXP_EMPTY = 0
let XML_EXP_FORBID = 1
let XML_EXP_ATOM = 2
let XML_EXP_SEQ = 3
let XML_EXP_OR = 4
let XML_EXP_COUNT = 5

C! struct CXMLXPathObject {
    int type;
    xmlNodeSet *nodesetval;
    int boolval;
    double floatval;
    void *stringval;
    void *user;
    int index;
    void *user2;
    int index2;
}

C! struct CXMLNodeSet {
    int nodeNr; /* number of nodes in the set */
    int nodeMax; /* size of the array as allocated */
    void *nodeTab; /* array of nodes in no particular order */
    /* @@ with_ns to check whether namespace nodes should be looked at @@ */
}

function iter-node-set*(nodes: _) -> Generator[XMLNode] {
    let nodes = CXMLNodeSet(nodes)
    let table = ptr.typed(nodes.nodeTab, c.ptr)
    for i in ..nodes.nodeNr {
        yield XMLNode(table[i])
    }
}

C! struct CXMLAttr {
    void *private;    /* application data */
    int type;       /* XML_ATTRIBUTE_NODE, must be second ! */
    void *name;       /* the name of the property */
    void *children;   /* the value of the property */
    void *last;       /* NULL */
    void *parent;     /* child->parent link */
    void *next;       /* next sibling link  */
    void *prev;       /* previous sibling link  */
    void *doc;        /* the containing document */
    void *`ns`;         /* pointer to the associated namespace */
    int atype;      /* the attribute type if validating */
    void *psvi;       /* for type/PSVI informations */
}

class XMLAttr < CXMLAttr {
    children() {
        if let $p = CXMLNode.children.apply(self) {
            XMLNode(p)
        }
    }

    parent() {
        if let $p = CXMLNode.parent.apply(self) {
            XMLNode(p)
        }
    }

    next() {
        if let $p = CXMLNode.next.apply(self) {
            XMLNode(p)
        }
    }

    prev() {
        if let $p = CXMLNode.prev.apply(self) {
            XMLNode(p)
        }
    }

    last() {
        if let $p = CXMLNode.last.apply(self) {
            XMLNode(p)
        }
    }
}

C! struct CXMLValidCtxt {
    void *userData;			/* user specific data block */
    xmlValidityErrorFunc error;		/* the callback in case of errors */
    xmlValidityWarningFunc warning;	/* the callback in case of warning */

    /* Node analysis stack used when validating within entities */
    xmlNodePtr         node;          /* Current parsed Node */
    int                nodeNr;        /* Depth of the parsing stack */
    int                nodeMax;       /* Max depth of the parsing stack */
    xmlNodePtr        *nodeTab;       /* array of nodes */

    unsigned int     finishDtd;       /* finished validating the Dtd ? */
    xmlDocPtr              doc;       /* the document */
    int                  valid;       /* temporary validity check result */

    /* state state used for non-determinist content validation */
    xmlValidState     *vstate;        /* current state */
    int                vstateNr;      /* Depth of the validation stack */
    int                vstateMax;     /* Max depth of the validation stack */
    xmlValidState     *vstateTab;     /* array of validation states */

    void                     *am;
    void                  *state;
};

C! struct CXMLParserNodeInfoSeq {
  unsigned long maximum;
  unsigned long length;
  xmlParserNodeInfo* buffer;
};

C! struct CXMLParserCtxt {
    struct _xmlSAXHandler *sax;       /* The SAX handler */
    void            *userData;        /* For SAX interface only, used by DOM build */
    xmlDocPtr           myDoc;        /* the document being built */
    int            wellFormed;        /* is the document well formed */
    int       replaceEntities;        /* shall we replace entities ? */
    const xmlChar    *version;        /* the XML version string */
    const xmlChar   *encoding;        /* the declared encoding, if any */
    int            standalone;        /* standalone document */
    int                  html;        /* an HTML(1)/Docbook(2) document
                                       * 3 is HTML after <head>
                                       * 10 is HTML after <body>
                                       */

    /* Input stream stack */
    xmlParserInputPtr  input;         /* Current input stream */
    int                inputNr;       /* Number of current input streams */
    int                inputMax;      /* Max number of input streams */
    xmlParserInputPtr *inputTab;      /* stack of inputs */

    /* Node analysis stack only used for DOM building */
    xmlNodePtr         node;          /* Current parsed Node */
    int                nodeNr;        /* Depth of the parsing stack */
    int                nodeMax;       /* Max depth of the parsing stack */
    xmlNodePtr        *nodeTab;       /* array of nodes */

    int record_info;                  /* Whether node info should be kept */
    CXMLParserNodeInfoSeq_C node_seq;    /* info about each node parsed */

    int errNo;                        /* error code */

    int     hasExternalSubset;        /* reference and external subset */
    int             hasPErefs;        /* the internal subset has PE refs */
    int              external;        /* are we parsing an external entity */

    int                 valid;        /* is the document valid */
    int              validate;        /* shall we try to validate ? */
    CXMLValidCtxt_C     vctxt;        /* The validity context */

    xmlParserInputState instate;      /* current type of input */
    int                 token;        /* next char look-ahead */

    char           *directory;        /* the data directory */

    /* Node name stack */
    const xmlChar     *name;          /* Current parsed Node */
    int                nameNr;        /* Depth of the parsing stack */
    int                nameMax;       /* Max depth of the parsing stack */
    const xmlChar *   *nameTab;       /* array of nodes */

    long               nbChars;       /* unused */
    long            checkIndex;       /* used by progressive parsing lookup */
    int             keepBlanks;       /* ugly but ... */
    int             disableSAX;       /* SAX callbacks are disabled */
    int               inSubset;       /* Parsing is in int 1/ext 2 subset */
    const xmlChar *    intSubName;    /* name of subset */
    xmlChar *          extSubURI;     /* URI of external subset */
    xmlChar *          extSubSystem;  /* SYSTEM ID of external subset */

    /* xml:space values */
    int *              space;         /* Should the parser preserve spaces */
    int                spaceNr;       /* Depth of the parsing stack */
    int                spaceMax;      /* Max depth of the parsing stack */
    int *              spaceTab;      /* array of space infos */

    int                depth;         /* to prevent entity substitution loops */
    xmlParserInputPtr  entity;        /* used to check entities boundaries */
    int                charset;       /* encoding of the in-memory content
				         actually an xmlCharEncoding */
    int                nodelen;       /* Those two fields are there to */
    int                nodemem;       /* Speed up large node parsing */
    int                pedantic;      /* signal pedantic warnings */
    void              *_private;      /* For user data, libxml won't touch it */

    int                loadsubset;    /* should the external subset be loaded */
    int                linenumbers;   /* set line number in element content */
    void              *catalogs;      /* document's own catalog */
    int                recovery;      /* run in recovery mode */
    int                progressive;   /* is this a progressive parsing */
    xmlDictPtr         dict;          /* dictionary for the parser */
    const xmlChar *   *atts;          /* array for the attributes callbacks */
    int                maxatts;       /* the size of the array */
    int                docdict;       /* use strings from dict to build tree */

    /*
     * pre-interned strings
     */
    const xmlChar *str_xml;
    const xmlChar *str_xmlns;
    const xmlChar *str_xml_ns;

    /*
     * Everything below is used only by the new SAX mode
     */
    int                sax2;          /* operating in the new SAX mode */
    int                nsNr;          /* the number of inherited namespaces */
    int                nsMax;         /* the size of the arrays */
    const xmlChar *   *nsTab;         /* the array of prefix/namespace name */
    int               *attallocs;     /* which attribute were allocated */
    xmlStartTag       *pushTab;       /* array of data for push */
    xmlHashTablePtr    attsDefault;   /* defaulted attributes if any */
    xmlHashTablePtr    attsSpecial;   /* non-CDATA attributes if any */
    int                nsWellFormed;  /* is the document XML Namespace okay */
    int                options;       /* Extra options */

    /*
     * Those fields are needed only for streaming parsing so far
     */
    int               dictNames;    /* Use dictionary names for the tree */
    int               freeElemsNr;  /* number of freed element nodes */
    xmlNodePtr        freeElems;    /* List of freed element nodes */
    int               freeAttrsNr;  /* number of freed attributes nodes */
    xmlAttrPtr        freeAttrs;    /* List of freed attributes nodes */

    /*
     * the complete error information for the last error.
     */
    xmlError          lastError;
    xmlParserMode     parseMode;    /* the parser mode */
    unsigned long    nbentities;    /* number of entities references */
    unsigned long  sizeentities;    /* size of parsed entities */

    /* for use by HTML non-recursive parser */
    xmlParserNodeInfo *nodeInfo;      /* Current NodeInfo */
    int                nodeInfoNr;    /* Depth of the parsing stack */
    int                nodeInfoMax;   /* Max depth of the parsing stack */
    xmlParserNodeInfo *nodeInfoTab;   /* array of nodeInfos */

    int                input_id;      /* we need to label inputs */
    unsigned long      sizeentcopy;   /* volume of entity copy */
};

C! struct XMLNs {
    void *next;       /* next Ns link for this node  */
    int xmlNsType;  /* global or local */
    void *href;       /* URL for the namespace */
    void *prefix;     /* prefix for the namespace */
    void *private;    /* application data */
    void *contextx;   /* normally an xmlDoc */
};

C! struct CXMLNode {
    void *private;    /* application data */
    int type;       /* type number, must be second ! */
    void *name;       /* the name of the node, or the entity */
    void *children;   /* parent->childs link */
    void *last;       /* last child link */
    void *parent;     /* child->parent link */
    void *next;       /* next sibling link  */
    void *prev;       /* previous sibling link  */
    void *doc;        /* the containing document */

    /* End of common part */
    void *`ns`;         /* pointer to the associated namespace */
    void *content;    /* the content */
    void *properties; /* properties list */
    void *nsDef;      /* namespace definitions on this node */
    void *psvi;       /* for type/PSVI informations */
    unsigned short line;    /* line number */
    unsigned short extra;    /* extra data for XPath/XSLT */
}

C! struct CXMLDoc {
    void           *_private;	/* application data */
    int  type;       /* XML_DOCUMENT_NODE, must be second ! */
    char           *name;	/* name/filename/URI of the document */
    struct _xmlNode *children;	/* the document tree */
    struct _xmlNode *last;	/* last child link */
    struct _xmlNode *parent;	/* child->parent link */
    struct _xmlNode *next;	/* next sibling link  */
    struct _xmlNode *prev;	/* previous sibling link  */
    struct _xmlDoc  *doc;	/* autoreference to itself */

    /* End of common part */
    int             compression;/* level of zlib compression */
    int             standalone; /* standalone document (no external refs)
				     1 if standalone="yes"
				     0 if standalone="no"
				    -1 if there is no XML declaration
				    -2 if there is an XML declaration, but no
					standalone attribute was specified */
    struct _xmlDtd  *intSubset;	/* the document internal subset */
    struct _xmlDtd  *extSubset;	/* the document external subset */
    struct _xmlNs   *oldNs;	/* Global namespace, the old way */
    const xmlChar  *version;	/* the XML version string */
    const xmlChar  *encoding;   /* external initial encoding, if any */
    void           *ids;        /* Hash table for ID attributes if any */
    void           *refs;       /* Hash table for IDREFs attributes if any */
    const xmlChar  *URL;	/* The URI for that document */
    int             charset;    /* Internal flag for charset handling,
				   actually an xmlCharEncoding */
    struct _xmlDict *dict;      /* dict used to allocate names or NULL */
    void           *psvi;	/* for type/PSVI information */
    int             parseFlags;	/* set of xmlParserOption used to parse the
				   document */
    int             properties;	/* set of xmlDocProperties for this document
				   set at the end of parsing */
};

C! struct CXMLXPathContext {
    xmlDoc *doc;			/* The current document */
    xmlNode *node;			/* The current node */

    int nb_variables_unused;		/* unused (hash table) */
    int max_variables_unused;		/* unused (hash table) */
    xmlHashTable *varHash;		/* Hash table of defined variables */

    int nb_types;			/* number of defined types */
    int max_types;			/* max number of types */
    xmlXPathType *types;		/* Array of defined types */

    int nb_funcs_unused;		/* unused (hash table) */
    int max_funcs_unused;		/* unused (hash table) */
    xmlHashTable *funcHash;		/* Hash table of defined funcs */

    int nb_axis;			/* number of defined axis */
    int max_axis;			/* max number of axis */
    xmlXPathAxis *axis;		/* Array of defined axis */

    /* the namespace nodes of the context node */
    xmlNs **namespaces;		/* Array of namespaces */
    int nsNr;				/* number of namespace in scope */
    void *user;				/* function to free */

    /* extra variables */
    int contextSize;			/* the context size */
    int proximityPosition;		/* the proximity position */

    /* extra stuff for XPointer */
    int xptr;				/* is this an XPointer context? */
    xmlNode *here;			/* for here() */
    xmlNode *origin;			/* for origin() */

    /* the set of namespace declarations in scope for the expression */
    xmlHashTable *nsHash;		/* The namespaces hash table */
    xmlXPathVariableLookupFunc varLookupFunc;/* variable lookup func */
    void *varLookupData;		/* variable lookup data */

    /* Possibility to link in an extra item */
    void *extra;                        /* needed for XSLT */

    /* The function name and URI when calling a function */
    const xmlChar *func;
    const xmlChar *functionURI;

    /* function lookup function and data */
    xmlXPathFuncLookupFunc funcLookupFunc;/* function lookup func */
    void *funcLookupData;		/* function lookup data */

    /* temporary namespace lists kept for walking the namespace axis */
    xmlNs **tmpNsList;		/* Array of namespaces */
    int tmpNsNr;			/* number of namespaces in scope */

    /* error reporting mechanism */
    void *userData;                     /* user specific data block */
    xmlStructuredErrorFunc error;       /* the callback in case of errors */
    xmlError lastError;			/* the last error */
    xmlNode *debugNode;		/* the source node XSLT */

    /* dictionary */
    xmlDict *dict;			/* dictionary if any */

    int flags;				/* flags to control compilation */

    /* Cache for reusal of XPath objects */
    void *cache;

    /* Resource limits */
    unsigned long opLimit;
    unsigned long opCount;
    int depth;
};

/**
 * xmlXPathParserContext:
 *
 * An XPath parser context. It contains pure parsing information,
 * an xmlXPathContext, and the stack of objects.
 */
C! struct CXMLXPathParserContext {
    const xmlChar *cur;			/* the current char being parsed */
    const xmlChar *base;			/* the full expression */

    int error;				/* error code */

    xmlXPathContext *context;	/* the evaluation context */
    xmlXPathObject *value;	/* the current value */
    int valueNr;	/* number of values stacked */
    int valueMax;	/* max number of values stacked */
    xmlXPathObject **valueTab;	/* stack of values */

    xmlXPathCompExpr *comp;		/* the precompiled expression */
    int xptr;				/* it this an XPointer expression */
    xmlNode *        ancestor;	/* used for walking preceding axis */

    int              valueFrame;        /* used to limit Pop on the stack */
};

C! pub libxml fn xmlXPathNewContext(c.ptr) -> c.ptr;

C! pub libxml fn {
    xmlNode *xmlReplaceNode(
        xmlNode *old,
        xmlNode *cur
    );

    void xmlUnlinkNode(
        xmlNode *node
    );

    xmlDoc *xmlReadDoc(
        char const *contents,
        char const *url,
        char const *encoding,
        int options
    );

    xmlDoc *xmlReadFile(
        char const *url,
        char const *encoding,
        int options
    );

    xmlDoc *xmlParseDoc(
        char const *contents
    );

    xmlSaveCtxt *xmlSaveToFd(
        int fd,
        char const *encoding,
        int options
    );

    long xmlSaveDoc(
        xmlSaveCtxt *ctx,
        xmlDoc *doc
    );

    xmlBuffer *xmlBufferCreate();

    c.void xmlBufferFree(xmlBuffer *buf);

    char const *xmlBufferContent(xmlBuffer const *buf);

    int xmlNodeDump(
        xmlBuffer *buf,
        xmlDoc *doc,
        xmlNode *cur,
        int level,
        int format
    );

    c.void xmlDocDumpFormatMemoryEnc(
        xmlDoc *doc,
        char **mem,
        int *size,
        char const *encoding,
        int format
    );

    c.void xmlMemFree(void *mem);

    c.int xmlSaveClose(xmlSaveCtxt *ctxt);

    xmlParserCtxt *xmlNewParserCtxt(void);
    c.void xmlFreeParserCtxt(xmlParserCtxt *ctxt);
    xmlNode *xmlParseBalancedChunkMemory(
        xmlParserCtxt *ctxt,
        xmlNode *node,
        char *chunk,
        int size
    );
    xmlDoc *xmlNewDoc(const xmlChar *version);
    xmlNode *xmlNewNode(xmlNs *_ns, const xmlChar *name);
    c.void xmlDocSetRootElement(xmlDoc *doc, xmlNode *root);
    c.void xmlAddChild(xmlNode *parent, xmlNode *child);

    xmlChar *xmlGetProp(xmlNode *node, xmlChar const *key);
    xmlAttr *xmlSetProp(xmlNode *node, xmlChar const *key, xmlChar const *value);
    int xmlRemoveProp(xmlAttr *attr);
    int xmlUnsetProp(xmlNode *node, xmlChar const *key);

    char *xmlNodeGetContent(xmlNode *node);

    c.void xmlInitParser();
    c.void xmlInitMemory();

    xmlXPathObject *xmlXPathEvalExpression(
        const xmlChar *expr,
        xmlXPathContext *ctx
    );

    int xmlXPathRegisterFunc(
        xmlXPathContext *ctx,
        const xmlChar *name,
        xmlXPathFunction *f
    );

    xmlChar *xmlXPathPopString(xmlXPathParserContext *ctxt);

    xmlChar *xmlXPathCastToString(xmlXPathObject *obj);

    xmlXPathObject *xmlXPathNewBoolean(int val);
    xmlXPathObject *xmlXPathNewFloat(double);
    xmlXPathObject *xmlXPathNewString(xmlChar *val);

    int valuePush(xmlXPathContext *ctxt, xmlXPathObject *obj);
    xmlXPathObject *valuePop(xmlXPathContext *ctxt);

    void xmlXPathFreeObject(xmlXPathObject *obj);

    xmlNode *xmlDocGetRootElement(xmlDoc *doc);

    xmlSchemaParserCtxt   *xmlSchemaNewMemParserCtxt(const char *buffer, int size);
    xmlSchema             *xmlSchemaParse(xmlSchemaParserCtxt *ctxt);
    void                   xmlSchemaFreeParserCtxt(xmlSchemaParserCtxt *ctxt);
    void                   xmlSchemaFree(xmlSchema *schema);
    xmlSchemaValidCtxt    *xmlSchemaNewValidCtxt(xmlSchema *schema);
    int                    xmlSchemaValidateDoc(xmlSchemaValidCtxt *vctxt, xmlDoc *doc);
    void                   xmlSchemaFreeValidCtxt(xmlSchemaValidCtxt *vctxt);

    void xmlSchemaSetValidErrors(
        xmlSchemaValidCtxt *vctxt,
        xmlSchemaValidityErrorFunc err,
        xmlSchemaValidityWarningFunc warn,
        void *ctx
    );
    void xmlSchemaSetParserErrors(
        xmlSchemaParserCtxt *pctxt,
        xmlSchemaValidityErrorFunc err,
        xmlSchemaValidityWarningFunc warn,
        void *ctx
    );
}

pub xmlFree = c::wrap(libxml, 'xmlFree', c.void, c.ptr, func-ptr?=true)

class XMLAttrSet {
    __node: CXMLNode
    
    init(node: CXMLNode) {
        __node = node
    }

    [](key: String) -> String | nil {
        if let $ptr = xmlGetProp(__node, key.cstr()) {
            defer c::free(ptr)
            c.str(ptr)
        }
    }

    delete(key: String) {
        if let $val = self[key] {
            xmlUnsetProp(__node, key.cstr())
            val
        }
    }

    []=(key: String, val: String) -> String {
        xmlSetProp(__node, key.cstr(), val.cstr())
        val
    }

    __missing__(name: String) {
        self[name]
    }

    dict {
        if let $props = __node.properties {
            let propMap = %{}

            for let child = XMLNode(props); child != nil; child = child.next {
                propMap[child.name] = child.content
            }

            return propMap
        } else {
            return %{}
        }
    }
}

class XMLNode : Iterable[XMLNode] {
    __node: CXMLNode

    init(node: _) {
        __node = CXMLNode(node)
    }

    ptr {
        __node.__ptr__()
    }

    ==(other: XMLNode) {
        self.ptr == other.ptr
    }

    children -> ?XMLNode {
        if let $p = __node.children {
            XMLNode(p)
        }
    }

    content -> String {
        c.str(CXMLNode(__node.children).content)
    }

    name -> String {
        c.str(__node.name)
    }

    parent -> ?XMLNode {
        if let $p = __node.parent {
            XMLNode(p)
        }
    }

    next -> ?XMLNode {
        if let $p = __node.next {
            XMLNode(p)
        }
    }

    prev -> ?XMLNode {
        if let $p = __node.prev {
            XMLNode(p)
        }
    }

    last -> ?XMLNode {
        if let $p = __node.last {
            XMLNode(p)
        }
    }

    props -> XMLAttrSet {
        XMLAttrSet(__node)
    }

    swap(other: XMLNode) -> XMLNode {
        if let $old = xmlReplaceNode(__node, other.__node) {
            __node = other.__node
            XMLNode(old)
        } else {
            self
        }
    }

    unlink() {
        xmlUnlinkNode(__node)
    }

    addChild(other: XMLNode) {
        xmlAddChild(__node, other.__node)
    }

    content {
        let ptr = xmlNodeGetContent(__node)
        defer xmlFree(ptr)
        c.str(ptr)
    }

    innerXML -> String {
        let buf = xmlBufferCreate()
        defer xmlBufferFree(buf)
        for child in self {
            xmlNodeDump(buf, __node.doc, child.ptr, 0, 0)
        }
        return c.str(xmlBufferContent(buf))
    }

    outerXML -> String {
        let buf = xmlBufferCreate()
        defer xmlBufferFree(buf)
        xmlNodeDump(buf, __node.doc, self.ptr, 0, 0)
        return c.str(xmlBufferContent(buf))
    }

    __iter__*() -> Generator[XMLNode] {
        for let node = self; node != nil; node = node.next {
           yield node
       }
    }

    __str__() -> String {
        pretty({
            addr: __node.__ptr__(),
            name: name,
            content: __node.content,
            next: __node.next,
            prev: __node.prev,
            parent: __node.parent

        })
    }
}

class XMLSelection : Iterable[XMLNode] {
    __doc: Document
    __nodes: Array[XMLNode]

    init(__doc: Document, nodes: ?[XMLNode]) {
       __nodes = nodes ?? []
    }

    __count__() -> Int {
        #__nodes
    }

    unlink() {
        for __nodes { it.unlink() }
    }

    [](expr: String) -> XMLSelection {
        return XMLSelection(__doc, [*__doc[expr]].filter(\_ in __nodes))
    }

    [](p: XMLNode -> Any) -> XMLSelection {
        return XMLSelection(__doc, __nodes.filter(p))
    }

    __iter__() -> Generator[XMLNode] {
        __nodes.__iter__()
    }
}

class Document {
    __doc: CXMLDoc
    __xpath_ctx: _
    __closures: Dict[String, _]

    init(doc: _) {
        __doc = CXMLDoc(doc)
        __xpath_ctx = xmlXPathNewContext(doc)
        __closures = %{}
    }

    ptr {
        __doc.__ptr__()
    }

    __ptr__() {
        __doc.__ptr__()
    }

    root {
        XMLNode(xmlDocGetRootElement(__doc))
    }

    register-func(name: String, func: _) {
        C! closure c-func(ctx: c.ptr, argc: c.int) -> c.void {
            let args = []

            for ..argc {
                let object = CXMLXPathObject(valuePop(ctx))
                args.push(
                    match object.type {
                        ::XPATH_STRING  => c.str(xmlXPathCastToString(object)),
                        ::XPATH_BOOLEAN => Bool(object.boolval),
                        ::XPATH_NUMBER  => object.floatval,
                        ::XPATH_NODESET => [*iter-node-set(object.nodesetval)]
                    }
                )
            }

            valuePush(ctx, match func(*args) {
                x: Int | Float => xmlXPathNewFloat(x),
                x: String      => xmlXPathNewString(x.cstr()),
                x: Bool        => xmlXPathNewBoolean(int(x)),
                _              => xmlXPathNewBoolean(0)
            })

        }

        if xmlXPathRegisterFunc(__xpath_ctx, name.cstr(), c-func) != 0 {
            throw XMLError("failed to register '{name}'")
        }

        __closures[name] = (c-func, func)
    }

    register-func(func: _) {
        register-func(Function.name(func), func)
    }

    children -> XMLNode {
        XMLNode(__doc.children)
    }

    [](expr: String) -> Generator[XMLNode] {
        let expr = expr.cstr()
        let xpath = CXMLXPathObject(xmlXPathEvalExpression(expr.cstr(), __xpath_ctx))
        return iter-node-set(xpath.nodesetval)
    }

    select(expr: String) -> XMLSelection {
        XMLSelection(self, [*self[expr]])
    }

    first(expr: String) -> ?XMLNode {
        self[expr]().or-else(nil)
    }

    dump(options: Int = 0) -> Int {
        let ctx = xmlSaveToFd(1, nil, options)
        xmlSaveDoc(ctx, __doc)
        xmlSaveClose(ctx)
    }
}

class Schema {
    __schema: _
    
    init(schema: _) {
        __schema = schema
    }

    static parse(schema: String | Blob) -> Schema {
        let parser = xmlSchemaNewMemParserCtxt(schema, #schema)
        defer xmlSchemaFreeParserCtxt(parser)
        return Schema(xmlSchemaParse(parser))
    }

    validate(doc: Document) -> (Array[String], Array[String]) {
        let ctx = xmlSchemaNewValidCtxt(__schema)
        defer xmlSchemaFreeValidCtxt(ctx)

        let errors = []
        let warnings = []
        
        C! closure onWarn(ctx: c.ptr, msg: c.ptr) {
            warnings.push(c.str(msg))
        }

        C! closure onError(ctx: c.ptr, msg: c.ptr) {
            errors.push(c.str(msg))
        }

        defer c.freeClosure(onWarn)
        defer c.freeClosure(onError)

        xmlSchemaSetValidErrors(ctx, onError, onWarn)
        xmlSchemaSetParserErrors(ctx, onError, onWarn)

        xmlSchemaValidateDoc(ctx, doc)

        return (errors, warnings)
    }
}

pub fn read(
    path: String,
    encoding: ?String = nil,
    options: Int = XML_PARSE_NOBLANKS
) -> Document {
    Document(xmlReadFile(path.cstr(), encoding, options))
}

pub fn parse(
    doc: String | Blob,
    url: ?String = nil,
    encoding: ?String = nil,
    options: Int = XML_PARSE_NOBLANKS
) -> Document {
    Document(xmlReadDoc(doc, url, encoding, options))
}

pub fn xml(parts) {
    let buf = Blob()
    let holes = []

    let name = "__hole-{uuid4().comb(/-/)}"

    for match parts {
        str: String => {
            buf.push(str)
        },

        (node: XMLNode, *) => {
            buf.push("<{name} i=\"{#holes}\" />")
            holes.push(node)
            //node.unlink()
        },
        
        (x, *) => {
            buf.push("{x}")
        }
    }

    buf.push(0)

    if not let $doc = xmlReadDoc(buf) {
        throw XMLError(parts)
    }

    let doc = Document(doc)

    fn go(node: XMLNode) -> XMLNode {
        if node.name == name and let $i = int(node.props['i']) {
            return holes[i]
        }

        for child in (node.children ?? []) {
            child.swap(go(child))
        }

        node
    }

    for child in doc.children {
        child.swap(go(child))
    }

    doc
}


#|if 0
pub fn test(node: XMLNode) -> Document {
    cast(xml"<main><test based=\"true\">Fresh strawberries.{node}</test></main>")
}

pub fn test2() {
    let doc = parse('''
        <based>
            Here is some text.
            <keyed id="based">Raspberries</keyed>
            <keyed id="cringe">Mangoes</keyed>
        </based>
    ''')

    doc.register-func('lowkey', fn (x) {
        dbg(x)
        0
    })

    for node in doc['//keyed[lowkey(.)]'] {
        print(node)
    }
}
#|]
