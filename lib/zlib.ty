import ffi as c (C!, struct!, wrap)

let Z_OK            = 0
let Z_STREAM_END    = 1
let Z_NEED_DICT     = 2
let Z_ERRNO         = (-1)
let Z_STREAM_ERROR  = (-2)
let Z_DATA_ERROR    = (-3)
let Z_MEM_ERROR     = (-4)
let Z_BUF_ERROR     = (-5)
let Z_VERSION_ERROR = (-6)

let Z_NO_FLUSH      = 0
let Z_PARTIAL_FLUSH = 1
let Z_SYNC_FLUSH    = 2
let Z_FULL_FLUSH    = 3
let Z_FINISH        = 4
let Z_BLOCK         = 5
let Z_TREES         = 6

let MAX_WBITS = 15

if not let $lib = c.open('z', [nil, 1]) {
  throw "Failed to load zlib"
}

C! struct ZStream {
    c.ptr next_in;     /* next input byte */
    c.uint avail_in;  /* number of bytes available at next_in */
    c.ulong total_in;  /* total number of input bytes read so far */

    c.ptr next_out; /* next output byte will go here */
    c.uint avail_out; /* remaining free space at next_out */
    c.ulong total_out; /* total number of bytes output so far */

    c.ptr msg;  /* last error message, NULL if no error */
    c.ptr state;

    c.ptr zalloc; /* used to allocate the internal state */
    c.ptr zfree;  /* used to free the internal state */
    c.ptr opaque; /* private data object passed to zalloc and zfree */

    c.int data_type;  /* best guess about the data type: binary or text
                           for deflate, or the decoding state for inflate */
    c.ulong adler;      /* Adler-32 or CRC-32 value of the uncompressed data */
    c.ulong reserved;   /* reserved for future use */
}

let cCompressBound = wrap(lib, 'compressBound', c.ulong, c.ulong)
let cCompress = wrap(lib, 'compress', c.int, c.ptr, c.ptr, c.ptr, c.ulong)
let cUncompress = wrap(lib, 'uncompress', c.int, c.ptr, c.ptr, c.ptr, c.ulong)

C! lib fn inflateInit2_(c.ptr, c.int, c.ptr, c.int) -> c.int
C! lib fn inflate(c.ptr, c.int) -> c.int
C! lib fn inflateEnd(c.ptr) -> c.int

C! lib function crc32(c.u32, c.ptr, c.u64) -> c.u32

pub function compress(s: String | Blob) {
  let bound = cCompressBound(s.size())
  let $pSize = c.new(c.ulong, bound)
  let $buffer = c.alloc(bound)

  if let err = cCompress(buffer, pSize, s, s.size()) and err != Z_OK {
    throw Err(err)
  }

  let compressed = Blob(c.as_str(buffer, c.load(c.ulong, pSize)))

  c.free(pSize)
  c.free(buffer)

  return compressed
}

pub function uncompress(s: String | Blob, maxSize = nil) {
  let size = 4096
  let $pSize = c.new(c.ulong, size)
  let $buffer = c.alloc(size)

  defer {
    c.free(pSize)
    c.free(buffer)
  }

  while match cUncompress(buffer, pSize, s, s.size()) {
    ::Z_OK => break,

    ::Z_BUF_ERROR => {
      size *= 2

      if maxSize != nil && size > maxSize {
        return nil
      }

      c.store(c.ulong, pSize, size)
      c.free(buffer)
      $buffer = c.alloc(size)
    },

    err => {
      throw Err(err)
    }
  }

  return Blob(c.as_str(buffer, c.load(c.ulong, pSize)))
}

pub function uncompress2(s: String | Blob, maxSize) {
  let CHUNK = 4096

  let zs = ZStream()
  inflateInit2_(zs.get(), MAX_WBITS + 32, "1.2.11", c.size(ZStream_C))
  zs.next_in = s
  zs.avail_in = s.size()

  let blob = Blob()
  let obuf = c.alloc(CHUNK)

  defer {
    c.free(obuf)
    inflateEnd(zs.get())
  }

  let have = nil

  while have == nil || have == CHUNK {
    zs.avail_out = CHUNK
    zs.next_out = obuf

    let r = inflate(zs.get(), Z_NO_FLUSH)

    match r {
      ze :: Z_DATA_ERROR | Z_NEED_DICT | Z_MEM_ERROR => {
        throw Err(ze)
      },

      _ => {
        have = CHUNK - zs.avail_out
        blob.push(obuf, have)
      }
    }
  }

  return blob
}

pub crc32 = fn (s: String | Blob) -> Int {
    crc32(0, s, s.size())
}

function test() {
  let data = 'Hello, world!'.repeat(5000)

  let compressed = compress(data)
  let uncompressed = uncompress(compressed)

  print(data.size, compressed.size, uncompressed.size)
}
