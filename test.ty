import os (..)
import sh (sh)
import chalk (..)
import time
import tp (ThreadPool)
import ty
import ffi as c (C!)

let start = time.now()

let passed = Sync(0)
let failed = Sync(0)
let timedOut = Sync(0)

fn +[T, U, V](x: Sync[T], y: Sync[U]) -> V where (T + U): V {
    Sync.read(x) + Sync.read(y)
}

let g = chalk['bold green']
let r = chalk['bold red']
let m = chalk['bold bright magenta']
let b = chalk['bold blue']

let TY_PATH = getenv('TY_PATH') ?? ty.executable

let q = (ty.q ? '-q' : '')

fn getTyCommand(test) {
#|if __windows__
        "{TY_PATH} {q} tests\\{test}"
#|else
        "{TY_PATH} {q} tests/{test}"
#|]
}

C! fn strsignal(c.int) -> c.ptr;

fn doTest(name: String) {
    let testStart = time.now()

    let _, result = sh(getTyCommand(name), timeoutMs=2000)

    let msg = match result {
        nil => do {
            timedOut += 1
            m('TIMEOUT')
        },

        {stdout: 'PASS\n', stderr: '', status: 0, signal: nil} => do {
            passed += 1

            let elapsed = (time.now() - testStart)
            let elapsed = match elapsed <=> 0.1 {
                1 => "({elapsed:.2g}s)",
                _ => "({1000 * elapsed:d}ms)",
            }

           chalk"[bright green bold]PASS[/] [bright yellow]{elapsed}[/]"
        },

        _ => do {
            failed += 1
            [

                r('FAIL'),
                m("  (exit status: {result.status})") if result.status != 0,
                b("  ({c.as_str(strsignal(result.signal))})") if result.signal != nil,
                chalk"\n[magenta]================ [bold yellow]STDOUT[/] ====================================[/]\n",
                result.stdout,
                r('~~~~~'),
                chalk"\n[magenta]================ [bold yellow]STDERR[/] ====================================[/]\n",
                result.stderr,
                r('~~~~~'),
                chalk"\n[magenta]============================================================[/]\n",
            ].str()
        }
    }

    print("{b("{name.comb(/\.ty$/):16}")} ... {msg}")
}

let pool = ThreadPool(os.ncpu(), doTest)
let fs = []

for test in listdir('tests') if test.match?(/\.ty$/) {
    fs.push(pool.submit(test))
}

fs.map(&wait)
print()

let elapsedSec = (time.now() - start)

if passed > 0 {
    print("{g('Passed')}: {g(passed)}")
}

if failed > 0 {
    print("{r('Failed')}: {r(failed)}")
}

if timedOut > 0 {
    print("{m('Timed out')}: {m(timedOut)}")
}

print()

print("{b('Elapsed')}: {b("{elapsedSec:.4}s")}")

exit(failed + timedOut)
