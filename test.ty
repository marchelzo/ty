import os (..)
import sh (sh)
import chalk (..)
import time

let start = time.utime()

let passed = Sync(0)
let failed = Sync(0)
let timedOut = Sync(0)

let g = pen(bold, green)
let r = pen(bold, red)
let m = pen(bold, brightMagenta)
let b = pen(bold, blue)

let r2 = x -> round(x * 100) / 100

let testThreads = []
let tests = listdir('tests')
for test in listdir('tests') {
    testThreads.push(Thread(name -> {
        let testStart = time.utime()

        let result = match sh("./ty tests/{name}", timeoutMs: 2000) {
            nil => {
                timedOut.modify(${it + 1})
                m('TIMEOUT')
            },

            &strip ~> 'PASS' => {
                passed.modify(${it + 1})

                let elapsedMs = (time.utime() - testStart) / 1000.0

                let elapsed = match elapsedMs <=> 100.0 {
                    -1 => "({round(elapsedMs)}ms)",
                    _  => "({r2(elapsedMs / 1000.0)}s)"
                }

                "{g('PASS')} {yellow(elapsed)}"
            },

            _ => {
                failed.modify(${it + 1})
                r('FAIL')
            }
        }

        print("{b(name.comb(/\.ty$/).padLeft(14))} ... {result}")
    }, test))
}

testThreads.map(&join)
print()

let elapsedSec = (time.utime() - start) / (1000.0 * 1000.0)

if passed.get() > 0 {
    print("{g('Passed')}: {g(passed.get())}")
}

if failed.get() > 0 {
    print("{r('Failed')}: {r(failed.get())}")
}

if timedOut.get() > 0 {
    print("{m('Timed out')}: {m(timedOut.get())}")
}

print()

print("{b('Elapsed')}: {b(str(elapsedSec) + 's')}")
