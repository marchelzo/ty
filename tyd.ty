#!/usr/local/bin/ty -q

import io (stdin)
import json
import sh (sh)
import os (..)
import help (pretty)
import log (..)

logging({
    path: './tyd.log',
    level: INFO
})

let i = 0
let TY_CMD = 'ty'

let init = {
    capabilities: {
        definitionProvider: true,
        declarationProvider: true,
        hoverProvider: true,
        completionProvider: {
            triggerCharacters: ['.']
        },
        //signatureHelpProvider: {
        //    triggerCharacters: ['(', ','],
        //    retriggerCharacters: [')']
        //},
        textDocumentSync: {
            openClose: true,
            save: true,
            change: 1
       }
    },

    serverInfo: {
        name: 'tyd',
        version: '0.0.1'
    }
}

let err-fd = open('tyls.err', O_WRONLY | O_TRUNC | O_CREAT, 0644)
dup2(err-fd, 2)

let tyls = os.spawn(['/Users/brad/ty/tyls'], shareStderr=true)
critical!(tyls)

//let responses = io.open(tyls.stdout, 'r', buffering=io.NBF)
//critical!(responses)

onExit(fn () {
    kill(tyls.pid, SIGTERM)
})

fn get() {
    if not let $line = read(tyls.stdout, 8192) ?> &str! {
        critical!("DEAD: {waitpid(tyls.pid)}")
        return nil
    } else {
        warn!("TYLS OUTPUT: {line}")
        return line
    }
}

use Request = {
    file: String,
    what: Int,
    ?line: Int,
    ?col: Int
}

fn do-req(msg: Request) {
    error!("REQUEST TO TYLS: {msg}")
    let n = write(tyls.stdin, "{json.encode(msg)}\n")
    error!("WROTE {n} BYTES TO TYLS")
    get()
}

fn run(request: Request) {
    do-req({
        what: 0,
        file: request.file,
        source: store[request.file]
    })

    if not let $line = do-req(request) {
        throw "NO RESPONSE"
    }

    return json.parse(line)
}


info!(pretty(init, width=72))

let store: Dict[String, String] = %{}

fn relpath(path: String) {
    let cwd = getcwd().split(/\\|\//)
    let path = path.split(/\\|\//)

    while cwd && path && cwd[0] == path[0] {
        path.pop(0)
        cwd.pop(0)
    }

    path.join('/')
}

fn send(msg) {
    info!("SEND {pretty(msg, width=72)}")
    let encoded = json.encode(msg)
    io.stdout.write("Content-Length: {#encoded}\r\n\r\n{encoded}")
    io.stdout.flush()
}

fn check-file(path: String) {
    return
    info!("path = {path}")
    let out, info = run("-c", path)
    let { status, * } = info
    info!("out = {out}")
    info!("status = {status}")
    let file = path

    let msg = json.encode({
        what: 0,
        file: path,
        source: store[path]
    })

    write(tyls.stdin, "{msg}\n")


    try {
        let diagnostics = (status == 0) ? [] : match json.parse(out) {
            %{
                message,
                'trace': &0 ~> %{ start, end, 'file': >file }
            } => [{
                range: {
                    start: { line: start['line'] - 1, character: start['col'] - 1 },
                    end: { line: end['line'] - 1, character: end['col'] - 1 }
                },
                message,
                severity: 1
            }]
        }

        send({
            method: 'textDocument/publishDiagnostics',
            params: {
                uri: "file://{file}",
                diagnostics
            }
        })
    } catch _ {
        info!("Failed to parse diagnostics: {out}")
    }
}

let skip = [
    /^[^A-z_]+$/,
    /^__.*(?<!__)$/
]

fn go() {
    if not let $line = stdin.nextLine() {
        exit(0)
    }

    let &words $~> &[-1] ~> int ~> $n = line

    // Skip empty line
    stdin.nextLine()

    let req = stdin.next(n).str()
    let msg: _ = json.parse(req)
    let id = msg['id']

    info!(pretty(msg, oneline=true))

    match msg['method'] {
        'initialize' => {
            send({id, result: init})
        },

        'textDocument/didChange' => {
            if let %{
                'textDocument': %{
                    'uri': &[7;] ~> $path,
                },

                'contentChanges': [
                    %{'text': text}
                ]
            } = msg['params'] {
                store[path] = text
            }
        },

        'textDocument/didSave' => {
            if let %{
                'textDocument': %{
                    'uri': &[7;] ~> $path,
                }
            } = msg['params'] {
                check-file(path)
            }
        },

        ('textDocument/definition' or 'textDocument/declaration') as method => {
            let %{
                'textDocument': %{
                    'uri': &slice(7) ~> $path,
                },

                'position': %{
                    'line': int ~> line,
                    'character': int ~> col
                }
            } = msg['params']

            let result = match run({file: path, what: 1, line, col}) {
                %{file, line, col} => {
                    uri: file.match?(/^\/dev\//) ? "file://{path}" : "file://{realpath(file)}",
                    range: {
                        start: { line: line - 1, character: col - 1 },
                        end:   { line: line - 1, character: col + 1 }
                    }
                },

                _ => nil
            }

            let response = {id, result}
            info!(response)
            send(response)
        },

        'textDocument/hover' as method => {
            let %{
                'textDocument': %{
                    'uri': &[7;] ~> $path,
                },
                'position': %{
                    'line': int ~> line,
                    'character': int ~> col
                }
            } = msg['params']

            fn nice(doc) {
                if doc == nil { return '' }
                let lines: _ = doc.comb(/^\n+|\n+$/).lines()
                let pre = lines.map(/^\s*/).map(`#`).min() ?? 0
                lines.map(&[pre;]).unlines().strip()
            }

            let result = match run({file: path, what: 1, line, col}) {
                $info => {
                    contents: {
                        kind: 'plaintext',
                        value: "
                      \>{info['name']} : {info['type']}
                      \>
                      \>Defined at {relpath(info['file'])}:{info['line']}.
                      \>
                      \>{nice(info['doc'])}
                      \>"
                    }
                    //range: {
                    //    start: { line: line - 6, character: col - 1 },
                    //    end:   { line: line - 3, character: col + 24 }
                    //}
                },

                _ => nil
            }

            send({id, result})
        },

        'textDocument/signatureHelp' as method => {
            return

            if not let %{
                'textDocument': %{
                    'uri': &[7;] ~> path: String,
                },

                'position': %{
                    'line': int ~> line,
                    'character': int ~> col
                }
            } = msg['params'] {
                return
            }

            if not let $source = store[path] {
                return
            }

            info!("col={col}")
            info!(source.lines()[line].chars().enumerate())

            let result = if source.lines()[line][col - 1] == ')' {
                nil
            } else {
                let out, {status, *} = run("-t s{line + 1}:{col + 1}", path)

                info!("out = {out}")
                info!("status = {status}")

                match (status, out) {
                    (0, json.parse $~> %{signatures}) => ({
                        signatures: signatures.map(%{params, proto, doc, name, type} -> {
                            label: name ? "{name}{proto}" : type,
                            documentation: doc,
                            parameters: params
                        })
                    }),

                    _ => ()
                }
            }

            send({id, result})
        },

        'textDocument/completion' as method => {
            if not let %{
                'textDocument': %{
                    'uri': &[7;] ~> $path,
                },

                'position': %{
                    'line': int ~> line,
                    'character': int ~> col
                }
            } = msg['params'] {
                return
            }

            let result = match run({file: path, what: 2, line, col}) {
                %{source, type, completions} => {
                    isIncomplete: true,
                    items: [
                        {
                            label:    c['name'],
                            detail:   c['type'],
                            doc:      c['doc'],
                            kind:     c['kind'],
                            //sortText: "{10 - c['depth']:04} {c['name']}"
                            sortText: "{rand(120):05}"
                        }
                        for c in completions if !skip.any?(\c['name'] :: _)
                    ]
                },

                _ => nil
            }

            send({id, result})
        },

        _ => ()
    }
}

for (;;) {
    try {
        go()
    } catch err {
        error!(err)
    }
}

/* vim: set sts=4 sw=4 expandtab ft=ty: */
